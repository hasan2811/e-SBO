[debug] [2025-06-29T19:14:38.330Z] ----------------------------------------------------------------------
[debug] [2025-06-29T19:14:38.338Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-06-29T19:14:38.342Z] CLI Version:   14.7.0
[debug] [2025-06-29T19:14:38.342Z] Platform:      linux
[debug] [2025-06-29T19:14:38.342Z] Node Version:  v20.19.0
[debug] [2025-06-29T19:14:38.342Z] Time:          Sun Jun 29 2025 19:14:38 GMT+0000 (Coordinated Universal Time)
[debug] [2025-06-29T19:14:38.343Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-06-29T19:14:40.265Z] openjdk version "21.0.5" 2024-10-15

[debug] [2025-06-29T19:14:40.269Z] OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-06-29T19:14:40.321Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-06-29T19:14:40.341Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-06-29T19:14:40.352Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-06-29T19:14:40.377Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-06-29T19:14:40.377Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-06-29T19:14:40.378Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-06-29T19:14:45.732Z] Jun 29, 2025 7:14:45 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:45 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-06-29T19:14:45.817Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\n"}}
[debug] [2025-06-29T19:14:45.817Z] Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-06-29T19:14:45.965Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2025-06-29T19:14:46.757Z] Jun 29, 2025 7:14:46 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:46 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:47.606Z] Jun 29, 2025 7:14:47 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:47 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:48.106Z] Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:48.621Z] Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:49.147Z] Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:49.742Z] Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:50.963Z] Jun 29, 2025 7:14:50 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:50 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-29T19:15:06.439Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-29T19:15:06.454Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can only read and update their own profile.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Rules for Observations\n    match /observations/{observationId} {\n      // Allow any authenticated user to read public observations\n      // or observations they own.\n      allow read: if request.auth != null && (resource.data.scope == 'public' || request.auth.uid == resource.data.userId);\n      \n      // Allow any authenticated user to create an observation.\n      allow create: if request.auth != null;\n      \n      // Only the owner can update or delete their observation.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for Inspections. These are treated as public for now.\n    match /inspections/{inspectionId} {\n      // Allow any authenticated user to read or create.\n      allow read, create: if request.auth != null;\n      \n      // Only the owner can update or delete.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for PTWs\n    match /ptws/{ptwId} {\n      // Allow any authenticated user to read public PTWs\n      // or PTWs they own.\n      allow read: if request.auth != null && (resource.data.scope == 'public' || request.auth.uid == resource.data.userId);\n      \n      // Allow any authenticated user to create.\n      allow create: if request.auth != null;\n      \n      // Only the owner can update or delete. (Approver rules can be added later).\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-29T19:15:06.583Z] Jun 29, 2025 7:15:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:15:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-29T19:15:08.947Z] Jun 29, 2025 7:15:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:15:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-29T19:15:16.862Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-29T19:15:16.871Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-29T20:13:51.075Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-29T20:13:51.080Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can only manage their own profile\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Rules for Observations\n    match /observations/{docId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && resource.data.userId == request.auth.uid);\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n    \n    // Rules for Inspections\n    match /inspections/{docId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && resource.data.userId == request.auth.uid);\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n\n    // Rules for PTWs\n    match /ptws/{docId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && resource.data.userId == request.auth.uid);\n      // Anyone authenticated can approve a PTW, but only owner can create/delete\n      allow create, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || request.resource.data.status == 'Approved');\n    }\n  }\n}\n"}]}}
[debug] [2025-06-29T20:13:51.119Z] Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-29T20:13:51.219Z] Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-29T20:13:51.694Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-29T20:13:51.698Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-06-29T20:31:44.387Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.391Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\nJun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.403Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.411Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\nJun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.426Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-29T21:02:06.114Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-29T21:02:06.115Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Users can read and write their own profile\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n\n    // Rules for observations\n    match /observations/{obsId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for inspections\n    match /inspections/{inspId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n    \n    // Rules for PTWs\n    match /ptws/{ptwId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-29T21:02:06.186Z] Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-29T21:02:06.326Z] Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-29T21:02:07.011Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-29T21:02:07.027Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-06-30T04:31:45.139Z] ----------------------------------------------------------------------
[debug] [2025-06-30T04:31:45.144Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-06-30T04:31:45.145Z] CLI Version:   14.7.0
[debug] [2025-06-30T04:31:45.145Z] Platform:      linux
[debug] [2025-06-30T04:31:45.146Z] Node Version:  v20.19.0
[debug] [2025-06-30T04:31:45.146Z] Time:          Mon Jun 30 2025 04:31:45 GMT+0000 (Coordinated Universal Time)
[debug] [2025-06-30T04:31:45.146Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-06-30T04:31:46.871Z] openjdk version "21.0.5" 2024-10-15
OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-06-30T04:31:46.938Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-06-30T04:31:47.000Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-06-30T04:31:47.016Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-06-30T04:31:47.051Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-06-30T04:31:47.051Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-06-30T04:31:47.052Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-06-30T04:31:54.912Z] Jun 30, 2025 4:31:54 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:31:54 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-06-30T04:31:55.340Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:
 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n"}}
[debug] [2025-06-30T04:31:55.346Z] 
   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-06-30T04:31:55.747Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T04:32:12.801Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T04:32:12.811Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Users can read and write their own profile\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n\n    // Rules for observations\n    match /observations/{obsId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for inspections\n    match /inspections/{inspId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n    \n    // Rules for PTWs\n    match /ptws/{ptwId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T04:32:12.971Z] Jun 30, 2025 4:32:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:32:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:32:16.080Z] Jun 30, 2025 4:32:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:32:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:32:26.272Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T04:32:26.277Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T04:37:11.033Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T04:37:11.033Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can only read and modify their own profile document.\n    match /users/{userId} {\n      allow read, update, create: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // --- Helper Functions ---\n\n    // A user can read any document that is public, OR any document they own.\n    // This single rule covers both the public feed query and the private feed query.\n    function canRead(docData) {\n      return request.auth != null && (docData.userId == request.auth.uid || docData.scope == 'public');\n    }\n    \n    // A user can only write/modify a document they own.\n    function isOwner(docData) {\n      return request.auth != null && docData.userId == request.auth.uid;\n    }\n    \n    // --- Collection Rules ---\n    \n    match /observations/{docId} {\n      allow read: if canRead(resource.data);\n      allow create: if request.auth != null; // Any authenticated user can create.\n      allow update, delete: if isOwner(resource.data);\n    }\n\n    match /inspections/{docId} {\n      allow read: if canRead(resource.data);\n      allow create: if request.auth != null;\n      allow update, delete: if isOwner(resource.data);\n    }\n\n    match /ptws/{docId} {\n      allow read: if canRead(resource.data);\n      allow create: if request.auth != null;\n      allow update, delete: if isOwner(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T04:37:11.052Z] Jun 30, 2025 4:37:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:37:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:37:11.465Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T04:37:11.465Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T04:50:08.165Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T04:50:08.170Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is the owner of a data document\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // Rule for the 'users' collection\n    match /users/{userId} {\n      // Any authenticated user can read profile data (for names, etc.)\n      allow read: if isAuthenticated();\n      // Only the owner can update their own profile\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Generic rule for data collections (observations, inspections, ptws)\n    match /{dataCollection}/{docId}\n      where dataCollection in ['observations', 'inspections', 'ptws'] {\n      \n      // READ:\n      // A user can read a document if:\n      // 1. It is marked as 'public'\n      // 2. OR they are the owner of the document.\n      allow read: if resource.data.scope == 'public' || isOwner(resource.data.userId);\n\n      // CREATE:\n      // A user can create a document if:\n      // 1. They are authenticated.\n      // 2. They are the owner specified in the new document.\n      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);\n\n      // UPDATE:\n      // A user can update a document if:\n      // 1. They are authenticated.\n      // 2. They are the owner of the document being updated.\n      allow update: if isAuthenticated() && isOwner(resource.data.userId);\n\n      // DELETE:\n      // Deletes are disallowed to preserve data integrity.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T04:50:08.190Z] Jun 30, 2025 4:50:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:50:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:50:08.394Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T04:50:08.400Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":25,"column":11,"currentOffset":752,"endOffset":752},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":26,"column":7,"currentOffset":784,"endOffset":788},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":26,"column":7,"currentOffset":784,"endOffset":788},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":1,"currentOffset":1679,"endOffset":1679},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:25:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:26:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:26:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:51:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T05:13:01.964Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T05:13:01.965Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is a member of a project\n    function isProjectMember(projectId) {\n      // Use get() for checking single documents, typically in `allow get` rules.\n      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;\n      return isAuthenticated() && ('memberUids' in projectData) && request.auth.uid in projectData.memberUids;\n    }\n\n    // Profiles: Users can read any profile but only update their own.\n    match /users/{userId} {\n      allow read, create: if isAuthenticated();\n      allow update: if isAuthenticated() && request.auth.uid == userId;\n    }\n\n    // Projects: Users can create projects. They can read projects they are a member of.\n    match /projects/{projectId} {\n      allow create: if isAuthenticated();\n      // This rule is now more robust. It checks for the existence of 'memberUids'.\n      // This supports the 'array-contains' query used in the app.\n      allow read: if isAuthenticated() && 'memberUids' in resource.data && request.auth.uid in resource.data.memberUids;\n    }\n\n    // Generic rule for collections (observations, inspections, ptws)\n    match /{collection}/{docId}\n      where collection in ['observations', 'inspections', 'ptws'] {\n\n      allow create: if isAuthenticated();\n      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;\n\n      // Allow reading documents under these conditions:\n      // 1. The document is public.\n      // 2. The user is the owner of the document.\n      // 3. The document belongs to a project the user is a member of.\n      // This rule works for both single `get` requests and collection `list` queries\n      // as long as the queries are structured correctly (which we will ensure in the app).\n      allow read: if resource.data.scope == 'public'\n                   || (isAuthenticated() && request.auth.uid == resource.data.userId)\n                   || (isAuthenticated() && resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T05:13:02.002Z] Jun 30, 2025 5:13:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 5:13:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T05:13:02.315Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T05:13:02.324Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":34,"column":11,"currentOffset":1375,"endOffset":1375},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1403,"endOffset":1407},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1403,"endOffset":1407},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":1,"currentOffset":2260,"endOffset":2260},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:34:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:35:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:35:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:51:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T07:39:17.549Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T07:39:17.550Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can manage their own profile.\n    // Authenticated users can query the users collection to find others by email for invitations.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Projects can be read by members.\n    // The owner can update/delete it.\n    // An authenticated user can create a project and becomes the owner.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.ownerUid;\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Generic rules for collections that can be public, private, or project-scoped.\n    match /{collectionName}/{docId} \n        where collectionName in ['observations', 'inspections', 'ptws'] {\n          \n      // Helper function to check for project membership.\n      function isMember() {\n        return request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids;\n      }\n      \n      // Allow reads based on scope: public, user's own, or project member.\n      allow read: if resource.data.scope == 'public'\n                  || (request.auth != null && request.auth.uid == resource.data.userId)\n                  || (resource.data.scope == 'project' && resource.data.projectId != null && isMember());\n\n      // Allow creation if the user is the one submitting.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;\n\n      // Allow updates from the owner or any project member for observations and PTWs.\n      allow update: if (collectionName == 'observations' || collectionName == 'ptws')\n                    && request.auth != null\n                    && (request.auth.uid == resource.data.userId || (resource.data.scope == 'project' && resource.data.projectId != null && isMember()));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T07:39:17.798Z] Jun 30, 2025 7:39:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:39:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:39:18.062Z] Jun 30, 2025 7:39:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:39:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:39:18.601Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T07:39:18.602Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":22,"column":11,"currentOffset":897,"endOffset":897},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":23,"column":9,"currentOffset":932,"endOffset":936},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":23,"column":9,"currentOffset":932,"endOffset":936},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":1,"currentOffset":2098,"endOffset":2098},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:22:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:23:9 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:23:9 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:44:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T07:49:04.858Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T07:49:04.858Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users:\n    // - Authenticated users can read/list user profiles to enable invites by email.\n    // - Users can only write to their own document.\n    match /users/{userId} {\n      allow read, list: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Projects:\n    // - A user can read a project document if they are a member.\n    // - Any authenticated user can create a project.\n    // - Only the owner can update a project.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.ownerUid;\n      allow delete: if false; // Deleting projects is not allowed.\n    }\n\n    // A function to check read access for items (observations, inspections, ptws).\n    function canReadItem(item) {\n      return item.scope == 'public' ||\n             (request.auth != null && (\n               (item.scope == 'private' && request.auth.uid == item.userId) ||\n               (item.scope == 'project' && item.projectId != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(item.projectId)).data.memberUids)\n             ));\n    }\n\n    // Observations\n    match /observations/{obsId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n\n    // Inspections\n    match /inspections/{inspId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n    \n    // Permits to Work (PTW)\n    match /ptws/{ptwId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if request.auth != null;\n      // Allow updates from any authenticated user to handle approvals.\n      // In a real-world scenario, this would be more locked down (e.g., to project managers).\n      allow update: if request.auth != null;\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T07:49:04.879Z] Jun 30, 2025 7:49:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:49:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:49:05.795Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T07:49:05.798Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T07:53:03.188Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T07:53:03.188Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is the owner of a document\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // --- Users Collection ---\n    // Users can read their own profile.\n    // Authenticated users can query the collection to find users by email for invites.\n    // Users can create and update their own profile.\n    match /users/{userId} {\n      allow read, list: if isAuthenticated(); // Allow querying for project invites\n      allow create: if isOwner(userId);\n      allow update: if isOwner(userId);\n      allow delete: if false;\n    }\n\n    // --- Projects Collection ---\n    // Users can create projects.\n    // Users can read projects they are a member of.\n    // The project owner can update a project (e.g., to add members).\n    match /projects/{projectId} {\n      allow read: if isAuthenticated() && resource.data.memberUids.hasAny([request.auth.uid]);\n      allow create: if isAuthenticated();\n      allow update: if isAuthenticated() && resource.data.ownerUid == request.auth.uid;\n      allow delete: if false;\n    }\n    \n    // --- Access Control Function for Items ---\n    // Determines if a user can read an observation, inspection, or PTW.\n    function canAccessItem(itemData) {\n      let isPublic = itemData.scope == 'public';\n      let isItemOwner = itemData.userId == request.auth.uid;\n      let isProjectMember = itemData.scope == 'project' \n        && itemData.projectId != null\n        && get(/databases/$(database)/documents/projects/$(itemData.projectId)).data.memberUids.hasAny([request.auth.uid]);\n      \n      return isAuthenticated() && (isPublic || isItemOwner || isProjectMember);\n    }\n\n    // --- Observations Collection ---\n    match /observations/{observationId} {\n      allow read: if canAccessItem(resource.data);\n      allow create, update: if isAuthenticated() && isOwner(request.resource.data.userId);\n      allow delete: if false;\n    }\n    \n    // --- Inspections Collection ---\n    match /inspections/{inspectionId} {\n      allow read: if canAccessItem(resource.data);\n      allow create, update: if isAuthenticated() && isOwner(request.resource.data.userId);\n      allow delete: if false;\n    }\n\n    // --- PTWs Collection ---\n    match /ptws/{ptwId} {\n      allow read: if canAccessItem(resource.data);\n      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);\n      // Anyone authenticated can approve, this is handled in app logic.\n      // In a real scenario, you might check for a specific role.\n      allow update: if isAuthenticated(); \n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T07:53:03.237Z] Jun 30, 2025 7:53:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:53:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:53:03.691Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T07:53:03.693Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:08:00.748Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:08:00.748Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can manage their own profile. Authenticated users can read limited fields of others for invites.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Projects can be created by any authenticated user. Members can read/write.\n    match /projects/{projectId} {\n      allow read, update, delete: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null;\n    }\n\n    // --- Data collections: Observations, Inspections, PTWs ---\n\n    // Helper function to check if user is a member of a project\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n    \n    match /observations/{docId} {\n      allow read: if resource.data.scope == 'public' || \n                   request.auth.uid == resource.data.userId || \n                   (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      allow create: if request.auth != null;\n      // Allow the creator OR any project member to update the observation (e.g., take action)\n      allow update: if request.auth.uid == resource.data.userId || \n                     (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n    \n    match /inspections/{docId} {\n      allow read: if resource.data.scope == 'public' || \n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.userId ||\n                     (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n    \n    match /ptws/{docId} {\n      allow read: if resource.data.scope == 'public' ||\n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      allow create: if request.auth != null;\n      // Allow the creator OR any project member to update the PTW (e.g., approve)\n      allow update: if request.auth.uid == resource.data.userId ||\n                     (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:08:00.789Z] Jun 30, 2025 8:08:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:08:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:08:01.178Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:08:01.181Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:30:11.088Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:30:11.088Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is a member of a specific project.\n    // This is crucial for securing project-scoped data.\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n\n    // USER PROFILES\n    // Users can update their own profile.\n    // Any authenticated user can read other user profiles to enable inviting members by email.\n    // This is safe as profiles only contain non-sensitive data like name and email.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // PROJECTS\n    // Defines who can read, create, or update project documents.\n    match /projects/{projectId} {\n      // READ: Only project members can read the project document.\n      allow read: if isProjectMember(projectId);\n      // CREATE: Any authenticated user can create a new project.\n      allow create: if request.auth != null;\n      // UPDATE: Only project members can update (e.g., add new members in the future).\n      allow update: if isProjectMember(projectId);\n      // DELETE: Deleting projects is disabled for data integrity.\n      allow delete: if false;\n    }\n\n    // DATA COLLECTIONS (Observations, Inspections, PTWs)\n    // A single, powerful rule for all data-related collections.\n    match /{collection}/{docId} where collection in ['observations', 'inspections', 'ptws'] {\n      // CREATE: A user can only create documents under their own user ID.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // READ: Determines who can view a specific document based on its scope.\n      allow read: if \n        // Anyone can read public documents.\n        resource.data.scope == 'public' ||\n        // Only the owner can read their private documents.\n        (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n        // Only project members can read project-scoped documents.\n        (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n\n      // UPDATE: Determines who can modify a document.\n      allow update: if \n        // The original creator can always update their own document.\n        request.auth.uid == resource.data.userId ||\n        // Any member of the associated project can also update the document (e.g., to take action).\n        (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      \n      // DELETE: Deleting documents is disabled to preserve historical records.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:30:11.102Z] Jun 30, 2025 8:30:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:30:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:30:11.264Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:30:11.265Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":36,"column":11,"currentOffset":1478,"endOffset":1478},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":33,"currentOffset":1500,"endOffset":1504},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":33,"currentOffset":1500,"endOffset":1504},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":60,"column":1,"currentOffset":2723,"endOffset":2723},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:36:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:36:33 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:36:33 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:60:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:38:56.630Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:38:56.631Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth.uid == request.resource.data.ownerUid;\n      allow update: if request.auth.uid in resource.data.memberUids;\n    }\n\n    match /observations/{obsId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));\n    }\n\n    match /inspections/{inspId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));\n    }\n\n    match /ptws/{ptwId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:38:56.667Z] Jun 30, 2025 8:38:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:38:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:38:57.059Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:38:57.066Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
