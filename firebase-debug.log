[debug] [2025-06-29T19:14:38.330Z] ----------------------------------------------------------------------
[debug] [2025-06-29T19:14:38.338Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-06-29T19:14:38.342Z] CLI Version:   14.7.0
[debug] [2025-06-29T19:14:38.342Z] Platform:      linux
[debug] [2025-06-29T19:14:38.342Z] Node Version:  v20.19.0
[debug] [2025-06-29T19:14:38.342Z] Time:          Sun Jun 29 2025 19:14:38 GMT+0000 (Coordinated Universal Time)
[debug] [2025-06-29T19:14:38.343Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-06-29T19:14:40.265Z] openjdk version "21.0.5" 2024-10-15

[debug] [2025-06-29T19:14:40.269Z] OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-06-29T19:14:40.321Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-06-29T19:14:40.341Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-06-29T19:14:40.352Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-06-29T19:14:40.377Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-06-29T19:14:40.377Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-06-29T19:14:40.378Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-06-29T19:14:45.732Z] Jun 29, 2025 7:14:45 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:45 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-06-29T19:14:45.817Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\n"}}
[debug] [2025-06-29T19:14:45.817Z] Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-06-29T19:14:45.965Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2025-06-29T19:14:46.757Z] Jun 29, 2025 7:14:46 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:46 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:47.606Z] Jun 29, 2025 7:14:47 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:47 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:48.106Z] Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:48.621Z] Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:48 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:49.147Z] Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:49.742Z] Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:49 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-06-29T19:14:50.963Z] Jun 29, 2025 7:14:50 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:14:50 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-29T19:15:06.439Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-29T19:15:06.454Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can only read and update their own profile.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Rules for Observations\n    match /observations/{observationId} {\n      // Allow any authenticated user to read public observations\n      // or observations they own.\n      allow read: if request.auth != null && (resource.data.scope == 'public' || request.auth.uid == resource.data.userId);\n      \n      // Allow any authenticated user to create an observation.\n      allow create: if request.auth != null;\n      \n      // Only the owner can update or delete their observation.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for Inspections. These are treated as public for now.\n    match /inspections/{inspectionId} {\n      // Allow any authenticated user to read or create.\n      allow read, create: if request.auth != null;\n      \n      // Only the owner can update or delete.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for PTWs\n    match /ptws/{ptwId} {\n      // Allow any authenticated user to read public PTWs\n      // or PTWs they own.\n      allow read: if request.auth != null && (resource.data.scope == 'public' || request.auth.uid == resource.data.userId);\n      \n      // Allow any authenticated user to create.\n      allow create: if request.auth != null;\n      \n      // Only the owner can update or delete. (Approver rules can be added later).\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-29T19:15:06.583Z] Jun 29, 2025 7:15:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:15:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-29T19:15:08.947Z] Jun 29, 2025 7:15:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 7:15:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-29T19:15:16.862Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-29T19:15:16.871Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-29T20:13:51.075Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-29T20:13:51.080Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can only manage their own profile\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Rules for Observations\n    match /observations/{docId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && resource.data.userId == request.auth.uid);\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n    \n    // Rules for Inspections\n    match /inspections/{docId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && resource.data.userId == request.auth.uid);\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n\n    // Rules for PTWs\n    match /ptws/{docId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && resource.data.userId == request.auth.uid);\n      // Anyone authenticated can approve a PTW, but only owner can create/delete\n      allow create, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || request.resource.data.status == 'Approved');\n    }\n  }\n}\n"}]}}
[debug] [2025-06-29T20:13:51.119Z] Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-29T20:13:51.219Z] Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-29T20:13:51.694Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-29T20:13:51.698Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-06-29T20:31:44.387Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.391Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\nJun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.403Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.411Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\nJun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-06-29T20:31:44.426Z] Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 8:31:44 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-29T21:02:06.114Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-29T21:02:06.115Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Users can read and write their own profile\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n\n    // Rules for observations\n    match /observations/{obsId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for inspections\n    match /inspections/{inspId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n    \n    // Rules for PTWs\n    match /ptws/{ptwId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-29T21:02:06.186Z] Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-29T21:02:06.326Z] Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 29, 2025 9:02:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-29T21:02:07.011Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-29T21:02:07.027Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-06-30T04:31:45.139Z] ----------------------------------------------------------------------
[debug] [2025-06-30T04:31:45.144Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-06-30T04:31:45.145Z] CLI Version:   14.7.0
[debug] [2025-06-30T04:31:45.145Z] Platform:      linux
[debug] [2025-06-30T04:31:45.146Z] Node Version:  v20.19.0
[debug] [2025-06-30T04:31:45.146Z] Time:          Mon Jun 30 2025 04:31:45 GMT+0000 (Coordinated Universal Time)
[debug] [2025-06-30T04:31:45.146Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-06-30T04:31:46.871Z] openjdk version "21.0.5" 2024-10-15
OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-06-30T04:31:46.938Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-06-30T04:31:47.000Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-06-30T04:31:47.016Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-06-30T04:31:47.051Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-06-30T04:31:47.051Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-06-30T04:31:47.052Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-06-30T04:31:54.912Z] Jun 30, 2025 4:31:54 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:31:54 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-06-30T04:31:55.340Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:
 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n"}}
[debug] [2025-06-30T04:31:55.346Z] 
   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-06-30T04:31:55.747Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T04:32:12.801Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T04:32:12.811Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Users can read and write their own profile\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n\n    // Rules for observations\n    match /observations/{obsId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for inspections\n    match /inspections/{inspId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n    \n    // Rules for PTWs\n    match /ptws/{ptwId} {\n      allow create: if request.auth != null;\n      allow read: if resource.data.scope == 'public' || request.auth.uid == resource.data.userId;\n      allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T04:32:12.971Z] Jun 30, 2025 4:32:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:32:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:32:16.080Z] Jun 30, 2025 4:32:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:32:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:32:26.272Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T04:32:26.277Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T04:37:11.033Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T04:37:11.033Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can only read and modify their own profile document.\n    match /users/{userId} {\n      allow read, update, create: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // --- Helper Functions ---\n\n    // A user can read any document that is public, OR any document they own.\n    // This single rule covers both the public feed query and the private feed query.\n    function canRead(docData) {\n      return request.auth != null && (docData.userId == request.auth.uid || docData.scope == 'public');\n    }\n    \n    // A user can only write/modify a document they own.\n    function isOwner(docData) {\n      return request.auth != null && docData.userId == request.auth.uid;\n    }\n    \n    // --- Collection Rules ---\n    \n    match /observations/{docId} {\n      allow read: if canRead(resource.data);\n      allow create: if request.auth != null; // Any authenticated user can create.\n      allow update, delete: if isOwner(resource.data);\n    }\n\n    match /inspections/{docId} {\n      allow read: if canRead(resource.data);\n      allow create: if request.auth != null;\n      allow update, delete: if isOwner(resource.data);\n    }\n\n    match /ptws/{docId} {\n      allow read: if canRead(resource.data);\n      allow create: if request.auth != null;\n      allow update, delete: if isOwner(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T04:37:11.052Z] Jun 30, 2025 4:37:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:37:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:37:11.465Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T04:37:11.465Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T04:50:08.165Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T04:50:08.170Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is the owner of a data document\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // Rule for the 'users' collection\n    match /users/{userId} {\n      // Any authenticated user can read profile data (for names, etc.)\n      allow read: if isAuthenticated();\n      // Only the owner can update their own profile\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Generic rule for data collections (observations, inspections, ptws)\n    match /{dataCollection}/{docId}\n      where dataCollection in ['observations', 'inspections', 'ptws'] {\n      \n      // READ:\n      // A user can read a document if:\n      // 1. It is marked as 'public'\n      // 2. OR they are the owner of the document.\n      allow read: if resource.data.scope == 'public' || isOwner(resource.data.userId);\n\n      // CREATE:\n      // A user can create a document if:\n      // 1. They are authenticated.\n      // 2. They are the owner specified in the new document.\n      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);\n\n      // UPDATE:\n      // A user can update a document if:\n      // 1. They are authenticated.\n      // 2. They are the owner of the document being updated.\n      allow update: if isAuthenticated() && isOwner(resource.data.userId);\n\n      // DELETE:\n      // Deletes are disallowed to preserve data integrity.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T04:50:08.190Z] Jun 30, 2025 4:50:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:50:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T04:50:08.394Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T04:50:08.400Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":25,"column":11,"currentOffset":752,"endOffset":752},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":26,"column":7,"currentOffset":784,"endOffset":788},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":26,"column":7,"currentOffset":784,"endOffset":788},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":1,"currentOffset":1679,"endOffset":1679},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:25:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:26:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:26:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:51:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T05:13:01.964Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T05:13:01.965Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is a member of a project\n    function isProjectMember(projectId) {\n      // Use get() for checking single documents, typically in `allow get` rules.\n      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;\n      return isAuthenticated() && ('memberUids' in projectData) && request.auth.uid in projectData.memberUids;\n    }\n\n    // Profiles: Users can read any profile but only update their own.\n    match /users/{userId} {\n      allow read, create: if isAuthenticated();\n      allow update: if isAuthenticated() && request.auth.uid == userId;\n    }\n\n    // Projects: Users can create projects. They can read projects they are a member of.\n    match /projects/{projectId} {\n      allow create: if isAuthenticated();\n      // This rule is now more robust. It checks for the existence of 'memberUids'.\n      // This supports the 'array-contains' query used in the app.\n      allow read: if isAuthenticated() && 'memberUids' in resource.data && request.auth.uid in resource.data.memberUids;\n    }\n\n    // Generic rule for collections (observations, inspections, ptws)\n    match /{collection}/{docId}\n      where collection in ['observations', 'inspections', 'ptws'] {\n\n      allow create: if isAuthenticated();\n      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;\n\n      // Allow reading documents under these conditions:\n      // 1. The document is public.\n      // 2. The user is the owner of the document.\n      // 3. The document belongs to a project the user is a member of.\n      // This rule works for both single `get` requests and collection `list` queries\n      // as long as the queries are structured correctly (which we will ensure in the app).\n      allow read: if resource.data.scope == 'public'\n                   || (isAuthenticated() && request.auth.uid == resource.data.userId)\n                   || (isAuthenticated() && resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T05:13:02.002Z] Jun 30, 2025 5:13:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 5:13:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T05:13:02.315Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T05:13:02.324Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":34,"column":11,"currentOffset":1375,"endOffset":1375},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1403,"endOffset":1407},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1403,"endOffset":1407},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":1,"currentOffset":2260,"endOffset":2260},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:34:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:35:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:35:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:51:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T07:39:17.549Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T07:39:17.550Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can manage their own profile.\n    // Authenticated users can query the users collection to find others by email for invitations.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Projects can be read by members.\n    // The owner can update/delete it.\n    // An authenticated user can create a project and becomes the owner.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.ownerUid;\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Generic rules for collections that can be public, private, or project-scoped.\n    match /{collectionName}/{docId} \n        where collectionName in ['observations', 'inspections', 'ptws'] {\n          \n      // Helper function to check for project membership.\n      function isMember() {\n        return request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids;\n      }\n      \n      // Allow reads based on scope: public, user's own, or project member.\n      allow read: if resource.data.scope == 'public'\n                  || (request.auth != null && request.auth.uid == resource.data.userId)\n                  || (resource.data.scope == 'project' && resource.data.projectId != null && isMember());\n\n      // Allow creation if the user is the one submitting.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;\n\n      // Allow updates from the owner or any project member for observations and PTWs.\n      allow update: if (collectionName == 'observations' || collectionName == 'ptws')\n                    && request.auth != null\n                    && (request.auth.uid == resource.data.userId || (resource.data.scope == 'project' && resource.data.projectId != null && isMember()));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T07:39:17.798Z] Jun 30, 2025 7:39:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:39:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:39:18.062Z] Jun 30, 2025 7:39:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:39:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:39:18.601Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T07:39:18.602Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":22,"column":11,"currentOffset":897,"endOffset":897},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":23,"column":9,"currentOffset":932,"endOffset":936},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":23,"column":9,"currentOffset":932,"endOffset":936},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":44,"column":1,"currentOffset":2098,"endOffset":2098},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:22:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:23:9 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:23:9 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:44:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T07:49:04.858Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T07:49:04.858Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users:\n    // - Authenticated users can read/list user profiles to enable invites by email.\n    // - Users can only write to their own document.\n    match /users/{userId} {\n      allow read, list: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Projects:\n    // - A user can read a project document if they are a member.\n    // - Any authenticated user can create a project.\n    // - Only the owner can update a project.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.ownerUid;\n      allow delete: if false; // Deleting projects is not allowed.\n    }\n\n    // A function to check read access for items (observations, inspections, ptws).\n    function canReadItem(item) {\n      return item.scope == 'public' ||\n             (request.auth != null && (\n               (item.scope == 'private' && request.auth.uid == item.userId) ||\n               (item.scope == 'project' && item.projectId != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(item.projectId)).data.memberUids)\n             ));\n    }\n\n    // Observations\n    match /observations/{obsId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n\n    // Inspections\n    match /inspections/{inspId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n    \n    // Permits to Work (PTW)\n    match /ptws/{ptwId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if request.auth != null;\n      // Allow updates from any authenticated user to handle approvals.\n      // In a real-world scenario, this would be more locked down (e.g., to project managers).\n      allow update: if request.auth != null;\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T07:49:04.879Z] Jun 30, 2025 7:49:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:49:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:49:05.795Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T07:49:05.798Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T07:53:03.188Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T07:53:03.188Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is the owner of a document\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // --- Users Collection ---\n    // Users can read their own profile.\n    // Authenticated users can query the collection to find users by email for invites.\n    // Users can create and update their own profile.\n    match /users/{userId} {\n      allow read, list: if isAuthenticated(); // Allow querying for project invites\n      allow create: if isOwner(userId);\n      allow update: if isOwner(userId);\n      allow delete: if false;\n    }\n\n    // --- Projects Collection ---\n    // Users can create projects.\n    // Users can read projects they are a member of.\n    // The project owner can update a project (e.g., to add members).\n    match /projects/{projectId} {\n      allow read: if isAuthenticated() && resource.data.memberUids.hasAny([request.auth.uid]);\n      allow create: if isAuthenticated();\n      allow update: if isAuthenticated() && resource.data.ownerUid == request.auth.uid;\n      allow delete: if false;\n    }\n    \n    // --- Access Control Function for Items ---\n    // Determines if a user can read an observation, inspection, or PTW.\n    function canAccessItem(itemData) {\n      let isPublic = itemData.scope == 'public';\n      let isItemOwner = itemData.userId == request.auth.uid;\n      let isProjectMember = itemData.scope == 'project' \n        && itemData.projectId != null\n        && get(/databases/$(database)/documents/projects/$(itemData.projectId)).data.memberUids.hasAny([request.auth.uid]);\n      \n      return isAuthenticated() && (isPublic || isItemOwner || isProjectMember);\n    }\n\n    // --- Observations Collection ---\n    match /observations/{observationId} {\n      allow read: if canAccessItem(resource.data);\n      allow create, update: if isAuthenticated() && isOwner(request.resource.data.userId);\n      allow delete: if false;\n    }\n    \n    // --- Inspections Collection ---\n    match /inspections/{inspectionId} {\n      allow read: if canAccessItem(resource.data);\n      allow create, update: if isAuthenticated() && isOwner(request.resource.data.userId);\n      allow delete: if false;\n    }\n\n    // --- PTWs Collection ---\n    match /ptws/{ptwId} {\n      allow read: if canAccessItem(resource.data);\n      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);\n      // Anyone authenticated can approve, this is handled in app logic.\n      // In a real scenario, you might check for a specific role.\n      allow update: if isAuthenticated(); \n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T07:53:03.237Z] Jun 30, 2025 7:53:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 7:53:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T07:53:03.691Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T07:53:03.693Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:08:00.748Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:08:00.748Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can manage their own profile. Authenticated users can read limited fields of others for invites.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Projects can be created by any authenticated user. Members can read/write.\n    match /projects/{projectId} {\n      allow read, update, delete: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null;\n    }\n\n    // --- Data collections: Observations, Inspections, PTWs ---\n\n    // Helper function to check if user is a member of a project\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n    \n    match /observations/{docId} {\n      allow read: if resource.data.scope == 'public' || \n                   request.auth.uid == resource.data.userId || \n                   (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      allow create: if request.auth != null;\n      // Allow the creator OR any project member to update the observation (e.g., take action)\n      allow update: if request.auth.uid == resource.data.userId || \n                     (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n    \n    match /inspections/{docId} {\n      allow read: if resource.data.scope == 'public' || \n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      allow create: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.userId ||\n                     (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n    \n    match /ptws/{docId} {\n      allow read: if resource.data.scope == 'public' ||\n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      allow create: if request.auth != null;\n      // Allow the creator OR any project member to update the PTW (e.g., approve)\n      allow update: if request.auth.uid == resource.data.userId ||\n                     (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:08:00.789Z] Jun 30, 2025 8:08:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:08:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:08:01.178Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:08:01.181Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:30:11.088Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:30:11.088Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is a member of a specific project.\n    // This is crucial for securing project-scoped data.\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n\n    // USER PROFILES\n    // Users can update their own profile.\n    // Any authenticated user can read other user profiles to enable inviting members by email.\n    // This is safe as profiles only contain non-sensitive data like name and email.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // PROJECTS\n    // Defines who can read, create, or update project documents.\n    match /projects/{projectId} {\n      // READ: Only project members can read the project document.\n      allow read: if isProjectMember(projectId);\n      // CREATE: Any authenticated user can create a new project.\n      allow create: if request.auth != null;\n      // UPDATE: Only project members can update (e.g., add new members in the future).\n      allow update: if isProjectMember(projectId);\n      // DELETE: Deleting projects is disabled for data integrity.\n      allow delete: if false;\n    }\n\n    // DATA COLLECTIONS (Observations, Inspections, PTWs)\n    // A single, powerful rule for all data-related collections.\n    match /{collection}/{docId} where collection in ['observations', 'inspections', 'ptws'] {\n      // CREATE: A user can only create documents under their own user ID.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // READ: Determines who can view a specific document based on its scope.\n      allow read: if \n        // Anyone can read public documents.\n        resource.data.scope == 'public' ||\n        // Only the owner can read their private documents.\n        (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n        // Only project members can read project-scoped documents.\n        (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n\n      // UPDATE: Determines who can modify a document.\n      allow update: if \n        // The original creator can always update their own document.\n        request.auth.uid == resource.data.userId ||\n        // Any member of the associated project can also update the document (e.g., to take action).\n        (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n      \n      // DELETE: Deleting documents is disabled to preserve historical records.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:30:11.102Z] Jun 30, 2025 8:30:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:30:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:30:11.264Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:30:11.265Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":36,"column":11,"currentOffset":1478,"endOffset":1478},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":33,"currentOffset":1500,"endOffset":1504},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":33,"currentOffset":1500,"endOffset":1504},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":60,"column":1,"currentOffset":2723,"endOffset":2723},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:36:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:36:33 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:36:33 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:60:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:38:56.630Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:38:56.631Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth.uid == request.resource.data.ownerUid;\n      allow update: if request.auth.uid in resource.data.memberUids;\n    }\n\n    match /observations/{obsId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));\n    }\n\n    match /inspections/{inspId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));\n    }\n\n    match /ptws/{ptwId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:38:56.667Z] Jun 30, 2025 8:38:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:38:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:38:57.059Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:38:57.066Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:43:52.096Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:43:52.097Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // USERS COLLECTION\n    // Needed for inviting members to projects by email.\n    match /users/{userId} {\n      // Any authenticated user can query the collection to find others.\n      allow list: if request.auth != null;\n      // Users can get and update their own document.\n      allow get, update: if request.auth.uid == userId;\n    }\n\n    // PROJECTS COLLECTION\n    match /projects/{projectId} {\n      // Allow any authenticated user to create a project.\n      allow create: if request.auth != null;\n      // Allow a user to read a project if they are a member.\n      // This rule works with the client query: `where('memberUids', 'array-contains', user.uid)`\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      // Only the project owner can update or delete it.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n    }\n\n    // --- SHARED RULES FOR ITEMS (Observations, Inspections, PTWs) ---\n\n    // Helper function to check if the user is the owner of an item.\n    function isItemOwner() {\n      return request.auth.uid == resource.data.userId;\n    }\n\n    // Helper function to check if the user is a member of the item's project.\n    function isProjectMember() {\n      // Ensure the item is actually part of a project.\n      if (resource.data.scope != 'project' || resource.data.projectId == null) {\n        return false;\n      }\n      // Check if the user's UID is in the project's member list.\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids;\n    }\n\n    // OBSERVATIONS, INSPECTIONS, and PTWs\n    match /{collectionName}/{itemId}\n    where collectionName in ['observations', 'inspections', 'ptws'] {\n      \n      // CREATE: Any authenticated user can create an item.\n      allow create: if request.auth != null;\n      \n      // READ: Allow if the item is public, or if the user is the owner or a project member.\n      allow read: if request.auth != null && (resource.data.scope == 'public' || isItemOwner() || isProjectMember());\n      \n      // UPDATE: Allow if the user is the owner or a project member (e.g., for taking action or approving).\n      allow update: if request.auth != null && (isItemOwner() || isProjectMember());\n      \n      // DELETE: Only the owner of the item can delete it.\n      allow delete: if request.auth != null && isItemOwner();\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:43:52.113Z] Jun 30, 2025 8:43:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:43:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:43:52.213Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:43:52.214Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1418,"endOffset":1419},"description":"Unexpected 'if'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":7,"currentOffset":1595,"endOffset":1600},"description":"Unexpected 'return'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":38,"currentOffset":1626,"endOffset":1635},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":48,"currentOffset":1636,"endOffset":1636},"description":"Forward slash '/' found where identifier or binding expected.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":49,"currentOffset":1637,"endOffset":1637},"description":"mismatched input '$' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":60,"currentOffset":1648,"endOffset":1657},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":79,"currentOffset":1667,"endOffset":1667},"description":"Forward slash '/' found where identifier or binding expected.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":39,"column":80,"currentOffset":1668,"endOffset":1668},"description":"mismatched input '$' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":5,"currentOffset":1767,"endOffset":1771},"description":"Unexpected 'match'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:35:7 - ERROR Unexpected 'if'. 
[warn] ⚠  firestore.rules:39:7 - ERROR Unexpected 'return'. 
[warn] ⚠  firestore.rules:39:38 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:39:48 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:39:49 - ERROR mismatched input '$' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:39:60 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:39:79 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:39:80 - ERROR mismatched input '$' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:43:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:52:11.580Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:52:11.580Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read other user profiles to find members for projects.\n    // They can only create and modify their own profile.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow create, update: if request.auth.uid == userId;\n      allow delete: if false;\n    }\n\n    // Projects can be created by an authenticated user, but the owner must be the creator.\n    // Only members can read the project, and only the owner can update/delete it.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth.uid == request.resource.data.ownerUid && request.auth.uid in request.resource.data.memberUids;\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Observations, Inspections, and PTWs\n    match /{collectionName}/{docId} where collectionName in ['observations', 'inspections', 'ptws'] {\n      \n      function isOwner() {\n        return request.auth.uid == resource.data.userId;\n      }\n      \n      function isPublic() {\n        return resource.data.scope == 'public';\n      }\n      \n      function isProjectMember() {\n        // Check if the document belongs to a project\n        let projectId = resource.data.get('projectId', null);\n        \n        // If there's no project ID, this rule doesn't apply\n        if (projectId == null) {\n          return false;\n        }\n\n        // Check if the user is a member of that project by checking if their UID is in the memberUids array.\n        return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n\n      // Allow read if the doc is public, or if the user is authenticated and is the owner OR a project member\n      allow read: if isPublic() || (request.auth != null && (isOwner() || isProjectMember()));\n      \n      // Allow create only if the userId on the new document matches the creator's ID\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // Allow update only by the original creator\n      allow update: if isOwner();\n\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:52:11.596Z] Jun 30, 2025 8:52:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:52:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:52:11.718Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:52:11.720Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":23,"column":11,"currentOffset":930,"endOffset":930},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":23,"column":37,"currentOffset":956,"endOffset":960},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":23,"column":37,"currentOffset":956,"endOffset":960},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":38,"column":9,"currentOffset":1448,"endOffset":1449},"description":"Unexpected 'if'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":9,"currentOffset":1626,"endOffset":1631},"description":"Unexpected 'return'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":40,"currentOffset":1657,"endOffset":1666},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":50,"currentOffset":1667,"endOffset":1667},"description":"Forward slash '/' found where identifier or binding expected.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":51,"currentOffset":1668,"endOffset":1668},"description":"mismatched input '$' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":62,"currentOffset":1679,"endOffset":1688},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":81,"currentOffset":1698,"endOffset":1698},"description":"Forward slash '/' found where identifier or binding expected.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":43,"column":82,"currentOffset":1699,"endOffset":1699},"description":"mismatched input '$' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":47,"column":7,"currentOffset":1856,"endOffset":1860},"description":"Unexpected 'allow'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":57,"column":3,"currentOffset":2236,"endOffset":2236},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:23:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:23:37 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:23:37 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:38:9 - ERROR Unexpected 'if'. 
[warn] ⚠  firestore.rules:43:9 - ERROR Unexpected 'return'. 
[warn] ⚠  firestore.rules:43:40 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:43:50 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:43:51 - ERROR mismatched input '$' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:43:62 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:43:81 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:43:82 - ERROR mismatched input '$' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:47:7 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:57:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T08:57:51.885Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T08:57:51.885Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // =================================\n    // Helper Functions\n    // =================================\n    function isOwner(projectDoc) {\n      return request.auth.uid == projectDoc.data.ownerUid;\n    }\n\n    function isProjectMember(projectId) {\n      // Safely access project data and check if the user's UID is in the memberUids array.\n      // This function is critical for securing access to project-scoped data.\n      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;\n      return request.auth.uid in projectData.memberUids;\n    }\n\n\n    // =================================\n    // Collection: users\n    // =================================\n    match /users/{userId} {\n      // ANY authenticated user can query the users collection.\n      // THIS IS THE CRITICAL FIX for the \"invite by email\" feature.\n      // The server action needs this permission to find UIDs from emails.\n      allow list: if request.auth != null;\n\n      // A user can ONLY get their own profile document.\n      allow get: if request.auth.uid == userId;\n      \n      // A user can ONLY update their own profile document.\n      allow update: if request.auth.uid == userId;\n\n      // No one can create or delete users from the client.\n      allow create, delete: if false;\n    }\n\n\n    // =================================\n    // Collection: projects\n    // =================================\n    match /projects/{projectId} {\n      // A user can read a project's details ONLY if they are a member.\n      allow read: if request.auth != null && isProjectMember(projectId);\n      \n      // A user can create a project if they are authenticated and are the designated owner.\n      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;\n      \n      // Only the project owner can update (e.g., add members) or delete the project.\n      allow update, delete: if request.auth != null && isOwner(resource);\n    }\n    \n\n    // =================================\n    // Collections: observations, inspections, ptws\n    // =================================\n    match /{collection}/{docId} where collection in ['observations', 'inspections', 'ptws'] {\n      // This rule applies to all data collections.\n\n      // Allow read access if the document is public, or if the user is the author,\n      // or if the user is a member of the project the document belongs to.\n      // 'read' covers both 'get' and 'list' operations.\n      allow read: if resource.data.scope == 'public' || \n                     (request.auth != null && (\n                       resource.data.userId == request.auth.uid ||\n                       (resource.data.projectId != null && isProjectMember(resource.data.projectId))\n                     ));\n      \n      // Allow a user to create a document if they are the author.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // Allow a user to update a document if they are the author OR a project member.\n      // This is essential for the \"Take Action\" feature.\n      allow update: if request.auth != null && (\n                      resource.data.userId == request.auth.uid ||\n                      (resource.data.projectId != null && isProjectMember(resource.data.projectId))\n                    );\n\n      // Only the document's author can delete it.\n      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T08:57:51.907Z] Jun 30, 2025 8:57:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:57:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T08:57:52.029Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T08:57:52.030Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":59,"column":11,"currentOffset":2194,"endOffset":2194},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":59,"column":33,"currentOffset":2216,"endOffset":2220},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":59,"column":33,"currentOffset":2216,"endOffset":2220},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":85,"column":1,"currentOffset":3528,"endOffset":3528},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:59:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:59:33 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:59:33 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:85:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T09:04:02.397Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T09:04:02.405Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if a user is the owner of a document\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // Helper function to check if a user is a member of a specific project\n    function isProjectMember(projectId) {\n      return isAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n\n    // =====================================================================\n    // Users Collection\n    // =====================================================================\n    match /users/{userId} {\n      // Anyone authenticated can read any user's profile (needed for inviting to projects by email)\n      allow read: if isAuthenticated();\n      // A user can only create or update their own profile\n      allow write: if isOwner(userId);\n    }\n\n    // =====================================================================\n    // Projects Collection\n    // =====================================================================\n    match /projects/{projectId} {\n      // Only project members can read project details\n      allow read: if isProjectMember(projectId);\n\n      // An authenticated user can create a project if their UID is in the initial member list\n      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.memberUids;\n\n      // Only the project owner can update a project (e.g., change name, add/remove members)\n      allow update: if isOwner(resource.data.ownerUid);\n\n      // Deleting projects is disabled for safety\n      allow delete: if false;\n    }\n\n    // =====================================================================\n    // Data Collections (Observations, Inspections, PTWs)\n    // =====================================================================\n    function canReadItem(item) {\n      return item.scope == 'public' || isOwner(item.userId) || (item.projectId != null && isProjectMember(item.projectId));\n    }\n    \n    function canWriteItem(item) {\n        return isOwner(item.userId);\n    }\n\n    function canUpdateItem(item) {\n        return isOwner(item.userId) || (item.projectId != null && isProjectMember(item.projectId));\n    }\n\n    match /observations/{obsId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if canWriteItem(request.resource.data);\n      allow update: if canUpdateItem(resource.data);\n      allow delete: if isOwner(resource.data.userId);\n    }\n\n    match /inspections/{inspId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if canWriteItem(request.resource.data);\n      allow update: if canUpdateItem(resource.data);\n      allow delete: if isOwner(resource.data.userId);\n    }\n\n    match /ptws/{ptwId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if canWriteItem(request.resource.data);\n      allow update: if canUpdateItem(resource.data);\n      allow delete: if isOwner(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T09:04:02.419Z] Jun 30, 2025 9:04:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 9:04:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T09:04:02.816Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T09:04:02.816Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T09:24:49.108Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T09:24:49.108Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    // Users: Can read any profile (for inviting), but only write to their own.\n    match /users/{userId} {\n      allow read: if isSignedIn();\n      allow write: if isSignedIn() && request.auth.uid == userId;\n    }\n\n    // Projects: \n    // - To read/update a project, you must be a member. This rule works for both\n    //   single-document gets and collection queries using \"array-contains\".\n    // - To create a project, you must be the owner specified in the new document.\n    match /projects/{projectId} {\n      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;\n      allow read, update: if isSignedIn() && request.auth.uid in resource.data.memberUids;\n      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;\n    }\n    \n    // Generic rule for data collections (observations, inspections, ptw)\n    function canAccess(item) {\n      let isOwner = isSignedIn() && item.userId == request.auth.uid;\n      let isPublic = item.scope == 'public';\n      // projectId can be null, so check for it before trying to access it.\n      let isProjectScope = item.projectId != null && (request.auth.uid in get(/databases/$(database)/documents/projects/$(item.projectId)).data.memberUids);\n      \n      return isOwner || isPublic || isProjectScope;\n    }\n    \n    match /observations/{observationId} {\n      allow create: if canAccess(request.resource.data);\n      allow read, write: if canAccess(resource.data);\n    }\n    \n    match /inspections/{inspectionId} {\n      allow create: if canAccess(request.resource.data);\n      allow read, write: if canAccess(resource.data);\n    }\n    \n    match /ptws/{ptwId} {\n      allow create: if canAccess(request.resource.data);\n      allow read, write: if canAccess(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T09:24:49.149Z] Jun 30, 2025 9:24:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 9:24:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T09:24:49.758Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T09:24:49.765Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T09:31:58.326Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T09:31:58.326Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper Functions\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\t\t\n    function isProjectMember(projectId) {\n      return isAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n\n    // Rules for 'users' collection\n    match /users/{userId} {\n      // Anyone authenticated can see a user's profile (for display names etc.)\n      allow get: if isAuthenticated();\n      // Only the user themselves can create or update their own profile\n      allow write: if isOwner(userId);\n    }\n\n    // Rules for 'projects' collection\n    match /projects/{projectId} {\n      // Anyone authenticated can create a new project document\n      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerUid);\n      // Only members of the project can read its details\n      allow get, list: if isProjectMember(projectId);\n      // Only the owner can update a project (e.g., to add members in the future)\n      allow update: if isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid);\n      // Nobody can delete projects from the client for safety\n      allow delete: if false;\n    }\n\n    // Generic rules for data collections (observations, inspections, ptws)\n    match /{collectionName}/{docId} where collectionName in ['observations', 'inspections', 'ptws'] {\n      \n      function canRead() {\n        // Allow read if:\n        // 1. The document is public\n        return resource.data.scope == 'public'\n        // 2. The user is authenticated and is the owner\n        || (isAuthenticated() && isOwner(resource.data.userId))\n        // 3. The user is a member of the linked project\n        || (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n      }\n\n      function canWrite() {\n        // Allow write if:\n        // 1. Creating a new document and is authenticated\n        return isAuthenticated() && isOwner(request.resource.data.userId);\n      }\n      \n      function canUpdate() {\n        // Allow update if:\n        // 1. Authenticated and is owner\n        return isAuthenticated() && isOwner(resource.data.userId)\n        // 2. Or is a member of the project it belongs to\n        || (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n      }\n\n      allow get, list: if canRead();\n      allow create: if canWrite();\n      allow update: if canUpdate();\n      // Nobody can delete for data integrity\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T09:31:58.357Z] Jun 30, 2025 9:31:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 9:31:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T09:31:58.686Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T09:31:58.689Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":41,"column":11,"currentOffset":1470,"endOffset":1470},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":41,"column":37,"currentOffset":1496,"endOffset":1500},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":41,"column":37,"currentOffset":1496,"endOffset":1500},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":74,"column":1,"currentOffset":2702,"endOffset":2702},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:41:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:41:37 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:41:37 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:74:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T09:42:06.298Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T09:42:06.298Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is a member of a specific project.\n    // It verifies that the user's UID is present in the project's memberUids array.\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n    \n    //----------------------------------------------------------------------\n    //  USERS Collection\n    //----------------------------------------------------------------------\n    match /users/{userId} {\n      // ANY authenticated user can READ any user's profile.\n      // This is necessary to allow searching for users by email to invite them to projects.\n      // The data in user profiles (name, email, position) is not considered highly sensitive.\n      allow read: if request.auth != null;\n\n      // ONLY the user themselves can CREATE or UPDATE their own profile.\n      allow write: if request.auth.uid == userId;\n    }\n\n    //----------------------------------------------------------------------\n    //  PROJECTS Collection\n    //----------------------------------------------------------------------\n    match /projects/{projectId} {\n      // READ access is granted if the user is a member of the project.\n      allow read: if request.auth != null && isProjectMember(projectId);\n      \n      // CREATE access is granted if the requesting user is the owner of the new project document.\n      // This prevents users from creating projects on behalf of others.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;\n\n      // UPDATE access is granted only to the project owner.\n      // (For future features like adding/removing members).\n      allow update: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;\n\n      // DELETE access is disabled for now to prevent accidental data loss.\n      allow delete: if false;\n    }\n    \n    //----------------------------------------------------------------------\n    //  DATA Collections (Observations, Inspections, PTWs)\n    //  Generic rules apply to all three data types.\n    //----------------------------------------------------------------------\n    match /{collection}/{docId} where collection in ['observations', 'inspections', 'ptws'] {\n    \n      // READ access logic:\n      // A user can read a document if:\n      // 1. The document is marked as 'public'.\n      // 2. The user is a member of the project the document belongs to.\n      // 3. The document is the user's own private document (scope is 'private' or 'project' and userId matches).\n      allow read: if request.auth != null && \n                   (resource.data.scope == 'public' || \n                    (resource.data.projectId != null && isProjectMember(resource.data.projectId)) ||\n                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid));\n\n      // CREATE access is granted if the user creating the document is the same user\n      // assigned to the 'userId' field in the document.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;\n\n      // UPDATE access logic:\n      // A user can update a document if:\n      // 1. They are a member of the project the document belongs to.\n      // 2. It is their own private document.\n      allow update: if request.auth != null &&\n                     ((resource.data.projectId != null && isProjectMember(resource.data.projectId)) ||\n                      (resource.data.scope == 'private' && resource.data.userId == request.auth.uid));\n                      \n      // DELETE access is disabled for data integrity.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T09:42:06.328Z] Jun 30, 2025 9:42:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 9:42:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T09:42:06.504Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T09:42:06.504Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":48,"column":11,"currentOffset":2347,"endOffset":2347},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":48,"column":33,"currentOffset":2369,"endOffset":2373},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":48,"column":33,"currentOffset":2369,"endOffset":2373},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":76,"column":1,"currentOffset":3843,"endOffset":3843},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:48:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:48:33 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:48:33 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:76:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T09:44:24.202Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T09:44:24.202Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is a member of a specific project.\n    // It verifies that the user's UID is present in the project's memberUids array.\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n    \n    //----------------------------------------------------------------------\n    //  USERS Collection\n    //----------------------------------------------------------------------\n    match /users/{userId} {\n      // ANY authenticated user can READ any user's profile.\n      // This is necessary to allow searching for users by email to invite them to projects.\n      // The data in user profiles (name, email, position) is not considered highly sensitive.\n      allow read: if request.auth != null;\n\n      // ONLY the user themselves can CREATE or UPDATE their own profile.\n      allow write: if request.auth.uid == userId;\n    }\n\n    //----------------------------------------------------------------------\n    //  PROJECTS Collection\n    //----------------------------------------------------------------------\n    match /projects/{projectId} {\n      // READ access is granted if the user is a member of the project.\n      allow read: if request.auth != null && isProjectMember(projectId);\n      \n      // CREATE access is granted if the requesting user is the owner of the new project document.\n      // This prevents users from creating projects on behalf of others.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;\n\n      // UPDATE access is granted only to the project owner.\n      // (For future features like adding/removing members).\n      allow update: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;\n\n      // DELETE access is disabled for now to prevent accidental data loss.\n      allow delete: if false;\n    }\n    \n    //----------------------------------------------------------------------\n    //  DATA Collections (Observations, Inspections, PTWs)\n    //  Generic rules apply to all three data types.\n    //----------------------------------------------------------------------\n    match /{collection}/{docId} where collection in ['observations', 'inspections', 'ptws'] {\n    \n      // READ access logic:\n      // A user can read a document if:\n      // 1. The document is marked as 'public'.\n      // 2. The user is a member of the project the document belongs to.\n      // 3. The document is the user's own private document (scope is 'private' or 'project' and userId matches).\n      allow read: if request.auth != null && \n                   (resource.data.scope == 'public' || \n                    (resource.data.projectId != null && isProjectMember(resource.data.projectId)) ||\n                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid));\n\n      // CREATE access is granted if the user creating the document is the same user\n      // assigned to the 'userId' field in the document.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;\n\n      // UPDATE access logic:\n      // A user can update a document if:\n      // 1. They are a member of the project the document belongs to.\n      // 2. It is their own private document.\n      allow update: if request.auth != null &&\n                     ((resource.data.projectId != null && isProjectMember(resource.data.projectId)) ||\n                      (resource.data.scope == 'private' && resource.data.userId == request.auth.uid));\n                      \n      // DELETE access is disabled for data integrity.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T09:44:24.227Z] Jun 30, 2025 9:44:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 9:44:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T09:44:24.396Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T09:44:24.397Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":48,"column":11,"currentOffset":2347,"endOffset":2347},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":48,"column":33,"currentOffset":2369,"endOffset":2373},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":48,"column":33,"currentOffset":2369,"endOffset":2373},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":76,"column":1,"currentOffset":3843,"endOffset":3843},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:48:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:48:33 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:48:33 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:76:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T11:10:58.984Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T11:10:58.985Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // --- Helper Functions ---\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isUser(uid) {\n      return isSignedIn() && request.auth.uid == uid;\n    }\n\n    // Correctly checks if the requesting user is a member of a given project.\n    // This was the source of a critical bug.\n    function isProjectMember(projectId) {\n      // The `get()` call reads the project document.\n      // We check if the user's UID is present in the `memberUids` array using the `in` operator.\n      return isSignedIn() && projectId != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // --- Collection Rules ---\n\n    // Users: Can only read/update their own profile. Authenticated users can list them for invites.\n    match /users/{userId} {\n      allow read, update: if isUser(userId);\n      // This allows the createProject server action to find users by email.\n      allow list: if isSignedIn(); \n    }\n\n    // Projects: Members can read/update. Only the owner can create.\n    match /projects/{projectId} {\n      allow read, update: if isProjectMember(projectId);\n      allow create: if isSignedIn() && \n                     request.resource.data.ownerUid == request.auth.uid && \n                     request.auth.uid in request.resource.data.memberUids;\n    }\n\n    // Generic Rules for all item collections (observations, inspections, ptws)\n    match /{itemCollection}/{itemId} {\n       // READ: An item can be read if:\n       // 1. It's public.\n       // 2. It's private AND you are the owner.\n       // 3. It's a project item AND you are a member of that project.\n       allow read: if resource.data.scope == 'public' ||\n                      (resource.data.scope == 'private' && isUser(resource.data.userId)) || \n                      (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n\n       // CREATE: An item can be created if you are signed in and you are the author.\n       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;\n\n       // UPDATE: An item can be updated if you are the original author OR a member of its project.\n       allow update: if isUser(resource.data.userId) || isProjectMember(resource.data.projectId);\n       \n       // DELETE: Only the creator can delete their own reports.\n       allow delete: if isUser(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T11:10:59.037Z] Jun 30, 2025 11:10:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 11:10:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T11:10:59.140Z] Jun 30, 2025 11:10:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 11:10:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T11:10:59.470Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T11:10:59.470Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-06-30T13:04:05.666Z] ----------------------------------------------------------------------
[debug] [2025-06-30T13:04:05.671Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-06-30T13:04:05.672Z] CLI Version:   14.7.0
[debug] [2025-06-30T13:04:05.673Z] Platform:      linux
[debug] [2025-06-30T13:04:05.673Z] Node Version:  v20.19.0
[debug] [2025-06-30T13:04:05.673Z] Time:          Mon Jun 30 2025 13:04:05 GMT+0000 (Coordinated Universal Time)
[debug] [2025-06-30T13:04:05.674Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-06-30T13:04:05.679Z] >>> [apiv2][query] GET https://firebase-public.firebaseio.com/cli.json [none]
[debug] [2025-06-30T13:04:07.507Z] <<< [apiv2][status] GET https://firebase-public.firebaseio.com/cli.json 200
[debug] [2025-06-30T13:04:07.508Z] <<< [apiv2][body] GET https://firebase-public.firebaseio.com/cli.json {"cloudBuildErrorAfter":1594252800000,"cloudBuildWarnAfter":1590019200000,"defaultNode10After":1594252800000,"minVersion":"3.0.5","node8DeploysDisabledAfter":1613390400000,"node8RuntimeDisabledAfter":1615809600000,"node8WarnAfter":1600128000000}
[debug] [2025-06-30T13:04:08.021Z] openjdk version "21.0.5" 2024-10-15
OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-06-30T13:04:08.064Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-06-30T13:04:08.084Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-06-30T13:04:08.093Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-06-30T13:04:08.113Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-06-30T13:04:08.114Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-06-30T13:04:08.114Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-06-30T13:04:12.382Z] Jun 30, 2025 1:04:12 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 1:04:12 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-06-30T13:04:12.498Z] API endpoint: http:// {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://"}}
[debug] [2025-06-30T13:04:12.500Z] 127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-06-30T13:04:12.681Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T13:04:34.575Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T13:04:34.575Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // --- Helper Functions ---\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isUser(uid) {\n      return isSignedIn() && request.auth.uid == uid;\n    }\n\n    // Correctly checks if the requesting user is a member of a given project.\n    // This was the source of a critical bug.\n    function isProjectMember(projectId) {\n      // The `get()` call reads the project document.\n      // We check if the user's UID is present in the `memberUids` array using the `in` operator.\n      return isSignedIn() && projectId != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // --- Collection Rules ---\n\n    // Users: Can only read/update their own profile. Authenticated users can list them for invites.\n    match /users/{userId} {\n      allow read, update: if isUser(userId);\n      // This allows the createProject server action to find users by email.\n      allow list: if isSignedIn(); \n    }\n\n    // Projects: Members can read/update. Only the owner can create.\n    match /projects/{projectId} {\n      allow read, update: if isProjectMember(projectId);\n      allow create: if isSignedIn() && \n                     request.resource.data.ownerUid == request.auth.uid && \n                     request.auth.uid in request.resource.data.memberUids;\n    }\n\n    // Generic Rules for all item collections (observations, inspections, ptws)\n    match /{itemCollection}/{itemId} {\n       // READ: An item can be read if:\n       // 1. It's public.\n       // 2. It's private AND you are the owner.\n       // 3. It's a project item AND you are a member of that project.\n       allow read: if resource.data.scope == 'public' ||\n                      (resource.data.scope == 'private' && isUser(resource.data.userId)) || \n                      (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n\n       // CREATE: An item can be created if you are signed in and you are the author.\n       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;\n\n       // UPDATE: An item can be updated if you are the original author OR a member of its project.\n       allow update: if isUser(resource.data.userId) || isProjectMember(resource.data.projectId);\n       \n       // DELETE: Only the creator can delete their own reports.\n       allow delete: if isUser(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T13:04:34.950Z] Jun 30, 2025 1:04:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 1:04:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T13:04:37.680Z] Jun 30, 2025 1:04:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 1:04:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T13:05:01.275Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T13:05:01.276Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T13:24:50.955Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T13:24:50.956Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // =================================\n    // Helper Functions\n    // =================================\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    // Checks if the requesting user is a member of a specific project.\n    // Used for GET requests on single documents.\n    function isProjectMember(projectId) {\n      return isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n\n    // =================================\n    // User Profiles\n    // =================================\n    match /users/{userId} {\n      // Any authenticated user can read user profiles (needed for inviting members).\n      allow read: if isSignedIn();\n      // A user can only create their own profile document.\n      allow create: if request.auth.uid == userId;\n      // A user can only update their own profile.\n      allow update: if request.auth.uid == userId;\n      allow delete: if false;\n    }\n    \n    // =================================\n    // Projects\n    // =================================\n    match /projects/{projectId} {\n      // Allow reading a project's details only if you are a member.\n      allow get: if isProjectMember(projectId);\n      \n      // Allow LISTING projects only if the query explicitly asks for projects\n      // where the current user is a member. This forces secure client queries.\n      allow list: if isSignedIn() && request.query.where.get('memberUids') != null && request.query.where.get('memberUids')[2][0] == request.auth.uid;\n      \n      // Allow creating a project if the requester is the owner and is in the members list.\n      allow create: if isSignedIn() &&\n                       request.auth.uid == request.resource.data.ownerUid &&\n                       request.auth.uid in request.resource.data.memberUids;\n                       \n      // Allow updating a project only if you are the owner (for future use).\n      allow update: if resource.data.ownerUid == request.auth.uid;\n      allow delete: if false;\n    }\n    \n    // =================================\n    // Generic Item Collections (Observations, Inspections, PTWs)\n    // =================================\n    match /{itemCollection}/{itemId} where itemCollection in ['observations', 'inspections', 'ptws'] {\n    \n      // Allow creating an item if you are the author.\n      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;\n      \n      // Allow reading a single item if it's public, you are the author, or you are a member of its project.\n      allow get: if (resource.data.scope == 'public') ||\n                    (resource.data.userId == request.auth.uid) ||\n                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n                    \n      // Allow LISTING items only for specific, secure queries from the client.\n      allow list: if \n          // 1. Allow querying the public feed.\n          (request.query.where.get('scope') == 'public') ||\n          // 2. Allow a user to query for items they authored.\n          (isSignedIn() && request.query.where.get('userId') == request.auth.uid) ||\n          // 3. Allow a user to query for items within a specific project they are a member of.\n          (isSignedIn() && request.query.where.get('projectId') != null && isProjectMember(request.query.where.get('projectId')[2][0]));\n          \n      // Allow updates if you are the author or a member of the item's project.\n      allow update: if isSignedIn() && (request.auth.uid == resource.data.userId || (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)));\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T13:24:50.985Z] Jun 30, 2025 1:24:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 1:24:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T13:24:51.554Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T13:24:51.554Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":56,"column":11,"currentOffset":2307,"endOffset":2307},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":56,"column":38,"currentOffset":2334,"endOffset":2338},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":56,"column":38,"currentOffset":2334,"endOffset":2338},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":80,"column":1,"currentOffset":3796,"endOffset":3796},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:56:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:56:38 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:56:38 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:80:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T13:47:42.032Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T13:47:42.036Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper Functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n    \n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n    \n    // Checks if the requesting user is a member of a specific project.\n    function isProjectMember(projectId) {\n      // Use exists() for security and efficiency instead of get()\n      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&\n             get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n    \n    // User Profiles\n    match /users/{userId} {\n      // Anyone signed in can read user profiles. Needed for inviting members to projects.\n      allow read: if isSignedIn();\n      // A user can only create or update their own profile.\n      allow create, update: if isOwner(userId);\n    }\n    \n    // Projects Collection\n    match /projects/{projectId} {\n      // A user can read a project's details only if they are a member.\n      allow get: if isProjectMember(projectId);\n      \n      // A user can list only the projects they are a member of.\n      allow list: if isSignedIn() && request.query.where.get('memberUids').get('array-contains').get(0) == request.auth.uid;\n      \n      // A user can create a project if they are signed in, listed as the owner, and included in the member list.\n      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid && request.auth.uid in request.resource.data.memberUids;\n      \n      // Only the project owner can update a project (e.g., add members).\n      allow update: if isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid);\n    }\n    \n    // Generic Data Rule for Observations, Inspections, PTWs\n    match /{collection}/{itemId} {\n    \n      // READ access control\n      // A user can read a document if:\n      // 1. It's public.\n      // 2. It's their own private document.\n      // 3. They are a member of the project it belongs to.\n      allow get: if (resource.data.scope == 'public') || \n                    (resource.data.scope == 'private' && isOwner(resource.data.userId)) || \n                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));\n                    \n      // LIST (Query) access control\n      // A user can query a collection if the query targets:\n      // 1. Public documents.\n      // 2. Their own private documents (by userId and scope).\n      // 3. Documents from a specific project they are a member of.\n      allow list: if (request.query.where.get('scope') != null && request.query.where.get('scope').get('==') == 'public') ||\n                     (request.query.where.get('userId') != null && request.query.where.get('userId').get('==') == request.auth.uid) ||\n                     (request.query.where.get('projectId') != null && isProjectMember(request.query.where.get('projectId').get('==')));\n\n      // WRITE access control\n      // A user can create a document if they are signed in and are the owner of the new document.\n      allow create: if isSignedIn() && isOwner(request.resource.data.userId);\n      // A user can update a document only if they are its owner, or a member of the project for project-scoped items.\n      allow update: if isSignedIn() && (isOwner(resource.data.userId) || (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)));\n      // A user can delete a document only if they are its owner.\n      allow delete: if isSignedIn() && isOwner(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T13:47:42.054Z] Jun 30, 2025 1:47:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 1:47:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T13:47:42.985Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T13:47:42.986Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":36,"column":58,"currentOffset":1283,"endOffset":1285},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":76,"currentOffset":1301,"endOffset":1303},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":36,"column":98,"currentOffset":1323,"endOffset":1325},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":62,"column":43,"currentOffset":2690,"endOffset":2692},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":62,"column":87,"currentOffset":2734,"endOffset":2736},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":62,"column":100,"currentOffset":2747,"endOffset":2749},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":63,"column":43,"currentOffset":2815,"endOffset":2817},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":63,"column":88,"currentOffset":2860,"endOffset":2862},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":63,"column":102,"currentOffset":2874,"endOffset":2876},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":64,"column":43,"currentOffset":2950,"endOffset":2952},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":64,"column":107,"currentOffset":3014,"endOffset":3016},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":64,"column":124,"currentOffset":3031,"endOffset":3033},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:36:58 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:36:76 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:36:98 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:62:43 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:62:87 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:62:100 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:63:43 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:63:88 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:63:102 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:64:43 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:64:107 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:64:124 - WARNING Incorrect number of arguments supplied to function: get. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T14:00:25.719Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T14:00:25.721Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // =====================================================================\n    // Helper Functions\n    // =====================================================================\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n    \n    // Checks if a user is a member of a specific project.\n    // This is used for GET requests on single documents.\n    function isProjectMember(projectId) {\n      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));\n      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) \n             && request.auth.uid in projectDoc.data.memberUids;\n    }\n\n    // =====================================================================\n    // User Profiles\n    // =====================================================================\n    match /users/{userId} {\n      // Anyone signed in can view a user's profile (needed to get emails for invites)\n      allow get: if isSignedIn();\n      // Only the user themselves can create or update their own profile\n      allow write: if isOwner(userId);\n      // Allow authenticated users to list users (e.g., for invites)\n      allow list: if isSignedIn();\n    }\n\n    // =====================================================================\n    // Projects\n    // =====================================================================\n    match /projects/{projectId} {\n      // Only project members can read project details.\n      allow get: if isProjectMember(projectId);\n      // Anyone can create a project, as long as they list themselves as owner and member.\n      allow create: if isSignedIn() \n                    && isOwner(request.resource.data.ownerUid)\n                    && request.auth.uid in request.resource.data.memberUids;\n      // Future-proofing: Only owner can update/delete\n      allow update, delete: if isOwner(resource.data.ownerUid);\n      // Allow project members to list projects they are a part of.\n      allow list: if isSignedIn() && request.auth.uid in resource.data.memberUids;\n    }\n\n    // =====================================================================\n    // Data Collections (Observations, Inspections, PTWs)\n    // =====================================================================\n    function canReadItem(item) {\n        let isPublic = item.scope == 'public';\n        let isPrivateAndOwner = item.scope == 'private' && isOwner(item.userId);\n        let isProjectItemAndMember = item.scope == 'project' && isProjectMember(item.projectId);\n        \n        return isPublic || isPrivateAndOwner || isProjectItemAndMember;\n    }\n    \n    function canWriteItem() {\n        // User must be the owner of the document they are creating/updating.\n        return isSignedIn() && isOwner(request.resource.data.userId);\n    }\n\n    match /observations/{docId} {\n      allow get: if canReadItem(resource.data);\n      allow list: if isSignedIn(); // Broad list access, security enforced by queries + rules on 'get'\n      allow write: if canWriteItem();\n    }\n    \n    match /inspections/{docId} {\n      allow get: if canReadItem(resource.data);\n      allow list: if isSignedIn();\n      allow write: if canWriteItem();\n    }\n\n    match /ptws/{docId} {\n      allow get: if canReadItem(resource.data);\n      allow list: if isSignedIn();\n      allow write: if canWriteItem();\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T14:00:25.770Z] Jun 30, 2025 2:00:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:00:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:00:26.458Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T14:00:26.463Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T14:07:34.518Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T14:07:34.523Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return isSignedIn() && request.auth.uid == userId;\n    }\n\n    // =================================\n    // Users Collection\n    // =================================\n    match /users/{userId} {\n      // Any authenticated user can look up other users to invite them to projects.\n      // This is a security tradeoff for collaboration features without a complex backend.\n      allow list: if isSignedIn();\n\n      // A user can get their own profile.\n      allow get: if isSignedIn();\n      \n      // A user can update their own profile.\n      allow update: if isOwner(userId);\n      \n      // A new user profile is created during sign-up.\n      allow create: if isSignedIn();\n    }\n\n    // =================================\n    // Projects Collection\n    // =================================\n    match /projects/{projectId} {\n      // Anyone can create a project. The owner is set by the server action.\n      allow create: if isSignedIn();\n\n      // Users can read a project's data ONLY if their UID is in the memberUids list.\n      // This rule secures both direct gets and queries.\n      allow read: if isSignedIn() && request.auth.uid in resource.data.memberUids;\n\n      // Only the project owner can update a project (e.g., add members via a future function).\n      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;\n    }\n    \n    // =================================\n    // Shared Rules for Data Collections (Observations, Inspections, PTWs)\n    // =================================\n    function canReadItem(item) {\n      let isPublic = item.scope == 'public';\n      let isPrivateOwner = item.scope == 'private' && isOwner(item.userId);\n      let isProjectMember = item.scope == 'project' && get(/databases/$(database)/documents/projects/$(item.projectId)).data.memberUids.hasAny([request.auth.uid]);\n      \n      return isPublic || isPrivateOwner || isProjectMember;\n    }\n    \n    function canWriteItem() {\n       // Check if the projectId in the new data exists, if one is provided.\n      let projectExists = !request.resource.data.keys().hasAny(['projectId']) || request.resource.data.projectId == null || exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId));\n      \n      // The user creating the resource must be the owner.\n      return isOwner(request.resource.data.userId) && projectExists;\n    }\n\n    // =================================\n    // Observations Collection\n    // =================================\n    match /observations/{obsId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if canWriteItem();\n      // Only the owner of the observation can update it (e.g., take action).\n      allow update: if isOwner(resource.data.userId);\n    }\n    \n    // =================================\n    // Inspections Collection\n    // =================================\n    match /inspections/{inspId} {\n      allow read: if canReadItem(resource.data);\n      allow create: if canWriteItem();\n      allow update: if isOwner(resource.data.userId);\n    }\n\n    // =================================\n    // PTWs Collection\n    // =================================\n    match /ptws/{ptwId} {\n       allow read: if canReadItem(resource.data);\n       allow create: if canWriteItem();\n       // The PTW can be updated by the owner (e.g., submitting it) or by a project member (e.g., approving it).\n       allow update: if isOwner(resource.data.userId) || canReadItem(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T14:07:34.549Z] Jun 30, 2025 2:07:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:07:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:07:34.957Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T14:07:34.958Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T14:12:48.325Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T14:12:48.325Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for project membership.\n    // This is used for reading items within a project.\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // Rules for User Profiles\n    match /users/{userId} {\n      // Any authenticated user can read any profile (for inviting members).\n      allow read: if request.auth != null;\n      // Users can only create their own profile document.\n      allow create: if request.auth.uid == userId;\n      // Users can only update their own profile.\n      allow update: if request.auth.uid == userId;\n    }\n    \n    // This is critical for allowing the project creation server action\n    // to search for users by email.\n    match /users/{document=**} {\n      allow list: if request.auth != null;\n    }\n\n    // Rules for Projects\n    match /projects/{projectId} {\n      // A user can read a project document if their UID is in the memberUids array.\n      // This is efficient and works directly with the `array-contains` query from the client.\n      allow read: if request.auth.uid in resource.data.memberUids;\n\n      // A user can create a project if they are the owner and their UID is in the initial member list.\n      allow create: if request.auth.uid == request.resource.data.ownerUid && request.auth.uid in request.resource.data.memberUids;\n      \n      // Only the owner can update a project (e.g., add members - NOT YET IMPLEMENTED).\n      allow update: if request.auth.uid == resource.data.ownerUid;\n      \n      // Only the owner can delete a project.\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Rules for Observations\n    match /observations/{obsId} {\n      allow create: if request.auth.uid == request.resource.data.userId;\n      // Allow read if: \n      // 1. It's a public observation.\n      // 2. The user is the owner of the observation.\n      // 3. The observation belongs to a project the user is a member of (checks for non-null projectId).\n      allow read: if resource.data.scope == 'public' || \n                     resource.data.userId == request.auth.uid || \n                     (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n      allow update: if request.auth.uid == resource.data.userId || isProjectMember(resource.data.projectId);\n      allow delete: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for Inspections\n    match /inspections/{inspId} {\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow read: if resource.data.scope == 'public' || \n                     resource.data.userId == request.auth.uid || \n                     (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n      allow update: if request.auth.uid == resource.data.userId || isProjectMember(resource.data.projectId);\n      allow delete: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for Permit to Work (PTW)\n    match /ptws/{ptwId} {\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow read: if resource.data.scope == 'public' || \n                     resource.data.userId == request.auth.uid || \n                     (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n      // Any project member can approve/update a PTW.\n      allow update: if isProjectMember(resource.data.projectId);\n      allow delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T14:12:48.347Z] Jun 30, 2025 2:12:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:12:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:12:48.659Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T14:12:48.660Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T14:21:48.212Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T14:21:48.215Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check if a user is a member of a given project.\n    // This is used to secure reads for observations, inspections, and PTWs.\n    function isProjectMember(projectId) {\n      // Use `exists` for a lightweight check on the project document.\n      return exists(/databases/$(database)/documents/projects/$(projectId)) &&\n             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // Rules for the 'users' collection.\n    match /users/{userId} {\n      // A user can read or update their own profile.\n      allow read, update: if request.auth.uid == userId;\n      // Any authenticated user can list users, which is necessary for the\n      // project invitation feature to find users by email.\n      // The actual user data is still protected by the 'read' rule above.\n      allow list: if request.auth.uid != null;\n    }\n    \n    // Rules for the 'projects' collection.\n    match /projects/{projectId} {\n      // A user can create a project. The owner is set via server-side action.\n      allow create: if request.auth.uid != null;\n      // A user can read a project document only if their UID is in the memberUids list.\n      allow read: if request.auth.uid in resource.data.memberUids;\n      // Only the project owner can update project details (e.g., name, members).\n      allow update: if request.auth.uid == resource.data.ownerUid;\n      // Deleting projects is disabled for safety.\n      allow delete: if false;\n    }\n\n    // Rules for the 'observations' collection.\n    match /observations/{observationId} {\n      // Allow creating an observation if the user is authenticated.\n      allow create: if request.auth.uid != null;\n\n      // Allow reading an observation if:\n      // 1. It's public.\n      // 2. The user is the author.\n      // 3. The user is a member of the linked project.\n      allow read: if resource.data.scope == 'public' ||\n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n                   \n      // Allow updating an observation (e.g., taking action) if the user is a member of the project\n      // or if it's a personal/public observation that they own.\n      allow update: if (resource.data.projectId != null && isProjectMember(resource.data.projectId)) ||\n                     (resource.data.projectId == null && request.auth.uid == resource.data.userId);\n\n      // Deleting observations is disabled for safety.\n      allow delete: if false;\n    }\n    \n    // Rules for the 'inspections' collection.\n    match /inspections/{inspectionId} {\n      allow create: if request.auth.uid != null;\n      allow read: if resource.data.scope == 'public' ||\n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n      allow update: if false; // Updates for inspections are not a feature yet.\n      allow delete: if false;\n    }\n\n    // Rules for the 'ptws' (Permit to Work) collection.\n    match /ptws/{ptwId} {\n      allow create: if request.auth.uid != null;\n      \n      // Allow reading a PTW if it's public, the user submitted it, or they are a member of the project.\n      allow read: if resource.data.scope == 'public' ||\n                   request.auth.uid == resource.data.userId ||\n                   (resource.data.projectId != null && isProjectMember(resource.data.projectId));\n\n      // Only allow updating a PTW (e.g., approving it) if the user is a member of the associated project.\n      allow update: if resource.data.projectId != null && isProjectMember(resource.data.projectId);\n                   \n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T14:21:48.251Z] Jun 30, 2025 2:21:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:21:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:21:48.694Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T14:21:48.700Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T14:54:31.450Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T14:54:31.450Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // --- User Profiles ---\n    // Users can be read by any authenticated user (to find emails for invites).\n    // Users can only be updated by themselves.\n    match /users/{userId} {\n      allow read: if isSignedIn();\n      allow write: if isOwner(userId);\n    }\n\n    // --- Projects ---\n    // Any signed-in user can create a project.\n    // Only members can read or update a project's details.\n    // Only the owner can delete a project.\n    match /projects/{projectId} {\n      function isMember() {\n        return request.auth.uid in resource.data.memberUids;\n      }\n\n      allow create: if isSignedIn();\n      allow read, update: if isMember();\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      // --- Project Subcollections ---\n      // This is the \"folder\" logic. Access is granted if the user is a member of the parent project.\n      match /{collectionName}/{docId}\n        where collectionName in ['observations', 'inspections', 'ptws'] {\n        function isProjectMemberFromPath() {\n          return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        }\n        allow read, write: if isProjectMemberFromPath();\n      }\n    }\n\n    // --- Root Collections (for Public and Private items) ---\n    // This rule now applies only to the root collections for items not in a project.\n    match /{collectionName}/{docId}\n      where collectionName in ['observations', 'inspections', 'ptws'] {\n\n      // Allow anyone to read documents marked as 'public'.\n      // Allow authenticated users to read their own 'private' documents.\n      allow read: if resource.data.scope == 'public' || \n                   (resource.data.scope == 'private' && isOwner(resource.data.userId));\n\n      // An authenticated user can create a document, but they must set themselves as the owner.\n      allow create: if isSignedIn() && isOwner(request.resource.data.userId);\n\n      // Only the original owner can update or delete their documents.\n      allow update, delete: if isOwner(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T14:54:31.476Z] Jun 30, 2025 2:54:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:54:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:54:31.527Z] Jun 30, 2025 2:54:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:54:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:54:31.678Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T14:54:31.678Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":39,"column":13,"currentOffset":1140,"endOffset":1140},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":40,"column":9,"currentOffset":1174,"endOffset":1178},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":40,"column":9,"currentOffset":1174,"endOffset":1178},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":11,"currentOffset":1640,"endOffset":1640},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":7,"currentOffset":1672,"endOffset":1676},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":7,"currentOffset":1672,"endOffset":1676},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":64,"column":3,"currentOffset":2336,"endOffset":2336},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:39:13 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:40:9 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:40:9 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:50:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:51:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:51:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:64:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T14:56:58.157Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T14:56:58.158Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // --- User Profiles ---\n    // Users can be read by any authenticated user (to find emails for invites).\n    // Users can only be updated by themselves.\n    match /users/{userId} {\n      allow read: if isSignedIn();\n      allow write: if isOwner(userId);\n    }\n\n    // --- Projects ---\n    // Any signed-in user can create a project.\n    // Only members can read or update a project's details.\n    // Only the owner can delete a project.\n    match /projects/{projectId} {\n      function isMember() {\n        return request.auth.uid in resource.data.memberUids;\n      }\n\n      allow create: if isSignedIn();\n      allow read, update: if isMember();\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      // --- Project Subcollections ---\n      // This is the \"folder\" logic. Access is granted if the user is a member of the parent project.\n      match /{collectionName}/{docId}\n        where collectionName in ['observations', 'inspections', 'ptws'] {\n        function isProjectMemberFromPath() {\n          return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        }\n        allow read, write: if isProjectMemberFromPath();\n      }\n    }\n\n    // --- Root Collections (for Public and Private items) ---\n    // This rule now applies only to the root collections for items not in a project.\n    match /{collectionName}/{docId}\n      where collectionName in ['observations', 'inspections', 'ptws'] {\n\n      // Allow anyone to read documents marked as 'public'.\n      // Allow authenticated users to read their own 'private' documents.\n      allow read: if resource.data.scope == 'public' || \n                   (resource.data.scope == 'private' && isOwner(resource.data.userId));\n\n      // An authenticated user can create a document, but they must set themselves as the owner.\n      allow create: if isSignedIn() && isOwner(request.resource.data.userId);\n\n      // Only the original owner can update or delete their documents.\n      allow update, delete: if isOwner(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T14:56:58.186Z] Jun 30, 2025 2:56:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 2:56:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T14:56:58.419Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T14:56:58.420Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":39,"column":13,"currentOffset":1140,"endOffset":1140},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":40,"column":9,"currentOffset":1174,"endOffset":1178},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":40,"column":9,"currentOffset":1174,"endOffset":1178},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":11,"currentOffset":1640,"endOffset":1640},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":7,"currentOffset":1672,"endOffset":1676},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":7,"currentOffset":1672,"endOffset":1676},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":64,"column":3,"currentOffset":2336,"endOffset":2336},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:39:13 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:40:9 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:40:9 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:50:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:51:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:51:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:64:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T15:12:30.620Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T15:12:30.621Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // =================================\n    // Helper Functions\n    // =================================\n\n    // Returns true if the user is authenticated\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    // Returns true if the user is the owner of a document\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // Returns true if the user is a member of a specific project\n    function isProjectMember(projectId) {\n      // The user's UID must exist in the `memberUids` array of the project document.\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n\n    // =================================\n    // Collection Rules\n    // =================================\n\n    // Rule: User Profiles\n    // Users can read/update their own profile.\n    // Any authenticated user can list users to find their UID for invites.\n    match /users/{userId} {\n      allow read, update: if isOwner(userId);\n      allow list: if isSignedIn();\n    }\n\n    // Rule: Root Data Collections (for public and private items)\n    // Covers observations, inspections, and ptws at the top level.\n    match /{collectionName}/{docId} where collectionName in ['observations', 'inspections', 'ptws'] {\n      // Read: Anyone can read public items. Owners can read their private items.\n      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));\n      \n      // Create: Any signed-in user can create an item.\n      allow create: if isSignedIn();\n\n      // Update, Delete: Only the owner of the item can modify or delete it.\n      allow update, delete: if isOwner(resource.data.userId);\n    }\n\n    // Rule: Project Documents\n    match /projects/{projectId} {\n      // Read: Only members of the project can read its details.\n      allow read: if isProjectMember(projectId);\n\n      // Create: Any signed-in user can create a new project document.\n      allow create: if isSignedIn();\n      \n      // Update, Delete: For simplicity and security, only the project's original owner can modify or delete the project document itself.\n      allow update, delete: if isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid);\n    }\n\n    // Rule: Project Sub-Collections (Data within a project)\n    match /projects/{projectId}/{subcollection}/{itemId}\n      where subcollection in ['observations', 'inspections', 'ptws'] {\n        // Read, Write, Update, Delete: Any member of the project can perform any action on items within that project.\n        allow read, write: if isProjectMember(projectId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T15:12:30.649Z] Jun 30, 2025 3:12:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 3:12:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T15:12:30.832Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T15:12:30.836Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":42,"column":11,"currentOffset":1286,"endOffset":1286},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":42,"column":37,"currentOffset":1312,"endOffset":1316},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":42,"column":37,"currentOffset":1312,"endOffset":1316},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":66,"column":11,"currentOffset":2458,"endOffset":2466},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":67,"column":7,"currentOffset":2511,"endOffset":2515},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":67,"column":7,"currentOffset":2511,"endOffset":2515},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":71,"column":3,"currentOffset":2761,"endOffset":2761},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:42:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:42:37 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:42:37 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:66:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:67:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:67:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:71:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T15:27:46.492Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T15:27:46.494Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper Functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    function isProjectMember(projectId) {\n      // Efficiently checks if the requesting user's UID is in the project's member list.\n      // This rule structure is designed to work with 'array-contains' queries from the client.\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // USER PROFILES\n    // Allow any authenticated user to read profiles (needed for inviting members by email).\n    // Allow users to update only their own profile.\n    match /users/{userId} {\n      allow read: if isSignedIn();\n      allow update: if isOwner(userId);\n      allow create, delete: if false; // Disallow creating/deleting user docs directly\n    }\n\n    // PROJECTS\n    // Allow read access if the user is a member.\n    // Allow project creation if the user is the owner.\n    // Only members can update project details (e.g., name, members).\n    match /projects/{projectId} {\n      allow read, update: if isProjectMember(projectId);\n      allow create: if isOwner(request.resource.data.ownerUid);\n      allow delete: if isOwner(resource.data.ownerUid); // Only owner can delete\n    }\n    \n    // PROJECT SUBCOLLECTIONS (Observations, Inspections, PTWs inside a project)\n    // Any project member can read/write to these subcollections.\n    match /projects/{projectId}/{collection}/{docId} {\n       allow read, write, create, delete: if isProjectMember(projectId);\n    }\n\n    // ROOT COLLECTIONS (Observations, Inspections, PTWs that are public or private)\n    // Generic rule for all three root collections\n    match /{collection}/{docId} where collection in ['observations', 'inspections', 'ptws'] {\n      // Allow read if the document is public OR the user is the owner.\n      allow read: if resource.data.scope == 'public' || isOwner(resource.data.userId);\n      \n      // Allow create if the user is the owner of the new document.\n      allow create: if isOwner(request.resource.data.userId);\n      \n      // Allow updates/deletes only if the user is the owner.\n      allow update, delete: if isOwner(resource.data.userId);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T15:27:46.531Z] Jun 30, 2025 3:27:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 3:27:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T15:27:46.727Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T15:27:46.732Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":49,"column":11,"currentOffset":1841,"endOffset":1841},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":33,"currentOffset":1863,"endOffset":1867},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":33,"currentOffset":1863,"endOffset":1867},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":60,"column":1,"currentOffset":2362,"endOffset":2362},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:49:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:49:33 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:49:33 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:60:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T15:35:54.611Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T15:35:54.611Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Function to check if a user is a member of a project.\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n\n    // Users can read their own profile and update it.\n    // Any authenticated user can see a user's basic info (for inviting to projects).\n    match /users/{userId} {\n      allow read, list: if request.auth != null;\n      allow create, update: if request.auth.uid == userId;\n    }\n\n    // Projects can be read by members.\n    // Creation is allowed for any authenticated user.\n    match /projects/{projectId} {\n      allow read, update: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null;\n      \n      // Rules for sub-collections within a project\n      match /{collection}/{docId} {\n        allow read, write: if isProjectMember(projectId);\n      }\n    }\n    \n    // Generic rules for root-level item collections (observations, inspections, ptws)\n    match /{collection}/{docId} {\n      // Allow read if the item is public, or if the user is the owner of the item.\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n      \n      // Allow create for any authenticated user.\n      allow create: if request.auth != null;\n      \n      // Allow updates only by the user who created the item.\n      allow update: if request.auth != null && request.auth.uid == resource.data.userId;\n      \n      // Deletes are disallowed for now for data integrity.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T15:35:54.633Z] Jun 30, 2025 3:35:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 3:35:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T15:35:54.881Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T15:35:54.881Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T16:13:51.478Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T16:13:51.479Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // =================================================================\n    // Helper Functions\n    // =================================================================\n\n    // Returns true if the requesting user is the owner of the document.\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // Returns true if the requesting user is a member of the specified project.\n    // This function is crucial for securing project-related data.\n    function isProjectMember(projectId) {\n      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId)).data;\n      return request.auth.uid in projectDoc.memberUids;\n    }\n\n    // =================================================================\n    // User Profiles\n    // =================================================================\n    match /users/{userId} {\n      // READ: Any authenticated user can read profile data.\n      // This is necessary to display user names, positions, etc., throughout the app.\n      allow read: if request.auth != null;\n\n      // LIST: Authenticated users can list users.\n      // Required for the \"invite members by email\" feature in project creation.\n      allow list: if request.auth != null;\n      \n      // CREATE: Any user can create their own profile document during sign-up.\n      allow create: if isOwner(userId);\n\n      // UPDATE: A user can only update their own profile.\n      allow update: if isOwner(userId);\n    }\n\n    // =================================================================\n    // Root Collections (Public & Private Items)\n    // =================================================================\n    match /{collection=observations,inspections,ptws}/{docId} {\n      // READ:\n      // - Allow if the document's scope is 'public'.\n      // - Allow if the requesting user is the owner of the document.\n      allow read: if resource.data.scope == 'public' || isOwner(resource.data.userId);\n\n      // CREATE: A user can only create a document for themselves.\n      allow create: if isOwner(request.resource.data.userId);\n\n      // UPDATE, DELETE: Only the owner can modify their own document.\n      allow update, delete: if isOwner(resource.data.userId);\n    }\n\n    // =================================================================\n    // Projects Collection\n    // =================================================================\n    match /projects/{projectId} {\n      // READ: A user can read a project's details if they are a member.\n      allow read: if isProjectMember(projectId);\n      \n      // CREATE: Any authenticated user can create a project.\n      // The business logic (e.g., subscription status) should be handled by server actions.\n      allow create: if request.auth != null;\n      \n      // UPDATE: Only the project owner can update project details (e.g., name).\n      allow update: if isOwner(resource.data.ownerUid);\n      \n      // DELETE: Not allowed by default to prevent accidental data loss.\n      allow delete: if false;\n\n      // --- Project Sub-Collections ---\n      // These rules apply to /projects/{projectId}/observations/{obsId}, etc.\n      match /{subCollection=observations,inspections,ptws}/{subDocId} {\n        // READ, WRITE (Create, Update, Delete):\n        // Allow full access if the user is a member of the parent project.\n        // This single rule elegantly secures all data within a project.\n        allow read, write: if isProjectMember(projectId);\n      }\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T16:13:51.519Z] Jun 30, 2025 4:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T16:13:51.615Z] Jun 30, 2025 4:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:13:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T16:13:51.872Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T16:13:51.879Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":45,"column":11,"currentOffset":1758,"endOffset":1758},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":45,"column":13,"currentOffset":1760,"endOffset":1769},"description":"mismatched input 'collection' expecting '}'","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":45,"column":24,"currentOffset":1771,"endOffset":1782},"description":"Unexpected 'observations'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":45,"column":54,"currentOffset":1801,"endOffset":1801},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":7,"currentOffset":1957,"endOffset":1961},"description":"mismatched input 'allow' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":61,"column":5,"currentOffset":2486,"endOffset":2490},"description":"Unexpected 'match'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:45:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:45:13 - ERROR mismatched input 'collection' expecting '}' 
[warn] ⚠  firestore.rules:45:24 - ERROR Unexpected 'observations'. 
[warn] ⚠  firestore.rules:45:54 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:49:7 - ERROR mismatched input 'allow' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:61:5 - ERROR Unexpected 'match'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T16:31:08.862Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T16:31:08.863Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // =================================\n    // Helper Functions\n    // =================================\n    function isOwner(doc) {\n      return request.auth.uid == doc.userId;\n    }\n    \n    function isProjectMember(projectId) {\n      // Allow access if the user's UID is in the project's memberUids list.\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // =================================\n    // User Profiles\n    // =================================\n    match /users/{userId} {\n      // Anyone can read user profiles to get names, etc. for display.\n      allow read;\n      // A user can only write to their own profile.\n      allow update: if request.auth.uid == userId;\n      // Allow authenticated users to look up other users by email for project invites.\n      allow list: if request.auth != null;\n    }\n\n    // =================================\n    // Projects\n    // =================================\n    match /projects/{projectId} {\n      // Users can read/write project details if they are a member.\n      allow read, write: if isProjectMember(projectId);\n      // A user can list projects they are a member of.\n      allow list: if request.auth.uid in resource.data.memberUids;\n      // A user can create a project if they are listed as the owner in the new document.\n      allow create: if request.auth.uid == request.resource.data.ownerUid;\n    }\n\n    // =================================\n    // Items in Project Subcollections (Observations, Inspections, PTWs)\n    // =================================\n    match /projects/{projectId}/{itemCollection}/{itemId} {\n       // Allow full access to any member of the project.\n       allow read, create, update, delete: if isProjectMember(projectId);\n    }\n    \n    // =================================\n    // Root Collections (Public or Private Items)\n    // =================================\n    match /{itemCollection}/{itemId} {\n       // Allow anyone to read public items.\n       // Allow owner to read their own private items.\n       allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data));\n       \n       // Allow authenticated users to create items for themselves.\n       // This fixes the critical bug where `isOwner()` was used incorrectly.\n       allow create: if request.auth.uid == request.resource.data.userId;\n       \n       // Allow owner to update their own items.\n       allow update: if isOwner(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T16:31:08.877Z] Jun 30, 2025 4:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:31:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T16:31:09.074Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T16:31:09.083Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T16:41:23.590Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T16:41:23.592Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // =================================\n    // Helper Functions\n    // =================================\n\n    // Helper function to check if the requesting user is a member of a specific project.\n    // It verifies that the project exists and the user's UID is in the memberUids array.\n    function isProjectMember(projectId) {\n      return exists(/databases/$(database)/documents/projects/$(projectId)) &&\n             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // =================================\n    // Collection Rules\n    // =================================\n\n    // Rules for the 'users' collection.\n    match /users/{userId} {\n      // Allow any authenticated user to read user profiles (for names, positions, etc.).\n      // This is needed for creating projects and displaying user info.\n      allow list, get: if request.auth != null;\n      \n      // A user can only create their own document or update their own profile.\n      allow create, update: if request.auth.uid == userId;\n    }\n\n    // Rules for the 'projects' collection itself.\n    match /projects/{projectId} {\n      // Any authenticated user can create a project.\n      allow create: if request.auth != null;\n      \n      // A user can read a project document only if they are a member of that project.\n      allow read: if isProjectMember(projectId);\n      \n      // A user can update a project only if they are the owner.\n      allow update: if isProjectMember(projectId) && resource.data.ownerUid == request.auth.uid;\n    }\n\n    // This function defines a set of reusable rules for any item collection \n    // (e.g., observations, inspections, ptws).\n    function itemCollectionRules(collectionName) {\n      return {\n        // Rules for TOP-LEVEL item collections (e.g., /observations/{itemId}).\n        // These are for public or private (non-project) items.\n        match /$(collectionName)/{itemId} {\n          // Anyone can read if the scope is public. A user can read their own private items.\n          allow read: if resource.data.scope == 'public' || resource.data.userId == request.auth.uid;\n\n          // Allow authenticated users to list items. Filtering for public/private is done client-side.\n          // This simplified query prevents index errors.\n          allow list: if request.auth != null;\n\n          // A user can create an item if they are the owner of the new item.\n          allow create: if request.auth.uid == request.resource.data.userId;\n\n          // A user can update an item only if they are the original owner.\n          allow update: if request.auth.uid == resource.data.userId;\n        },\n\n        // Rules for item SUB-COLLECTIONS within a project (e.g., /projects/{projectId}/observations/{itemId}).\n        match /projects/{projectId}/$(collectionName)/{itemId} {\n          // Allow full read/write access to any item inside a project\n          // if the requesting user is a member of that project.\n          allow read, write: if isProjectMember(projectId);\n        }\n      }\n    }\n    \n    // Apply the generic rules defined above to each specific item collection.\n    // This keeps the rules DRY (Don't Repeat Yourself) and easy to manage.\n    match /databases/{database}/documents {\n      {...itemCollectionRules(\"observations\")}\n      {...itemCollectionRules(\"inspections\")}\n      {...itemCollectionRules(\"ptws\")}\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T16:41:23.612Z] Jun 30, 2025 4:41:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 4:41:23 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T16:41:23.889Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T16:41:23.893Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":49,"column":9,"currentOffset":2004,"endOffset":2008},"description":"Unexpected 'match'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":15,"currentOffset":2010,"endOffset":2010},"description":"Forward slash '/' found where identifier or binding expected.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":15,"currentOffset":2010,"endOffset":2010},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":16,"currentOffset":2011,"endOffset":2011},"description":"mismatched input '$' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":49,"column":33,"currentOffset":2028,"endOffset":2028},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":51,"column":11,"currentOffset":2144,"endOffset":2148},"description":"missing '}' at 'allow'","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":62,"column":10,"currentOffset":2757,"endOffset":2757},"description":"Unexpected ','.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":15,"currentOffset":2886,"endOffset":2894},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":36,"currentOffset":2907,"endOffset":2907},"description":"Forward slash '/' found where identifier or binding expected.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":37,"currentOffset":2908,"endOffset":2908},"description":"Unexpected '$'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":37,"currentOffset":2908,"endOffset":2908},"description":"mismatched input '$' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":65,"column":54,"currentOffset":2925,"endOffset":2925},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":68,"column":11,"currentOffset":3083,"endOffset":3087},"description":"mismatched input 'allow' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":70,"column":7,"currentOffset":3149,"endOffset":3149},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:49:9 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:49:15 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:49:15 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:49:16 - ERROR mismatched input '$' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:49:33 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:51:11 - ERROR missing '}' at 'allow' 
[warn] ⚠  firestore.rules:62:10 - ERROR Unexpected ','. 
[warn] ⚠  firestore.rules:65:15 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:65:36 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:65:37 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:65:37 - ERROR mismatched input '$' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:65:54 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:68:11 - ERROR mismatched input 'allow' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:70:7 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T18:40:12.647Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T18:40:12.649Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // =================================================================\n    // Helper Functions\n    // =================================================================\n    \n    // Is the user authenticated?\n    function isSignedIn() {\n      return request.auth != null;\n    }\n    \n    // Does the incoming data belong to the user making the request?\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n    \n    // Is the user a member of a specific project?\n    function isProjectMember(projectId) {\n      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // Is the user the owner of a specific project?\n    function isProjectOwner(projectId) {\n      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;\n    }\n    \n    // =================================================================\n    // User Profiles\n    // =================================================================\n    match /users/{userId} {\n      // Users can only read their own profile.\n      // Users can create their own profile upon signup.\n      // Users can only update their own profile (displayName, position).\n      allow read, update: if isSignedIn() && isOwner(userId);\n      allow create: if isSignedIn();\n    }\n    \n    // =================================================================\n    // Projects\n    // =================================================================\n    match /projects/{projectId} {\n      // Allow reading project data ONLY if the user is a member of that project.\n      allow read: if isProjectMember(projectId);\n      \n      // Allow creating a project if the user is signed in and they are the owner.\n      allow create: if isSignedIn() && isOwner(resource.data.ownerUid);\n\n      // Only the project OWNER can update project details (e.g., add/remove members later).\n      allow update: if isProjectOwner(projectId);\n      \n      // Deny deletion of projects for safety.\n      allow delete: if false;\n\n      // =================================================================\n      // Items within Project Sub-collections\n      // =================================================================\n      \n      // Generic rule for all item types within a project.\n      // This covers observations, inspections, and ptws.\n      match /{itemCollection}/{itemId} {\n        // Allow members of the project to read, create, and update any item within it.\n        allow read, create, update: if isProjectMember(projectId);\n        allow delete: if false; // Deletion is generally disabled for record-keeping.\n      }\n    }\n    \n    // =================================================================\n    // Root Collections for Public/Private Items\n    // =================================================================\n\n    // --- Observations ---\n    match /observations/{observationId} {\n      // Read: Allow if scope is public, or if scope is private and user is the owner.\n      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));\n      \n      // Create: Allow if user is signed in and is the owner of the new document.\n      allow create: if isSignedIn() && isOwner(request.resource.data.userId);\n\n      // Update: Allow only if user is the owner.\n      allow update: if isSignedIn() && isOwner(resource.data.userId);\n\n      allow delete: if false;\n    }\n\n    // --- Inspections ---\n    match /inspections/{inspectionId} {\n      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));\n      allow create: if isSignedIn() && isOwner(request.resource.data.userId);\n      allow update: if isSignedIn() && isOwner(resource.data.userId);\n      allow delete: if false;\n    }\n\n    // --- PTWs ---\n    match /ptws/{ptwId} {\n      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));\n      allow create: if isSignedIn() && isOwner(request.resource.data.userId);\n      allow update: if isSignedIn() && isOwner(resource.data.userId);\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T18:40:12.826Z] Jun 30, 2025 6:40:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 6:40:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T18:40:13.091Z] Jun 30, 2025 6:40:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 6:40:13 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T18:40:14.028Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T18:40:14.028Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-06-30T20:13:45.425Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-06-30T20:13:45.430Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    function isOwner(doc) {\n      return request.auth != null && request.auth.uid == doc.userId;\n    }\n    \n    function isPublic(doc) {\n      // A document is considered public if its scope is explicitly 'public'.\n      // Checking for the key's existence first makes the rule robust against older data\n      // that might be missing the 'scope' field, preventing permission errors.\n      return doc.keys().has('scope') && doc.scope == 'public';\n    }\n\n    // --- USER DATA ---\n    // Users can read their own profile.\n    // Users can only create their own profile.\n    // Users can only update their own display name and position.\n    match /users/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null && request.auth.uid == userId;\n      allow update: if request.auth != null && request.auth.uid == userId\n                      && request.resource.data.keys().hasOnly(['displayName', 'position']);\n    }\n\n    // --- PROJECTS ---\n    // Anyone authenticated can create a project. The createProject server action validates ownership.\n    // Only members can read project details.\n    // Only the owner can update the project (e.g., name, members).\n    // Deleting projects is disallowed for safety.\n    match /projects/{projectId} {\n      allow create: if request.auth != null;\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      allow delete: if false;\n\n      // Project Subcollections (Observations, Inspections, PTWs)\n      // Any member of the project can create, read, update, or delete items within that project.\n      match /{collection}/{docId} {\n         allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n\n    // --- PUBLIC & PRIVATE ROOT COLLECTIONS ---\n\n    // Observations\n    match /observations/{obsId} {\n      allow read: if isPublic(resource.data) || isOwner(resource.data);\n      allow create: if isOwner(request.resource.data);\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n\n    // Inspections\n    match /inspections/{inspId} {\n      allow read: if isPublic(resource.data) || isOwner(resource.data);\n      allow create: if isOwner(request.resource.data);\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n\n    // PTWs\n    match /ptws/{ptwId} {\n      allow read: if isPublic(resource.data) || isOwner(resource.data);\n      allow create: if isOwner(request.resource.data);\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-06-30T20:13:45.566Z] Jun 30, 2025 8:13:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:13:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-06-30T20:13:45.761Z] Jun 30, 2025 8:13:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jun 30, 2025 8:13:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-06-30T20:13:46.703Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-06-30T20:13:46.703Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":15,"column":25,"currentOffset":504,"endOffset":506},"description":"Invalid function name: has.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:15:25 - WARNING Invalid function name: has. 
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-01T05:36:12.160Z] ----------------------------------------------------------------------
[debug] [2025-07-01T05:36:12.169Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-01T05:36:12.170Z] CLI Version:   14.7.0
[debug] [2025-07-01T05:36:12.170Z] Platform:      linux
[debug] [2025-07-01T05:36:12.170Z] Node Version:  v20.19.0
[debug] [2025-07-01T05:36:12.171Z] Time:          Tue Jul 01 2025 05:36:12 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-01T05:36:12.171Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-01T05:36:13.908Z] openjdk version "21.0.5" 2024-10-15

[debug] [2025-07-01T05:36:13.909Z] OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-07-01T05:36:13.959Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-01T05:36:13.979Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-01T05:36:13.989Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-01T05:36:14.012Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-01T05:36:14.013Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-01T05:36:14.013Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-01T05:36:18.426Z] Jul 01, 2025 5:36:18 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:36:18 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-01T05:36:18.537Z] API endpoint: http:// {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://"}}
[debug] [2025-07-01T05:36:18.542Z] 127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-01T05:36:18.609Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T05:36:35.014Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T05:36:35.014Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    function isOwner(doc) {\n      return request.auth != null && request.auth.uid == doc.userId;\n    }\n    \n    function isPublic(doc) {\n      // A document is considered public if its scope is explicitly 'public'.\n      // Checking for the key's existence first makes the rule robust against older data\n      // that might be missing the 'scope' field, preventing permission errors.\n      return doc.keys().has('scope') && doc.scope == 'public';\n    }\n\n    // --- USER DATA ---\n    // Users can read their own profile.\n    // Users can only create their own profile.\n    // Users can only update their own display name and position.\n    match /users/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null && request.auth.uid == userId;\n      allow update: if request.auth != null && request.auth.uid == userId\n                      && request.resource.data.keys().hasOnly(['displayName', 'position']);\n    }\n\n    // --- PROJECTS ---\n    // Anyone authenticated can create a project. The createProject server action validates ownership.\n    // Only members can read project details.\n    // Only the owner can update the project (e.g., name, members).\n    // Deleting projects is disallowed for safety.\n    match /projects/{projectId} {\n      allow create: if request.auth != null;\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      allow delete: if false;\n\n      // Project Subcollections (Observations, Inspections, PTWs)\n      // Any member of the project can create, read, update, or delete items within that project.\n      match /{collection}/{docId} {\n         allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n\n    // --- PUBLIC & PRIVATE ROOT COLLECTIONS ---\n\n    // Observations\n    match /observations/{obsId} {\n      allow read: if isPublic(resource.data) || isOwner(resource.data);\n      allow create: if isOwner(request.resource.data);\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n\n    // Inspections\n    match /inspections/{inspId} {\n      allow read: if isPublic(resource.data) || isOwner(resource.data);\n      allow create: if isOwner(request.resource.data);\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n\n    // PTWs\n    match /ptws/{ptwId} {\n      allow read: if isPublic(resource.data) || isOwner(resource.data);\n      allow create: if isOwner(request.resource.data);\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T05:36:35.058Z] Jul 01, 2025 5:36:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:36:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T05:36:36.093Z] Jul 01, 2025 5:36:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:36:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T05:36:49.212Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T05:36:49.213Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":15,"column":25,"currentOffset":504,"endOffset":506},"description":"Invalid function name: has.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:15:25 - WARNING Invalid function name: has. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T06:43:18.080Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T06:43:18.081Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read and update their own profile.\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n    }\n\n    // Rules for project documents\n    match /projects/{projectId} {\n      // Only members can read the project document itself.\n      allow get: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      // Nobody can list all projects for security.\n      allow list: if false;\n      // Only the project owner can update the project doc (e.g., for adding members via a Cloud Function).\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      // Any authenticated user can create a project.\n      allow create: if request.auth != null;\n    }\n\n    // Rules for subcollections within a project (e.g., /projects/{id}/observations)\n    match /projects/{projectId}/{collectionId}/{docId} {\n      // Members can perform all actions on documents within a project they belong to.\n      allow read, list, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // Rules for top-level collections (observations, inspections, ptws) for public/private items\n    match /{collectionId}/{docId} {\n      // Anyone can read a public document.\n      // A logged-in user can read their own private documents.\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n\n      // A logged-in user can query for their own private items.\n      // Anyone can query for public items.\n      allow list: if (request.auth != null && request.query.get('userId') == request.auth.uid) || request.query.get('scope') == 'public';\n      \n      // A logged-in user can create/update/delete their own items.\n      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T06:43:18.152Z] Jul 01, 2025 6:43:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 6:43:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T06:43:18.315Z] Jul 01, 2025 6:43:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 6:43:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T06:43:18.998Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T06:43:19.004Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":38,"column":61,"currentOffset":1767,"endOffset":1769},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":38,"column":113,"currentOffset":1819,"endOffset":1821},"description":"Incorrect number of arguments supplied to function: get.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:38:61 - WARNING Incorrect number of arguments supplied to function: get. 
[warn] ⚠  firestore.rules:38:113 - WARNING Incorrect number of arguments supplied to function: get. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T06:59:58.046Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T06:59:58.047Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all reads and writes\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // --- User Profiles ---\n    // Users can read/update their own profile. Any auth'd user can create one.\n    match /users/{userId} {\n      allow read, update, delete: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // --- Helper Functions ---\n    function isOwner(item, uid) {\n      return item.userId == uid;\n    }\n    \n    function isPublic(item) {\n      return item.scope == 'public';\n    }\n\n    // --- Rules for Top-Level Item Collections ---\n    match /observations/{docId} {\n      allow read: if isPublic(resource.data) || (request.auth != null && isOwner(resource.data, request.auth.uid));\n      allow create: if request.auth != null && isOwner(request.resource.data, request.auth.uid);\n      allow update, delete: if request.auth != null && isOwner(resource.data, request.auth.uid);\n    }\n\n    match /inspections/{docId} {\n      allow read: if isPublic(resource.data) || (request.auth != null && isOwner(resource.data, request.auth.uid));\n      allow create: if request.auth != null && isOwner(request.resource.data, request.auth.uid);\n      allow update, delete: if request.auth != null && isOwner(resource.data, request.auth.uid);\n    }\n\n    match /ptws/{docId} {\n      allow read: if isPublic(resource.data) || (request.auth != null && isOwner(resource.data, request.auth.uid));\n      allow create: if request.auth != null && isOwner(request.resource.data, request.auth.uid);\n      allow update, delete: if request.auth != null && isOwner(resource.data, request.auth.uid);\n    }\n    \n    // --- Rules for Projects and Their Subcollections ---\n    match /projects/{projectId} {\n      // Members can read project details. Owner can update/delete. Any auth'd user can create.\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      allow create: if request.auth != null;\n\n      // Members can read/write items inside a project's subcollections.\n      match /{collectionName}/{docId} {\n        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T06:59:58.072Z] Jul 01, 2025 6:59:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 6:59:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T06:59:58.816Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T06:59:58.816Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T07:03:19.993Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T07:03:19.994Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check project membership\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n    \n    // Default deny all reads and writes\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Users can only read their own profile\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId;\n      allow write: if request.auth.uid == userId;\n    }\n    \n    // Rules for top-level collections (observations, inspections, ptws)\n    match /{collectionName}/{docId} {\n      // Allow anyone to read public documents\n      allow read: if resource.data.scope == 'public';\n      \n      // Allow authenticated users to read their own private documents\n      allow read: if request.auth != null && resource.data.scope == 'private' && request.auth.uid == resource.data.userId;\n\n      // Allow authenticated users to create documents in these collections\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      \n      // Allow users to update their own documents\n      allow update: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n    \n    // Rules for projects and their subcollections\n    match /projects/{projectId} {\n      // Allow project members to read project details\n      allow read: if request.auth != null && isProjectMember(projectId);\n      \n      // Only the owner can update project details (e.g., add members - future functionality)\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n\n      // Allow any authenticated user to create a project\n      allow create: if request.auth != null;\n      \n      // Allow project members to access items within project subcollections\n      match /{subCollection}/{itemId} {\n        allow read, write: if request.auth != null && isProjectMember(projectId);\n      }\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T07:03:20.013Z] Jul 01, 2025 7:03:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:03:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T07:03:20.302Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T07:03:20.308Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":9,"column":90,"currentOffset":276,"endOffset":278},"description":"Invalid function name: has.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:9:90 - WARNING Invalid function name: has. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T07:34:06.802Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T07:34:06.802Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // HELPER FUNCTIONS\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    // Correctly checks if the user's UID is in the project's memberUids array.\n    function isProjectMember(projectId) {\n      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // USER PROFILES\n    match /users/{userId} {\n      // Users can only read and update their own profile.\n      allow read, update: if isSignedIn() && request.auth.uid == userId;\n      // Users cannot create or delete their own user doc directly (created on sign-up).\n      allow create, delete: if false;\n    }\n\n    // PROJECTS\n    match /projects/{projectId} {\n      // Only project members can read the project document.\n      allow read: if isProjectMember(projectId);\n      // Creating projects is handled by a server action, not direct client write.\n      // Updating/deleting projects can be restricted to owners if needed in the future.\n      allow write: if false;\n    }\n\n    // PUBLIC COLLECTIONS (Observations, Inspections, PTWs)\n    match /{collectionId}/{docId} {\n      // Anyone can read a document if its scope is 'public'.\n      allow read: if resource.data.scope == 'public';\n      // Logged-in users can read their own private documents.\n      allow read: if isSignedIn() && resource.data.scope == 'private' && resource.data.userId == request.auth.uid;\n      // Allow creation for any logged-in user.\n      allow create: if isSignedIn();\n      // Only the user who created a document can update or delete it.\n      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;\n    }\n\n    // SUBCOLLECTIONS WITHIN PROJECTS\n    match /projects/{projectId}/{collectionId}/{docId} {\n       // Only project members can read, create, update, or delete items within a project.\n      allow read, write: if isProjectMember(projectId);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T07:34:06.834Z] Jul 01, 2025 7:34:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:34:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T07:34:06.900Z] Jul 01, 2025 7:34:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:34:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T07:34:07.266Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T07:34:07.271Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T07:56:43.419Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T07:56:43.419Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Default deny all reads and writes\n    match /{document=**} {\n      allow read, write: if false;\n    }\n  \n    // Allow users to read and update their own profile\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Rules for top-level collections (public & private non-project data)\n    function canReadTopLevelDoc(doc) {\n      return (doc.scope == 'public' && request.auth != null) || (request.auth.uid == doc.userId);\n    }\n    \n    match /observations/{obsId} {\n      allow read: if canReadTopLevelDoc(resource.data);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth.uid == resource.data.userId;\n    }\n    match /inspections/{inspId} {\n      allow read: if canReadTopLevelDoc(resource.data);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth.uid == resource.data.userId;\n    }\n    match /ptws/{ptwId} {\n      allow read: if canReadTopLevelDoc(resource.data);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for Projects and their sub-collections\n    match /projects/{projectId} {\n      // Allow read if the user's UID is in the memberUids array.\n      allow read: if request.auth.uid in resource.data.memberUids;\n      \n      // Allow project creation if the user is the owner of the new document.\n      allow create: if request.auth.uid == request.resource.data.ownerUid;\n      \n      // Allow updates/deletes if the user is the owner of the existing document.\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n\n      // Rules for sub-collections within a project\n      match /{subCollection}/{docId} {\n        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n  }\n}\n\n    "}]}}
[debug] [2025-07-01T07:56:43.446Z] Jul 01, 2025 7:56:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:56:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T07:56:43.834Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T07:56:43.835Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T08:04:25.419Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T08:04:25.420Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Users can read their own profile and anyone can create a user profile (on signup)\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Public items can be read by anyone\n    // Private items can only be handled by the owner\n    match /observations/{observationId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n\n    match /inspections/{inspectionId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n\n    match /ptws/{ptwId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if request.auth.uid == resource.data.userId;\n      allow delete: if false;\n    }\n\n    // Projects and their subcollections\n    match /projects/{projectId} {\n      // Allow reading project info if the user is a member\n      allow read: if request.auth.uid in resource.data.memberUids;\n      \n      // Allow creating a project if the user is authenticated and is the owner/sole member\n      allow create: if request.auth.uid == request.resource.data.ownerUid \n                    && request.auth.uid in request.resource.data.memberUids\n                    && request.resource.data.memberUids.size() == 1;\n\n      // Allow updates only by the owner (e.g., to add members in the future)\n      allow update: if request.auth.uid == resource.data.ownerUid;\n      allow delete: if false; // Deleting projects is disabled\n\n      // Rules for items within a project's subcollection\n      function isProjectMember() {\n        return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n      \n      match /observations/{observationId} {\n        allow read, write: if isProjectMember();\n      }\n      match /inspections/{inspectionId} {\n        allow read, write: if isProjectMember();\n      }\n      match /ptws/{ptwId} {\n        allow read, write: if isProjectMember();\n      }\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T08:04:25.428Z] Jul 01, 2025 8:04:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:04:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T08:04:25.720Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T08:04:25.722Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T08:19:31.426Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T08:19:31.426Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // User profile can be read by anyone, but only the user can write to their own profile.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    // Function to check if the requesting user is a member of a specific project.\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n\n    // Rules for the top-level 'projects' collection.\n    match /projects/{projectId} {\n      // Members can read project details.\n      allow read: if request.auth != null && isProjectMember(projectId);\n      \n      // Only authenticated users can create a project, and they must be the owner.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;\n      \n      // Project updates are not allowed for simplicity, but can be added here later.\n      allow update: if false; \n      \n      // Project deletion is not allowed.\n      allow delete: if false;\n\n      // Rules for all subcollections within a project (observations, inspections, ptws).\n      match /{subcollection}/{docId} {\n          // Any project member can create, read, update, or delete items in the project.\n          allow read, write: if request.auth != null && isProjectMember(projectId);\n      }\n    }\n    \n    // Rules for top-level collections (non-project items).\n    function isOwner(resource) {\n        return request.auth.uid == resource.data.userId;\n    }\n\n    match /observations/{observationId} {\n      // Allow read if the item is public, OR if the user is the owner (for private items).\n      allow read: if resource.data.scope == 'public' || (request.auth != null && isOwner(resource));\n      // Allow write only for the owner.\n      allow write: if request.auth != null && isOwner(resource);\n    }\n    \n    match /inspections/{inspectionId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && isOwner(resource));\n      allow write: if request.auth != null && isOwner(resource);\n    }\n    \n    match /ptws/{ptwId} {\n      allow read: if resource.data.scope == 'public' || (request.auth != null && isOwner(resource));\n      allow write: if request.auth != null && isOwner(resource);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T08:19:31.438Z] Jul 01, 2025 8:19:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:19:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T08:19:31.895Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T08:19:31.896Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T08:53:46.495Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T08:53:46.496Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n\n    match /projects/{projectId} {\n      allow read: if isProjectMember(projectId);\n      allow update: if request.auth.uid == resource.data.ownerUid;\n      allow create: if request.auth.uid == request.resource.data.ownerUid &&\n                       request.auth.uid in request.resource.data.memberUids;\n    }\n\n    match /{itemCollection}/{itemId} {\n      allow read: if resource.data.scope == 'public' || \n                     (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update, delete: if resource.data.userId == request.auth.uid;\n    }\n    \n    match /projects/{projectId}/{itemCollection}/{itemId} {\n       allow read: if isProjectMember(projectId);\n       allow create: if isProjectMember(projectId) && request.auth.uid == request.resource.data.userId;\n       allow update, delete: if isProjectMember(projectId) && resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T08:53:46.594Z] Jul 01, 2025 8:53:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:53:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T08:53:46.713Z] Jul 01, 2025 8:53:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:53:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T08:53:47.332Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T08:53:47.334Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T09:52:54.189Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T09:52:54.190Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can only read their own profile, and can update their own profile.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // Rules for top-level collections (private & public items)\n    match /{itemType}/{itemId} {\n      // Public items can be read by anyone.\n      // Private items can only be read by the owner.\n      // `itemType` is a wildcard for observations, inspections, ptws\n      allow read: if resource.data.scope == 'public' || \n                     (request.auth != null && request.auth.uid == resource.data.userId);\n\n      // Authenticated users can create items and must be the owner.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;\n\n      // Only the owner of an item can update or delete it.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    // Rules for Projects and their subcollections\n    match /projects/{projectId} {\n      // Members can read project details\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n\n      // Logged-in users can create projects, and must set themselves as owner & member.\n      allow create: if request.auth != null && \n                       request.auth.uid == request.resource.data.ownerUid &&\n                       request.auth.uid in request.resource.data.memberUids;\n\n      // Only the owner can update the project (e.g., add members later)\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      \n      // Only the owner can delete the project\n      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n\n      // Rules for items inside a project's subcollection\n      match /{itemType}/{itemId} {\n        // Members of the project can read all items within it.\n        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        \n        // Members of the project can create items, and must be the owner of the item.\n        allow create: if request.auth != null && \n                         (request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids) &&\n                         request.auth.uid == request.resource.data.userId;\n\n        // Only the user who created the item OR the project owner can update/delete it.\n        allow update, delete: if request.auth != null && \n                               (request.auth.uid == resource.data.userId || \n                                request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid);\n      }\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T09:52:54.283Z] Jul 01, 2025 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T09:52:54.373Z] Jul 01, 2025 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T09:52:54.656Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T09:52:54.657Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T10:57:00.352Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T10:57:00.359Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null && \n                     request.resource.data.ownerUid == request.auth.uid &&\n                     request.resource.data.memberUids == [request.auth.uid];\n      allow update: if request.auth.uid == resource.data.ownerUid; // Owner can add/remove members\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      match /{itemCollection}/{itemId} {\n        allow read: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        allow create: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        allow update, delete: if request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;\n      }\n    }\n    \n    match /{itemCollection}/{itemId} {\n        allow read: if request.auth != null && (resource.data.scope == 'public' || resource.data.userId == request.auth.uid);\n        allow create: if request.auth.uid == request.resource.data.userId;\n        allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T10:57:00.535Z] Jul 01, 2025 10:57:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 10:57:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T10:57:00.725Z] Jul 01, 2025 10:57:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 10:57:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T10:57:01.311Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T10:57:01.311Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-01T11:57:13.533Z] Jul 01, 2025 11:57:13 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
Jul 01, 2025 11:57:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
Jul 01, 2025 11:57:13 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 11:57:13 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\nJul 01, 2025 11:57:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\nJul 01, 2025 11:57:13 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-01T11:57:13.685Z] Jul 01, 2025 11:57:13 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a403035bc79a9a95811d0ba98642f476
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 11:57:13 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a403035bc79a9a95811d0ba98642f476\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-01T11:57:18.369Z] Jul 01, 2025 11:57:18 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 11:57:18 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-01T12:52:46.418Z] Jul 01, 2025 12:51:05 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 12:51:05 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-07-01T12:57:21.242Z] ----------------------------------------------------------------------
[debug] [2025-07-01T12:57:21.251Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-01T12:57:21.252Z] CLI Version:   14.7.0
[debug] [2025-07-01T12:57:21.252Z] Platform:      linux
[debug] [2025-07-01T12:57:21.252Z] Node Version:  v20.19.0
[debug] [2025-07-01T12:57:21.253Z] Time:          Tue Jul 01 2025 12:57:21 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-01T12:57:21.253Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-01T12:57:22.904Z] openjdk version "21.0.5" 2024-10-15
OpenJDK Runtime Environment (build 21.0.5+1-nixos)

[debug] [2025-07-01T12:57:22.905Z] OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-07-01T12:57:22.945Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-01T12:57:22.968Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-01T12:57:22.979Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-01T12:57:23.012Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-01T12:57:23.013Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-01T12:57:23.013Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-01T12:57:27.301Z] Jul 01, 2025 12:57:27 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 12:57:27 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-01T12:57:27.383Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-01T12:57:27.571Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T12:57:44.643Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T12:57:44.644Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null && \n                     request.resource.data.ownerUid == request.auth.uid &&\n                     request.resource.data.memberUids == [request.auth.uid];\n      allow update: if request.auth.uid == resource.data.ownerUid; // Owner can add/remove members\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      match /{itemCollection}/{itemId} {\n        allow read: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        allow create: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        allow update, delete: if request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;\n      }\n    }\n    \n    match /{itemCollection}/{itemId} {\n        allow read: if request.auth != null && (resource.data.scope == 'public' || resource.data.userId == request.auth.uid);\n        allow create: if request.auth.uid == request.resource.data.userId;\n        allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T12:57:44.705Z] Jul 01, 2025 12:57:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 12:57:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T12:57:47.247Z] Jul 01, 2025 12:57:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 12:57:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T12:58:00.119Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T12:58:00.119Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-01T17:25:12.189Z] ----------------------------------------------------------------------
[debug] [2025-07-01T17:25:12.198Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-01T17:25:12.199Z] CLI Version:   14.7.0
[debug] [2025-07-01T17:25:12.201Z] Platform:      linux
[debug] [2025-07-01T17:25:12.202Z] Node Version:  v20.19.0
[debug] [2025-07-01T17:25:12.202Z] Time:          Tue Jul 01 2025 17:25:12 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-01T17:25:12.202Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-01T17:25:12.211Z] >>> [apiv2][query] GET https://firebase-public.firebaseio.com/cli.json [none]
[debug] [2025-07-01T17:25:13.895Z] <<< [apiv2][status] GET https://firebase-public.firebaseio.com/cli.json 200
[debug] [2025-07-01T17:25:13.901Z] <<< [apiv2][body] GET https://firebase-public.firebaseio.com/cli.json {"cloudBuildErrorAfter":1594252800000,"cloudBuildWarnAfter":1590019200000,"defaultNode10After":1594252800000,"minVersion":"3.0.5","node8DeploysDisabledAfter":1613390400000,"node8RuntimeDisabledAfter":1615809600000,"node8WarnAfter":1600128000000}
[debug] [2025-07-01T17:25:14.347Z] openjdk version "21.0.5" 2024-10-15

[debug] [2025-07-01T17:25:14.349Z] OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-07-01T17:25:14.388Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-01T17:25:14.406Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-01T17:25:14.413Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-01T17:25:14.432Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-01T17:25:14.433Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-01T17:25:14.433Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-01T17:25:18.917Z] Jul 01, 2025 5:25:18 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:25:18 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-01T17:25:19.018Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST= {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST="}}
[debug] [2025-07-01T17:25:19.020Z] 127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
 {"metadata":{"emulator":{"name":"firestore"},"message":"127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\n"}}
[debug] [2025-07-01T17:25:19.021Z] Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"Dev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-01T17:25:19.208Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T17:25:37.532Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T17:25:37.533Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null && \n                     request.resource.data.ownerUid == request.auth.uid &&\n                     request.resource.data.memberUids == [request.auth.uid];\n      allow update: if request.auth.uid == resource.data.ownerUid; // Owner can add/remove members\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      match /{itemCollection}/{itemId} {\n        allow read: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        allow create: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n        allow update, delete: if request.auth.uid == resource.data.userId || request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;\n      }\n    }\n    \n    match /{itemCollection}/{itemId} {\n        allow read: if request.auth != null && (resource.data.scope == 'public' || resource.data.userId == request.auth.uid);\n        allow create: if request.auth.uid == request.resource.data.userId;\n        allow update, delete: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T17:25:37.628Z] Jul 01, 2025 5:25:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:25:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T17:25:40.455Z] Jul 01, 2025 5:25:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:25:40 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T17:25:52.444Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T17:25:52.445Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T17:40:54.340Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T17:40:54.340Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // USER PROFILES\n    match /users/{userId} {\n      // Anyone authenticated can read user profiles (needed for member lists).\n      allow read: if request.auth != null;\n      // Only the user themselves can update their profile.\n      allow write: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    // PUBLIC & PRIVATE ITEMS (in root collections)\n    match /observations/{obsId} {\n      // Anyone can read public observations.\n      allow get: if resource.data.scope == 'public';\n      // Authenticated users can query the public feed.\n      allow list: if request.auth != null;\n      \n      // Authenticated users can create their own private items.\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && request.resource.data.scope == 'private';\n      \n      // Users can read/update their OWN private items.\n      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n    \n    match /inspections/{inspId} {\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && request.resource.data.scope == 'private';\n      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n\n    match /ptws/{ptwId} {\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && request.resource.data.scope == 'private';\n      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n\n    // PROJECTS & THEIR SUB-COLLECTIONS\n    match /projects/{projectId} {\n      // Authenticated users can query the projects collection.\n      // The application logic (server actions, onSnapshot query) ensures they only see projects they are members of.\n      allow list: if request.auth != null;\n\n      // Only members can read a project's details.\n      allow get: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      \n      // Creating projects is handled by a server action, but we allow it here for the action to succeed.\n      // Business logic prevents unauthorized creation.\n      allow create: if request.auth != null;\n      \n      // Only the owner can update project metadata (e.g., add/remove members).\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      \n      // Only the owner can delete the project.\n      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      \n      // Rules for sub-collections (observations, inspections, ptws) within a project.\n      match /{collection}/{docId} {\n        // Only project members can read or write documents in the project's sub-collections.\n        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T17:40:54.360Z] Jul 01, 2025 5:40:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:40:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T17:40:54.678Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T17:40:54.679Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T17:51:55.228Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T17:51:55.228Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can only update their own profile, but can read others.\n    match /users/{userId} {\n      allow read: if request.auth.uid != null;\n      allow write: if request.auth.uid == userId;\n    }\n    \n    // Project metadata can be read by members, but only written by the owner.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth.uid == request.resource.data.ownerUid;\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n    \n    // Unified rule for Observations\n    match /observations/{observationId} {\n      // READ: Public is open. Private is self-only. Project is for members.\n      allow read: if resource.data.scope == 'public'\n                  || (resource.data.scope == 'private' && resource.data.userId == request.auth.uid)\n                  || (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);\n                  \n      // WRITE: Any authenticated user can create. Only the author can update/delete.\n      allow create: if request.auth.uid != null;\n      allow update, delete: if resource.data.userId == request.auth.uid;\n    }\n\n    // Unified rule for Inspections\n    match /inspections/{inspectionId} {\n      // READ: Private is self-only. Project is for members.\n      allow read: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid)\n                  || (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);\n                  \n      // WRITE: Any authenticated user can create. Only the author can update/delete.\n      allow create: if request.auth.uid != null;\n      allow update, delete: if resource.data.userId == request.auth.uid;\n    }\n    \n    // Unified rule for PTWs\n    match /ptws/{ptwId} {\n       // READ: Private is self-only. Project is for members.\n       allow read: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid)\n                  || (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);\n                  \n      // WRITE: Creator can write. For updates (approvals), any project member can write.\n      allow create: if request.auth.uid != null;\n      allow update, delete: if request.auth.uid != null && (get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids.hasAny([request.auth.uid]) || resource.data.userId == request.auth.uid);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T17:51:55.270Z] Jul 01, 2025 5:51:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 5:51:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T17:51:55.738Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T17:51:55.741Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T18:43:02.081Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T18:43:02.082Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n    \n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n    \n    match /projects/{projectId} {\n      allow read: if request.auth != null && isProjectMember(projectId);\n      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;\n      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n    }\n\n    match /{collection}/{itemId} \n      where collection in ['observations', 'inspections', 'ptws'] {\n\n      allow read: if request.auth != null && (\n                    resource.data.scope == 'public' ||\n                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId))\n                  );\n\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && (\n                      request.resource.data.scope == 'private' || \n                      (request.resource.data.scope == 'project' && isProjectMember(request.resource.data.projectId)) ||\n                      (request.resource.data.scope == 'public' && request.resource.data.originalId != null)\n                    );\n                    \n      // Owner can update. Project members can update project items (e.g. status or likes).\n      allow update: if request.auth != null && (\n                      resource.data.userId == request.auth.uid ||\n                      (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)) ||\n                      (resource.data.scope == 'public') // Any authenticated user can like a public post\n                    );\n      \n      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T18:43:02.134Z] Jul 01, 2025 6:43:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 6:43:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T18:43:02.269Z] Jul 01, 2025 6:43:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 6:43:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T18:43:03.001Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T18:43:03.003Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":21,"column":11,"currentOffset":714,"endOffset":714},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":22,"column":7,"currentOffset":744,"endOffset":748},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":22,"column":7,"currentOffset":744,"endOffset":748},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":46,"column":1,"currentOffset":2117,"endOffset":2117},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:21:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:22:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:22:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:46:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T19:32:34.617Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T19:32:34.618Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can read any profile, but only update their own.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow create, update: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // Project metadata can be read by members, but only modified by the owner.\n    match /projects/{projectId} {\n      function isMember() {\n        return request.auth.uid in resource.data.memberUids;\n      }\n      function isOwner() {\n        return request.auth.uid == resource.data.ownerUid;\n      }\n      \n      allow read: if request.auth != null && isMember();\n      allow create: if request.auth != null; // Server-side actions handle validation\n      allow update, delete: if request.auth != null && isOwner();\n\n      // Rules for sub-collections within a project (observations, inspections, ptws)\n      // Only project members can access items within the project.\n      match /{itemCollection}/{itemId} {\n        allow read, create, update, delete: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n\n    // Rules for root collections (Private and Public items ONLY)\n    match /observations/{observationId} {\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope != 'project';\n      allow read: if resource.data.scope == 'public' || (request.auth.uid == resource.data.userId && resource.data.scope == 'private');\n      allow update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n\n    match /inspections/{inspectionId} {\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope != 'project';\n      allow read: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n      allow update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n\n    match /ptws/{ptwId} {\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope != 'project';\n      allow read: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n      allow update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T19:32:34.733Z] Jul 01, 2025 7:32:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:32:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T19:32:34.890Z] Jul 01, 2025 7:32:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:32:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T19:32:36.535Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T19:32:36.536Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T19:33:51.584Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T19:33:51.587Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can read any profile, but only update their own.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow create, update: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // Project metadata can be read by members, but only modified by the owner.\n    match /projects/{projectId} {\n      function isMember() {\n        return request.auth.uid in resource.data.memberUids;\n      }\n      function isOwner() {\n        return request.auth.uid == resource.data.ownerUid;\n      }\n      \n      allow read: if request.auth != null && isMember();\n      allow create: if request.auth != null; // Server-side actions handle validation\n      allow update, delete: if request.auth != null && isOwner();\n\n      // Rules for sub-collections within a project (observations, inspections, ptws)\n      // Only project members can access items within the project.\n      match /{itemCollection}/{itemId} {\n        allow read, create, update, delete: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n\n    // Rules for root collections (Private and Public items ONLY)\n    match /observations/{observationId} {\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope != 'project';\n      allow read: if resource.data.scope == 'public' || (request.auth.uid == resource.data.userId && resource.data.scope == 'private');\n      allow update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n\n    match /inspections/{inspectionId} {\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope != 'project';\n      allow read: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n      allow update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n\n    match /ptws/{ptwId} {\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope != 'project';\n      allow read: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n      allow update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T19:33:51.607Z] Jul 01, 2025 7:33:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:33:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T19:33:52.057Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T19:33:52.058Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T19:37:24.315Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T19:37:24.320Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // User can only update their own profile, but anyone can read profiles (for project member lists)\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Projects Collection Rules\n    match /projects/{projectId} {\n      // Allow a user to get their own project's metadata if they are a member.\n      allow get: if request.auth.uid in resource.data.memberUids;\n      \n      // Allow any authenticated user to LIST projects. \n      // This is required for the pre-creation check to see if a user is already in a project.\n      // The queries in the app itself will filter results to only what the user should see.\n      allow list: if request.auth != null;\n\n      // Only the project owner can update (e.g., add members) or delete the project.\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n\n      // An authenticated user can create a project, but they must be the owner of the new document.\n      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;\n\n      // Rules for subcollections within a project (observations, inspections, ptws)\n      match /{subcollection}/{itemId} {\n        // Only members of the project can read or write items inside it.\n        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n    \n    // Root collections for Private and Public items\n    function isOwner(item) {\n      return request.auth.uid == item.userId;\n    }\n    \n    match /observations/{observationId} {\n      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data));\n      allow create: if isOwner(request.resource.data) && request.resource.data.scope == 'private';\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n    \n    match /inspections/{inspectionId} {\n      allow read: if resource.data.scope == 'private' && isOwner(resource.data);\n      allow create: if isOwner(request.resource.data) && request.resource.data.scope == 'private';\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n    \n    match /ptws/{ptwId} {\n      allow read: if resource.data.scope == 'private' && isOwner(resource.data);\n      allow create: if isOwner(request.resource.data) && request.resource.data.scope == 'private';\n      allow update: if isOwner(resource.data);\n      allow delete: if isOwner(resource.data);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T19:37:24.332Z] Jul 01, 2025 7:37:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:37:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T19:37:24.482Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T19:37:24.484Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T19:47:58.305Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T19:47:58.306Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Users can read any profile (to see member names) but only write to their own.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // --- Project-related Rules ---\n    match /projects/{projectId} {\n      // Allow any authenticated user to LIST projects. \n      // This is CRITICAL for the \"is user in another project?\" check before creation.\n      // We secure individual project access with the 'get' rule below.\n      allow list: if request.auth != null;\n      \n      // Only project members can GET a specific project document.\n      allow get: if request.auth != null && resource.data.memberUids.hasAny([request.auth.uid]);\n\n      // Any authenticated user can attempt to create a project.\n      // The server-side action is responsible for blocking creation if they are already in a project.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;\n\n      // Only the project owner can update (e.g., add/remove members) or delete the project.\n      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n\n      // --- Project Sub-collection Rules ---\n      // These rules apply to observations, inspections, and ptws within a project.\n      function isProjectMember() {\n        return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n      \n      match /observations/{obsId} {\n        allow read, write: if request.auth != null && isProjectMember();\n      }\n      \n      match /inspections/{inspId} {\n        allow read, write: if request.auth != null && isProjectMember();\n      }\n      \n      match /ptws/{ptwId} {\n        allow read, write: if request.auth != null && isProjectMember();\n      }\n    }\n\n    // --- Root Collections (Private and Public items) ---\n    // These rules are separate from projects.\n    \n    match /observations/{obsId} {\n        // Anyone can read a public observation.\n        // A user can read/write their own private observations.\n        allow read: if resource.data.scope == 'public' || \n                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);\n        allow write: if request.auth.uid == request.resource.data.userId;\n    }\n    \n    match /inspections/{inspId} {\n        // Inspections are always private (not shared to public feed)\n        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    match /ptws/{ptwId} {\n        // PTWs are always private (not shared to public feed)\n        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T19:47:58.332Z] Jul 01, 2025 7:47:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 7:47:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T19:47:58.611Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T19:47:58.612Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T20:02:30.269Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T20:02:30.269Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check project membership\n    function isProjectMember(projectId) {\n      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n\n    // Rules for User Profiles\n    match /users/{userId} {\n      // Anyone can view a user's profile (to display names, etc.)\n      allow get: if request.auth != null;\n      // A user can only create and update their own profile\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Rules for Projects\n    match /projects/{projectId} {\n      // Allow reading project details only if the user is a member\n      allow get: if request.auth != null && isProjectMember(projectId);\n      // Allow any authenticated user to list projects (for searching)\n      // This is safe as long as the project document itself doesn't contain sensitive data.\n      allow list: if request.auth != null;\n      // Allow creating a project if the user is authenticated and is listed as the first member\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.memberUids[0];\n      // Allow updating a project (e.g., adding/removing members) only if the user is the owner\n      allow update: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n      // Allow deleting a project only if the user is the owner\n      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n\n      // Rules for project-specific sub-collections\n      match /{collection}/{docId} {\n        // Allow full access to project documents if the user is a project member\n        allow read, write: if request.auth != null && isProjectMember(projectId);\n      }\n    }\n    \n    // Rules for root collections (Private and Public items)\n    match /{collection}/{docId} {\n      // Allow read access if the item is public, OR if it's private and belongs to the user\n      allow get: if (resource.data.scope == 'public') || (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);\n      // Allow listing public documents for the public feed\n      allow list: if request.query.limit <= 10 && request.query.offset == null && request.resource.data.scope == 'public';\n\n      // Allow creating a document if it's for the logged-in user\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      // Allow updating/deleting if the document belongs to the user\n      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T20:02:30.312Z] Jul 01, 2025 8:02:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:02:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T20:02:31.049Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T20:02:31.051Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":8,"column":90,"currentOffset":273,"endOffset":275},"description":"Invalid function name: has.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:8:90 - WARNING Invalid function name: has. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T20:26:39.699Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T20:26:39.700Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all access\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // User profiles are readable by any authenticated user, but only writable by the owner\n    match /users/{userId} {\n      allow get: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Helper function to check project membership\n    function isProjectMember(projectId) {\n      // Use exists() for robustness, then check membership.\n      // This prevents errors if a project document is malformed.\n      return exists(/databases/$(database)/documents/projects/$(projectId)) &&\n             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n\n    // Rules for the 'projects' collection itself\n    match /projects/{projectId} {\n      // Allow a user to query the projects collection.\n      // The query in the app MUST be constrained (e.g., using 'array-contains')\n      // to ensure it only returns documents the user is allowed to 'get'.\n      allow list: if request.auth != null;\n\n      // Allow a user to read a specific project document IF they are a member.\n      allow get: if isProjectMember(projectId);\n\n      // Only the owner can create or delete the project document.\n      allow create: if request.resource.data.ownerUid == request.auth.uid;\n      allow delete: if resource.data.ownerUid == request.auth.uid;\n\n      // Only the owner can update the project (e.g., add/remove members).\n      allow update: if resource.data.ownerUid == request.auth.uid;\n    }\n\n    // Rules for sub-collections within a project\n    match /projects/{projectId}/{collection}/{itemId} {\n      // Any member of the project can read or write items within that project.\n      allow read, write: if isProjectMember(projectId);\n    }\n    \n    // Rules for root collections (private and public items)\n    match /observations/{obsId} {\n      allow get: if resource.data.scope == 'public' || \n                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);\n      allow create: if request.resource.data.userId == request.auth.uid;\n      // Allow the owner of a private doc to update it, \n      // or allow anyone to update social/sharing fields on any observation.\n      allow update: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'isSharedPublicly', 'viewCount']));\n    }\n\n    match /inspections/{inspId} {\n      // Allow if private and owner\n      allow read, write: if resource.data.scope == 'private' && resource.data.userId == request.auth.uid;\n    }\n\n    match /ptws/{ptwId} {\n      // Allow if private and owner\n      allow read, write: if resource.data.scope == 'private' && resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T20:26:39.792Z] Jul 01, 2025 8:26:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:26:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T20:26:40.028Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T20:26:40.029Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T20:57:51.251Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T20:57:51.252Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isSignedIn() {\n      return request.auth != null;\n    }\n    function isUser(userId) {\n      return isSignedIn() && request.auth.uid == userId;\n    }\n    function isProjectMember(projectId) {\n      // Use exists() for robustness against missing documents or fields\n      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&\n             get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n    }\n    \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Allow users to read other users' profiles (for project member lists)\n    // but only update their own.\n    match /users/{userId} {\n      allow read: if isSignedIn();\n      allow update: if isUser(userId);\n    }\n    \n    // Project-related rules\n    match /projects/{projectId} {\n      // Allow members to read project details.\n      allow get: if isProjectMember(projectId);\n      \n      // Allow authenticated users to query the project list\n      // This is crucial for creating, finding, and joining projects.\n      allow list: if isSignedIn();\n\n      // Allow authenticated users to create a project\n      allow create: if isSignedIn();\n      \n      // Allow owners to update (e.g., add members) or delete the project.\n      allow update, delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;\n      \n      // Rules for sub-collections within a project\n      match /{collection}/{docId} {\n        allow read, write: if isProjectMember(projectId);\n      }\n    }\n    \n    // Rules for root-level \"private\" and \"public\" items\n    match /observations/{docId} {\n      // Public observations can be read by anyone\n      allow get: if resource.data.scope == 'public';\n      \n      // We need list for the public feed query\n      allow list: if isSignedIn();\n      \n      // Users can read/write their own private observations\n      allow read, write: if resource.data.scope == 'private' && isUser(resource.data.userId);\n      \n      // Allow any signed-in user to update specific fields for public posts\n      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'isSharedPublicly', 'viewCount']);\n      \n      // Allow creation of private or public observations\n      allow create: if isSignedIn();\n    }\n    \n    // Generic rules for other private collections (Inspections, PTWs)\n    match /{collection}/{docId} {\n      allow read, write: if (collection == 'inspections' || collection == 'ptws') && resource.data.scope == 'private' && isUser(resource.data.userId);\n      allow create: if (collection == 'inspections' || collection == 'ptws') && isSignedIn();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T20:57:51.277Z] Jul 01, 2025 8:57:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:57:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T20:57:51.317Z] Jul 01, 2025 8:57:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 8:57:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-01T20:57:51.613Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T20:57:51.616Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T21:01:44.508Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T21:01:44.509Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Allow any authenticated user to get another user's profile.\n    // This is necessary to display member names/photos in a project.\n    // Writing is still restricted to the user themselves.\n    match /users/{userId} {\n      allow get: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Rules for the 'projects' collection itself\n    match /projects/{projectId} {\n      // Allow a user to GET a specific project document if they are a member.\n      allow get: if request.auth != null && request.auth.uid in resource.data.memberUids;\n\n      // Allow authenticated users to LIST projects. The client-side query MUST\n      // enforce security by using `where('memberUids', 'array-contains', request.auth.uid)`.\n      // Firestore's rules will then verify that each document returned also passes the `get` rule.\n      allow list: if request.auth != null;\n\n      // Allow any authenticated user to create a project.\n      allow create: if request.auth != null;\n\n      // Only the project owner can update or delete the project document itself.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n\n      // Rules for sub-collections within a project (observations, inspections, ptws)\n      match /{subCollection}/{docId} {\n        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n\n    // Rules for root-level collections (private and public items)\n\n    match /observations/{obsId} {\n       allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);\n       allow create: if request.auth.uid == request.resource.data.userId;\n       // Allow updates on private docs by owner, and on public docs (for likes/views) by any authenticated user.\n       allow update: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) || \n                      (resource.data.scope == 'public' && request.auth != null);\n       allow delete: if resource.data.userId == request.auth.uid;\n    }\n    \n    match /inspections/{inspId} {\n       // Inspections are always private, only owner can access\n       allow read, write, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n       allow create: if request.auth.uid == request.resource.data.userId;\n    }\n\n    match /ptws/{ptwId} {\n       // PTWs are always private, only owner can access\n       allow read, write, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n       allow create: if request.auth.uid == request.resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T21:01:44.524Z] Jul 01, 2025 9:01:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 9:01:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T21:01:44.705Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T21:01:44.708Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T21:07:28.027Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T21:07:28.027Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // WARNING: These rules are intentionally permissive for debugging purposes.\n    // Any authenticated user can read and write ANY data.\n    // This is NOT secure for a production environment.\n    \n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T21:07:28.042Z] Jul 01, 2025 9:07:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 9:07:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T21:07:28.100Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T21:07:28.100Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T21:14:47.517Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T21:14:47.518Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // WARNING: These rules are completely open for debugging purposes.\n    // They allow anyone to read and write to your entire database.\n    // Re-secure these rules once the application logic is confirmed to be working.\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T21:14:47.542Z] Jul 01, 2025 9:14:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 9:14:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T21:14:47.613Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T21:14:47.623Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-01T21:37:46.019Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-01T21:37:46.019Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check project membership\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n    \n    // Users can read any profile, but only write to their own.\n    // This is needed to display member names/avatars in projects.\n    match /users/{userId} {\n      allow get, list: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Project documents\n    match /projects/{projectId} {\n      // Allow read/list if user is a member. This is key for fetching project lists.\n      allow get, list: if request.auth.uid in resource.data.memberUids;\n      \n      // Allow creation by any authenticated user.\n      allow create: if request.auth != null;\n      \n      // Allow update (like adding/removing members) only by existing members.\n      allow update: if isProjectMember(projectId);\n      \n      // Allow deletion only by the owner.\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      // Sub-collections within a project (observations, inspections, ptws)\n      match /{itemCollection}/{itemId} {\n        // Allow full access to project members for all items within their project.\n        allow read, write, delete: if isProjectMember(projectId);\n      }\n    }\n\n    // Root collections for \"private\" and \"public\" scope items\n    match /{itemCollection}/{itemId} {\n      // Allow read/write for \"private\" items only by the owner.\n      allow get, update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n      \n      // Allow any authenticated user to create their own private documents.\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope == 'private';\n      \n      // Allow any user (even unauthenticated) to read documents that are explicitly public.\n      allow get, list: if resource.data.scope == 'public';\n\n      // Allow authenticated users to update public documents (for likes, views, etc.)\n      allow update: if request.auth != null && resource.data.scope == 'public';\n      \n      // Allow creation of public documents (e.g., sharing) by any authenticated user.\n      allow create: if request.auth != null && request.resource.data.scope == 'public';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-01T21:37:46.054Z] Jul 01, 2025 9:37:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 01, 2025 9:37:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-01T21:37:46.237Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-01T21:37:46.240Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-02T05:18:26.220Z] ----------------------------------------------------------------------
[debug] [2025-07-02T05:18:26.227Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-02T05:18:26.228Z] CLI Version:   14.7.0
[debug] [2025-07-02T05:18:26.228Z] Platform:      linux
[debug] [2025-07-02T05:18:26.228Z] Node Version:  v20.19.0
[debug] [2025-07-02T05:18:26.228Z] Time:          Wed Jul 02 2025 05:18:26 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-02T05:18:26.228Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-02T05:18:27.373Z] openjdk version "21.0.5" 2024-10-15
OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-07-02T05:18:27.405Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-02T05:18:27.423Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-02T05:18:27.432Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-02T05:18:27.446Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-02T05:18:27.447Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-02T05:18:27.447Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-02T05:18:30.393Z] Jul 02, 2025 5:18:30 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:18:30 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-02T05:18:30.466Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-02T05:18:30.536Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T05:18:49.711Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T05:18:49.711Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check project membership\n    function isProjectMember(projectId) {\n      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n    }\n    \n    // Users can read any profile, but only write to their own.\n    // This is needed to display member names/avatars in projects.\n    match /users/{userId} {\n      allow get, list: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Project documents\n    match /projects/{projectId} {\n      // Allow read/list if user is a member. This is key for fetching project lists.\n      allow get, list: if request.auth.uid in resource.data.memberUids;\n      \n      // Allow creation by any authenticated user.\n      allow create: if request.auth != null;\n      \n      // Allow update (like adding/removing members) only by existing members.\n      allow update: if isProjectMember(projectId);\n      \n      // Allow deletion only by the owner.\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      // Sub-collections within a project (observations, inspections, ptws)\n      match /{itemCollection}/{itemId} {\n        // Allow full access to project members for all items within their project.\n        allow read, write, delete: if isProjectMember(projectId);\n      }\n    }\n\n    // Root collections for \"private\" and \"public\" scope items\n    match /{itemCollection}/{itemId} {\n      // Allow read/write for \"private\" items only by the owner.\n      allow get, update, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';\n      \n      // Allow any authenticated user to create their own private documents.\n      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.scope == 'private';\n      \n      // Allow any user (even unauthenticated) to read documents that are explicitly public.\n      allow get, list: if resource.data.scope == 'public';\n\n      // Allow authenticated users to update public documents (for likes, views, etc.)\n      allow update: if request.auth != null && resource.data.scope == 'public';\n      \n      // Allow creation of public documents (e.g., sharing) by any authenticated user.\n      allow create: if request.auth != null && request.resource.data.scope == 'public';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T05:18:49.739Z] Jul 02, 2025 5:18:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:18:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T05:18:50.431Z] Jul 02, 2025 5:18:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:18:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T05:18:52.914Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T05:18:52.916Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T05:23:45.651Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T05:23:45.651Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Helper function to check if a user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Users: Allow any authenticated user to read profiles, but only the owner can write.\n    match /users/{userId} {\n      allow read: if isAuthenticated();\n      allow write: if isAuthenticated() && request.auth.uid == userId;\n    }\n\n    // Projects:\n    // list: Allow any authenticated user to perform the query for their projects.\n    // read: Allow if the user's UID is in the project's member list.\n    // write: Allow any authenticated user to create/update (for joining/leaving).\n    // delete: Only the owner can delete.\n    match /projects/{projectId} {\n      // The client-side query contains the security clause (where('memberUids', 'array-contains', uid))\n      // so we just need to ensure the user is logged in to run a query.\n      // Firestore then checks the 'read' rule for each document returned.\n      allow list: if isAuthenticated();\n\n      // This is the key fix: Use resource.data directly instead of a self-referential get()\n      allow read: if isAuthenticated() && request.auth.uid in resource.data.memberUids;\n      \n      // Allow create/update for any authenticated user. Logic for joining/creating is in server actions.\n      allow write: if isAuthenticated(); \n      \n      // Only the project owner can delete the project document.\n      allow delete: if isAuthenticated() && resource.data.ownerUid == request.auth.uid;\n    }\n\n    // Project Sub-collections (Observations, Inspections, PTWs)\n    match /projects/{projectId}/{collection}/{docId} {\n      // Use the parent project's data to verify membership.\n      // The `get()` here is efficient as it only reads the parent document once per sub-collection access.\n      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.includes(request.auth.uid);\n    }\n\n    // Root-level collections for private/public items.\n    match /observations/{docId} {\n      // This rule applies to the root 'observations' collection.\n      \n      // PUBLIC: Anyone can read. Authenticated users can update (for likes, etc.).\n      allow read: if resource.data.scope == 'public';\n      allow update: if isAuthenticated() && resource.data.scope == 'public';\n\n      // PRIVATE: Only the user who created the document can read or write it.\n      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid && resource.data.scope == 'private';\n    }\n     match /inspections/{docId} {\n      // PRIVATE: Only the user who created the document can read or write it.\n      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid && resource.data.scope == 'private';\n    }\n     match /ptws/{docId} {\n      // PRIVATE: Only the user who created the document can read or write it.\n      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid && resource.data.scope == 'private';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T05:23:45.671Z] Jul 02, 2025 5:23:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:23:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T05:23:45.930Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T05:23:45.930Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":42,"column":126,"currentOffset":2006,"endOffset":2013},"description":"Invalid function name: includes.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:42:126 - WARNING Invalid function name: includes. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T05:42:54.996Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T05:42:54.997Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users: Allow authenticated reads for profiles, but only self-updates.\n    match /users/{userId} {\n      allow get: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n      // Disallow listing all users for security.\n      allow list, create, delete: if false;\n    }\n\n    // Projects: Secure access based on membership.\n    match /projects/{projectId} {\n      // Any authenticated user can create a project.\n      allow create: if request.auth != null;\n      \n      // Allow reads (get/list) and updates only if the user is a member.\n      // This is the key rule that allows queries like `where('memberUids', 'array-contains', ...)`\n      allow read, update: if request.auth.uid in resource.data.memberUids;\n      \n      // Allow deletion only by the project owner.\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      // Subcollections within a project (observations, inspections, ptws).\n      // Access is granted if the user is a member of the parent project.\n      match /{collection}/{docId} {\n        allow read, write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n    }\n\n    // Root \"observations\" collection for public and private scopes.\n    match /observations/{obsId} {\n      // READ: Allow if the observation is public, OR if it's private and owned by the user.\n      // This single rule covers both `get` and `list` operations correctly.\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n\n      // CREATE: Allow if the new observation is correctly owned by the user.\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n\n      // UPDATE: Allow owner to update their private/public observation.\n      // Also allow any authenticated user to update like/view counts on public posts.\n      allow update: if request.auth != null && (\n        (request.auth.uid == resource.data.userId) ||\n        (resource.data.scope == 'public' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'viewCount', 'commentCount']))\n      );\n\n      // DELETE: Disallow for data integrity.\n      allow delete: if false;\n    }\n\n    // Root \"inspections\" and \"ptws\" collections (always private).\n    match /{itemType in ['inspections', 'ptws']}/{docId} {\n      // Simple ownership check for all operations.\n      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n      // Disallow listing for security.\n      allow list, delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T05:42:55.018Z] Jul 02, 2025 5:42:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:42:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T05:42:55.275Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T05:42:55.278Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":54,"column":11,"currentOffset":2486,"endOffset":2486},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":54,"column":13,"currentOffset":2488,"endOffset":2495},"description":"mismatched input 'itemType' expecting '}'","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":54,"column":22,"currentOffset":2497,"endOffset":2498},"description":"Unexpected 'in'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":54,"column":49,"currentOffset":2524,"endOffset":2524},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":56,"column":7,"currentOffset":2593,"endOffset":2597},"description":"mismatched input 'allow' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":60,"column":3,"currentOffset":2765,"endOffset":2765},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:54:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:54:13 - ERROR mismatched input 'itemType' expecting '}' 
[warn] ⚠  firestore.rules:54:22 - ERROR Unexpected 'in'. 
[warn] ⚠  firestore.rules:54:49 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:56:7 - ERROR mismatched input 'allow' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:60:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T08:41:51.422Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T08:41:51.422Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read any profile, but only update their own.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n    }\n\n    // Rules for the projects collection\n    match /projects/{projectId} {\n      // Allow a user to read a project document if their UID is in the memberUids array.\n      // This rule correctly allows both single 'get' requests and 'list' queries\n      // as long as the query includes `where('memberUids', 'array-contains', request.auth.uid)`.\n      allow read: if request.auth.uid in resource.data.memberUids;\n\n      // Allow a user to create a project if they are authenticated and are setting themselves as the owner.\n      allow create: if request.auth.uid == request.resource.data.ownerUid;\n      \n      // Allow the project owner to update (e.g., add/remove members) or delete the project.\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n\n      // Rules for subcollections within a project (observations, inspections, ptws)\n      match /{itemCollection}/{itemId} {\n        // Any member of the project can read, create, or update items within it.\n        allow read, write: if get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n    }\n\n    // Rules for top-level (private or public) items\n    match /{itemCollection}/{itemId}\n      where itemCollection in ['observations', 'inspections', 'ptws'] {\n      \n      // Anyone can read a public item. Only the owner can read a private item.\n      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n      \n      // An authenticated user can create an item if they are the owner of the new item.\n      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;\n      \n      // The owner of an item can update it. For public items, anyone can update like/view counts.\n      allow update: if request.auth != null && (\n        request.auth.uid == resource.data.userId || \n        (resource.data.scope == 'public' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'viewCount']))\n      );\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T08:41:51.480Z] Jul 02, 2025 8:41:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 8:41:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T08:41:51.570Z] Jul 02, 2025 8:41:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 8:41:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T08:41:51.854Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T08:41:51.855Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":34,"column":11,"currentOffset":1476,"endOffset":1476},"description":"Missing 'match' keyword before path.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1509,"endOffset":1513},"description":"Unexpected 'where'.","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":35,"column":7,"currentOffset":1509,"endOffset":1513},"description":"mismatched input 'where' expecting {'{', '/', PATH_SEGMENT}","severity":"ERROR"},{"sourcePosition":{"fileName":"security.rules","line":50,"column":1,"currentOffset":2353,"endOffset":2353},"description":"Unexpected '}'.","severity":"ERROR"}]}
[warn] ⚠  firestore.rules:34:11 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:35:7 - ERROR Unexpected 'where'. 
[warn] ⚠  firestore.rules:35:7 - ERROR mismatched input 'where' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:50:1 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T08:51:04.583Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T08:51:04.583Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users: Anyone authenticated can read profiles. You can only write your own.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n    \n    // Projects Collection\n    match /projects/{projectId} {\n      // READ (get, list): Allowed ONLY if the authenticated user's ID is in the project's member list.\n      // This is the key fix. Firestore ensures that any `list` query from the client MUST be\n      // constructed in a way that it only requests documents that would pass this rule.\n      // The client query `where('memberUids', 'array-contains', user.uid)` is compatible with this.\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      \n      // CREATE: Allowed if the user is logged in. The server action handles adding the creator as owner/member.\n      allow create: if request.auth != null;\n      \n      // UPDATE: Allowed for members (e.g., adding another member).\n      allow update: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      \n      // DELETE: Allowed only for the project owner.\n      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n\n      // Project Subcollections (observations, inspections, ptws)\n      match /{itemCollection}/{itemId} {\n        // Any member of the project can read/write items within it.\n        // This is efficient and secure.\n        allow read, write: if exists(/databases/$(database)/documents/projects/$(projectId)) &&\n                           get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.includes(request.auth.uid);\n      }\n    }\n    \n    // Root-level items (public or private, but not project-scoped)\n    // We handle collections individually for clarity.\n    \n    match /observations/{observationId} {\n        // Read if public, or if you are the owner.\n        allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n\n        // Create your own observation.\n        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n\n        // Update your own observation OR if you are liking/viewing it.\n        allow update: if (request.auth != null && request.auth.uid == resource.data.userId) || \n                       (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'viewCount', 'isSharedPublicly']));\n        \n        allow delete: if false; // No client-side deletion\n    }\n\n    match /inspections/{inspectionId} {\n      // Inspections are always private\n      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    match /ptws/{ptwId} {\n      // PTWs are always private\n      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T08:51:04.595Z] Jul 02, 2025 8:51:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 8:51:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T08:51:04.866Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T08:51:04.867Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":34,"column":104,"currentOffset":1751,"endOffset":1758},"description":"Invalid function name: includes.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:34:104 - WARNING Invalid function name: includes. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T09:17:34.787Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T09:17:34.787Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users Collection\n    // - Anyone can read user profiles (for displaying names, etc.)\n    // - Only the user themselves can update their own profile.\n    // - User documents cannot be created or deleted from the client.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == userId;\n      allow create, delete: if false; \n    }\n\n    // Projects Collection\n    // - Any authenticated user can query the collection (list).\n    //   Security is enforced by the client query and the 'read' rule.\n    // - Users can only read a specific project if they are a member.\n    // - Any authenticated user can create a new project.\n    // - Only the owner can update or delete a project.\n    match /projects/{projectId} {\n      allow list, create: if request.auth != null;\n      allow read, update, delete: if request.auth.uid == resource.data.ownerUid\n                                  || request.auth.uid in resource.data.memberUids;\n\n      // Sub-collections within a project\n      // - Only project members can access sub-collections.\n      match /{collectionId}/{docId} {\n        allow read, list, create, update, delete: if get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n    }\n\n    // Root-level collections for Private/Public data\n    // - Users can only manage their own private documents.\n    // - Anyone can read public documents.\n    match /{collectionId}/{docId} {\n      // Handle private documents (observations, inspections, ptws)\n      allow read, list, create, update, delete: if resource.data.userId == request.auth.uid;\n      \n      // Handle public documents (observations)\n      allow read, list: if resource.data.scope == 'public';\n      // Allow creation of public docs via the sharing mechanism (server-action)\n      allow create: if request.auth != null; \n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T09:17:34.805Z] Jul 02, 2025 9:17:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 9:17:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T09:17:35.014Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T09:17:35.015Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T09:32:31.665Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T09:32:31.665Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Aturan ini mengizinkan semua pengguna yang sudah login (terautentikasi)\n    // untuk melakukan operasi baca dan tulis pada semua dokumen.\n    // Ini adalah aturan yang dilonggarkan untuk memastikan fungsi inti aplikasi berjalan.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T09:32:31.676Z] Jul 02, 2025 9:32:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 9:32:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T09:32:31.731Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T09:32:31.731Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T09:56:33.764Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T09:56:33.765Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Default rule: Allow read and write access only to authenticated users.\n    // This is a simple, permissive rule for development and debugging to ensure\n    // that permission errors are not the cause of application failures.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T09:56:33.782Z] Jul 02, 2025 9:56:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 9:56:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T09:56:33.877Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T09:56:33.884Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T10:07:38.145Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T10:07:38.158Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Hardcore Diagnostic Rule: Allow ALL read and write operations for ANYONE.\n    // This is to definitively eliminate permission errors as the cause of failure.\n    // This is NOT secure for production but is a necessary step for debugging.\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T10:07:38.189Z] Jul 02, 2025 10:07:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 10:07:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T10:07:38.256Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T10:07:38.257Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T10:36:02.071Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T10:36:02.073Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Hardcore Rule: Allow all reads and writes for debugging project creation.\n    // This is NOT secure for production but is a necessary diagnostic step.\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T10:36:02.198Z] Jul 02, 2025 10:36:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 10:36:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T10:36:02.505Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T10:36:02.513Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T10:48:45.467Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T10:48:45.474Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Allow authenticated users to read any user's profile\n    // This is needed to display member names and photos in projects\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Rules for projects collection\n    match /projects/{projectId} {\n      // Allow creation by any authenticated user\n      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;\n      \n      // Allow read/write/delete only by members of the project\n      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.memberUids;\n    }\n\n    // Rules for all subcollections within a project (observations, inspections, ptws)\n    match /projects/{projectId}/{collection}/{docId} {\n        // Inherit read access from the parent project\n        allow read: if get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n        \n        // Allow write access only to members of the project\n        allow write: if get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);\n    }\n    \n    // Allow users to manage their own private items\n    // (This covers observations, inspections, and ptws with scope='private')\n    match /{collection}/{docId} {\n       allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;\n    }\n    \n    // Allow any authenticated user to read public observations\n    match /observations/{docId} {\n      allow read: if request.auth != null && resource.data.scope == 'public';\n      // Do not allow direct writes to public observations for safety\n    }\n\n  }\n}\n"}]}}
[debug] [2025-07-02T10:48:45.499Z] Jul 02, 2025 10:48:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 10:48:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T10:48:45.799Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T10:48:45.804Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"issues":[{"sourcePosition":{"fileName":"security.rules","line":31,"column":100,"currentOffset":1145,"endOffset":1147},"description":"Invalid function name: has.","severity":"WARNING"},{"sourcePosition":{"fileName":"security.rules","line":34,"column":101,"currentOffset":1338,"endOffset":1340},"description":"Invalid function name: has.","severity":"WARNING"}]}
[warn] ⚠  firestore.rules:31:100 - WARNING Invalid function name: has. 
[warn] ⚠  firestore.rules:34:101 - WARNING Invalid function name: has. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T11:04:58.242Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T11:04:58.242Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read other user profiles (for names, photos) but can only write to their own.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Project rules\n    match /projects/{projectId} {\n      // CREATE: Anyone logged in can create a project, but they must be the owner.\n      // The new document's data is in request.resource.data\n      allow create: if request.auth != null\n                    && request.resource.data.ownerUid == request.auth.uid\n                    && request.auth.uid in request.resource.data.memberUids\n                    && request.resource.data.memberUids.size() == 1;\n\n      // READ, UPDATE: Only members of the project can read or update it.\n      // The existing document's data is in resource.data\n      allow read, update: if request.auth.uid in resource.data.memberUids;\n      \n      // DELETE: Only the owner can delete a project.\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n\n      // Nested Collections (Observations, Inspections, PTWs)\n      // Allow members to perform all actions on items within their project.\n      match /{collection}/{docId} {\n         allow read, write, create, delete: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;\n      }\n    }\n    \n    // Rules for top-level collections (private/public items)\n    match /observations/{obsId} {\n        // Private observations: only the owner can manage them.\n        allow read, write, delete: if resource.data.scope == 'private' && request.auth.uid == resource.data.userId;\n\n        // Public observations: anyone can read.\n        allow read: if resource.data.scope == 'public';\n\n        // Creation: allow creating public or private observations if you're the owner.\n        allow create: if request.auth.uid == request.resource.data.userId;\n\n        // Liking/updating a public post is allowed if logged in.\n        allow update: if request.auth != null && resource.data.scope == 'public';\n    }\n    \n    match /inspections/{inspId} {\n        // Private inspections: only the owner can manage.\n        allow read, write, create, delete: if request.auth.uid == request.resource.data.userId;\n    }\n    \n    match /ptws/{ptwId} {\n        // Private PTWs: only the owner can manage.\n        allow read, write, create, delete: if request.auth.uid == request.resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T11:04:58.250Z] Jul 02, 2025 11:04:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 11:04:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T11:04:58.600Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T11:04:58.600Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T11:07:28.069Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T11:07:28.070Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow any authenticated user to read and write to any document.\n    // This is a permissive rule to ensure core functionality works.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T11:07:28.091Z] Jul 02, 2025 11:07:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 11:07:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T11:07:28.216Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T11:07:28.216Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T11:25:30.169Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T11:25:30.170Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Allow authenticated users to read/write their own user profile\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Rules for projects collection\n    match /projects/{projectId} {\n      // Any authenticated user can create a project\n      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid && request.auth.uid in request.resource.data.memberUids;\n\n      // Only members of a project can read or update it\n      allow read, update: if request.auth != null && resource.data.memberUids.hasAny([request.auth.uid]);\n      \n      // Only the owner can delete a project\n      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n      \n      // Nested Collections (Observations, Inspections, PTWs)\n      match /{collection}/{docId} {\n         // Members can create/read/update documents within their project\n         allow create, read, update, delete: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n    }\n    \n    // Allow any authenticated user to list projects for joining/searching\n    match /projects/{projectId} {\n        allow list: if request.auth != null;\n    }\n\n    // Rules for top-level private collections (not in projects)\n    match /observations/{docId} {\n      allow create, read, update, delete: if request.auth != null && (request.resource == null || request.resource.data.userId == request.auth.uid);\n      allow list: if request.auth != null;\n    }\n    match /inspections/{docId} {\n      allow create, read, update, delete: if request.auth != null && (request.resource == null || request.resource.data.userId == request.auth.uid);\n    }\n    match /ptws/{docId} {\n      allow create, read, update, delete: if request.auth != null && (request.resource == null || request.resource.data.userId == request.auth.uid);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T11:25:30.222Z] Jul 02, 2025 11:25:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 11:25:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T11:25:30.688Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T11:25:30.690Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T12:04:48.993Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T12:04:48.994Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Allow logged-in users to read their own profile and others' public profiles\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.uid == userId;\n    }\n\n    // Rules for the 'projects' collection\n    match /projects/{projectId} {\n      // READ: Allow if the user's UID is in the memberUids array.\n      // This is the query that requires a composite index.\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      \n      // CREATE: Allow if the user is logged in, and they are setting themselves as the owner and a member.\n      // This prevents a user from creating a project for someone else.\n      allow create: if request.auth != null\n                    && request.resource.data.ownerUid == request.auth.uid\n                    && request.auth.uid in request.resource.data.memberUids;\n                    \n      // UPDATE: Allow if the user is the project owner.\n      // Used for adding/removing members.\n      allow update: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n      \n      // DELETE: Allow only if the user is the project owner.\n      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;\n\n      // Rules for subcollections (observations, inspections, ptws)\n      match /{collection}/{docId} {\n        // Allow full access if the user is a member of the parent project.\n        allow read, write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);\n      }\n    }\n    \n    // Rules for root collections (for private/public items)\n    match /observations/{docId} {\n        // READ: Allow if the item is public, or if the user is the owner (for private items).\n        allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n\n        // CREATE: Allow if the user is creating it for themselves.\n        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n        \n        // UPDATE: Allow if the user is the owner. Used for status changes, likes, etc.\n        allow update: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n\n    match /inspections/{docId} {\n        allow read, create, update: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n    \n    match /ptws/{docId} {\n       allow read, create, update: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T12:04:49.016Z] Jul 02, 2025 12:04:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 12:04:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T12:04:49.070Z] Jul 02, 2025 12:04:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 12:04:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T12:04:49.571Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T12:04:49.574Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T12:52:03.382Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T12:52:03.383Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Aturan paling mendasar: Izinkan baca dan tulis jika pengguna sudah login.\n    // Ini menghilangkan semua kemungkinan galat izin yang kompleks sebagai langkah diagnostik.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T12:52:03.480Z] Jul 02, 2025 12:52:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 12:52:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T12:52:03.693Z] Jul 02, 2025 12:52:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 12:52:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T12:52:03.997Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T12:52:04.000Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T13:28:12.529Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T13:28:12.530Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read any profile, but only write to their own document.\n    match /users/{userId} {\n      allow read: if request.auth != null;\n      allow create, update: if request.auth.uid == userId;\n    }\n\n    // Projects can be read by their members. Only the owner can update or delete.\n    match /projects/{projectId} {\n      allow read: if request.auth.uid in resource.data.memberUids;\n      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Observations, Inspections, and PTWs can be read/written by any authenticated user for now.\n    // This keeps the focus on fixing the project functionality.\n    match /observations/{observationId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{inspectionId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{ptwId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T13:28:12.574Z] Jul 02, 2025 1:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 1:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T13:28:12.601Z] Jul 02, 2025 1:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 1:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T13:28:12.690Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T13:28:12.692Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T14:04:10.492Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T14:04:10.495Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // USERS COLLECTION\n    // Users can read and update their own profile.\n    // Anyone can create a user document during signup.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // PROJECTS COLLECTION\n    // Any authenticated user can create a project.\n    // Only members of a project can read it.\n    // Only the project owner can update or delete it.\n    match /projects/{projectId} {\n      allow create: if request.auth != null;\n      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;\n      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n    }\n\n    // OBSERVATIONS, INSPECTIONS, PTWS COLLECTIONS\n    // Any authenticated user can create a document.\n    // Readers/writers are controlled at the application level (e.g., project members).\n    // The rules here are permissive for authenticated users.\n    match /observations/{docId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{docId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{docId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T14:04:10.567Z] Jul 02, 2025 2:04:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 2:04:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T14:04:10.647Z] Jul 02, 2025 2:04:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 2:04:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T14:04:11.064Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T14:04:11.064Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T14:15:43.319Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T14:15:43.319Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // For debugging: Allow any authenticated user to read/write any document.\n    // This removes permission rules as a source of error to isolate the problem.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T14:15:43.331Z] Jul 02, 2025 2:15:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 2:15:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T14:15:43.424Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T14:15:43.426Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T14:22:31.254Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T14:22:31.254Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Rule for user profiles: A user can create their profile, and can only read/update their own.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Diagnostic Rule: Temporarily make the 'projects' collection public to test writes.\n    // This allows us to confirm if the creation logic itself works, independent of user-based permissions.\n    // THIS IS NOT SECURE FOR PRODUCTION.\n    match /projects/{projectId} {\n      allow read, write: if true;\n    }\n\n    // Fallback rule for all other collections (observations, inspections, ptw).\n    // Requires the user to be authenticated.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T14:22:31.269Z] Jul 02, 2025 2:22:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 2:22:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T14:22:31.356Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T14:22:31.356Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T14:28:12.386Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T14:28:12.386Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Default rule: Allow operations only for authenticated users.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n\n    // Explicit rule for users collection\n    match /users/{userId} {\n      // Users can only read and update their own profile.\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      // Users can create their own profile document upon signup.\n      allow create: if request.auth != null;\n    }\n    \n    // Explicit rule for projects collection\n    match /projects/{projectId} {\n      // Any authenticated user can create a project.\n      allow create: if request.auth != null;\n      // Only members of the project can read, update or delete it.\n      allow read, update, delete: if request.auth != null && resource.data.memberUids.hasAny([request.auth.uid]);\n    }\n    \n    // Explicit rules for observation, inspection, and PTW collections\n    match /observations/{obsId} {\n       allow read, write: if request.auth != null;\n    }\n    \n    match /inspections/{inspId} {\n       allow read, write: if request.auth != null;\n    }\n    \n    match /ptws/{ptwId} {\n       allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T14:28:12.398Z] Jul 02, 2025 2:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 2:28:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T14:28:12.593Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T14:28:12.594Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:13:19.628Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:13:19.629Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all to prevent accidental access\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Users can only manage their own profile\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Projects:\n    // ANY authenticated user can READ any project document. This is required for the \n    // \"fetch all and filter\" search functionality to work without a manual index.\n    // WRITE permissions are much more restrictive.\n    match /projects/{projectId} {\n      allow read: if request.auth != null;\n      allow create: if request.auth != null;\n      // Only the project owner can update or delete the project document.\n      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Rules for subcollections remain secure.\n    // For now, allow any logged-in user to access these items.\n    // This can be refined later to check for project membership.\n    match /observations/{observationId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{inspectionId} {\n       allow read, write: if request.auth != null;\n    }\n    match /ptws/{ptwId} {\n       allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:13:19.715Z] Jul 02, 2025 3:13:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:13:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:13:19.931Z] Jul 02, 2025 3:13:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:13:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:13:20.469Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:13:20.469Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:23:41.882Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:23:41.882Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create;\n    }\n\n    match /projects/{projectId} {\n      // Allow any logged-in user to see the list of projects for the \"Join Project\" feature.\n      allow list: if request.auth != null;\n\n      // Only allow members to read the full details of a single project.\n      allow get: if request.auth.uid == resource.data.ownerUid || request.auth.uid in resource.data.memberUids;\n      \n      // Only the owner can add members (update memberUids) or delete the project.\n      allow create, update, delete: if request.auth.uid == request.resource.data.ownerUid;\n    }\n\n    match /observations/{observationId} {\n      // Public observations are readable by anyone.\n      // Private/Project observations are readable only by the owner/members.\n      allow get: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);\n      allow list, write: if request.auth != null;\n    }\n\n    match /inspections/{inspectionId} {\n      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n    \n    match /ptws/{ptwId} {\n       allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:23:41.891Z] Jul 02, 2025 3:23:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:23:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:23:41.995Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:23:41.995Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:43:56.642Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:43:56.643Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Allow any authenticated user to do anything for now.\n    // This is to isolate the problem. If writes still fail,\n    // the problem is NOT the rules, but the project/API configuration.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:43:56.660Z] Jul 02, 2025 3:43:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:43:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:43:56.738Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:43:56.739Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:52:20.977Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:52:20.977Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    match /projects/{projectId} {\n      // Allow any authenticated user to see the list of projects for the \"Join\" dialog\n      allow list: if request.auth != null;\n      // Allow a user to read a specific project's details if they are a member\n      allow get: if request.auth.uid in resource.data.memberUids;\n      // Creation is manual, but we can allow it for authenticated users if needed later\n      allow create: if request.auth != null;\n      // Only the owner can update (e.g., add members) or delete the project\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Generic rule for other collections to reduce noise during this specific fix.\n    // We allow any authenticated user to read/write for now.\n    match /observations/{obsId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{inspId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{ptwId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:52:20.989Z] Jul 02, 2025 3:52:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:52:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:52:21.136Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:52:21.136Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:54:41.939Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:54:41.939Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    match /projects/{projectId} {\n      // Allow any authenticated user to see the list of projects for the \"Join\" dialog\n      allow list: if request.auth != null;\n      // Allow a user to read a specific project's details if they are a member\n      allow get: if request.auth.uid in resource.data.memberUids;\n      // Creation is manual, but we can allow it for authenticated users if needed later\n      allow create: if request.auth != null;\n      // Only the owner can update (e.g., add members) or delete the project\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Generic rule for other collections to reduce noise during this specific fix.\n    // We allow any authenticated user to read/write for now.\n    match /observations/{obsId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{inspId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{ptwId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:54:41.944Z] Jul 02, 2025 3:54:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:54:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:54:42.122Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:54:42.122Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:55:38.178Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:55:38.179Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    match /projects/{projectId} {\n      // Allow any authenticated user to see the list of projects for the \"Join\" dialog\n      allow list: if request.auth != null;\n      // Allow a user to read a specific project's details if they are a member\n      allow get: if request.auth.uid in resource.data.memberUids;\n      // Creation is manual, but we can allow it for authenticated users if needed later\n      allow create: if request.auth != null;\n      // Only the owner can update (e.g., add members) or delete the project\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Generic rule for other collections to reduce noise during this specific fix.\n    // We allow any authenticated user to read/write for now.\n    match /observations/{obsId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{inspId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{ptwId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:55:38.187Z] Jul 02, 2025 3:55:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:55:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:55:38.271Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:55:38.271Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T15:57:41.380Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T15:57:41.381Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    match /projects/{projectId} {\n      // Allow any authenticated user to see the list of projects for the \"Join\" dialog\n      allow list: if request.auth != null;\n      // Allow a user to read a specific project's details if they are a member\n      allow get: if request.auth.uid in resource.data.memberUids;\n      // Creation is manual, but we can allow it for authenticated users if needed later\n      allow create: if request.auth != null;\n      // Only the owner can update (e.g., add members) or delete the project\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Generic rule for other collections to reduce noise during this specific fix.\n    // We allow any authenticated user to read/write for now.\n    match /observations/{obsId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{inspId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{ptwId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T15:57:41.414Z] Jul 02, 2025 3:57:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 3:57:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T15:57:41.483Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T15:57:41.483Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T16:53:22.544Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T16:53:22.545Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n    \n    // Allow logged-in users to read/write their own user profile\n    match /users/{userId} {\n      allow read, update, write: if request.auth.uid == userId;\n    }\n\n    // Projects Rules - Granular permissions\n    match /projects/{projectId} {\n      // Allow any logged-in user to LIST projects (for Project Hub and Join Dialog)\n      allow list: if request.auth != null;\n\n      // Allow a user to GET (read a single document) a project only if they are a member\n      allow get: if request.auth.uid in resource.data.memberUids;\n\n      // Allow a user to CREATE a project if they are logged in\n      allow create: if request.auth != null;\n\n      // Allow a user to UPDATE a project only if they are the owner (e.g., for adding members)\n      allow update: if request.auth.uid == resource.data.ownerUid;\n\n      // Allow a user to DELETE a project only if they are the owner\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Allow any authenticated user to create/read/update/delete items.\n    // This keeps the item logic simple while projects are secured.\n    match /observations/{docId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{docId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{docId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T16:53:22.612Z] Jul 02, 2025 4:53:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 4:53:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T16:53:22.720Z] Jul 02, 2025 4:53:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 4:53:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T16:53:22.977Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T16:53:22.977Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-02T17:23:01.862Z] ----------------------------------------------------------------------
[debug] [2025-07-02T17:23:01.868Z] Command:       /nix/store/rbdrkcs5kkwpalxcd7c6bnm33lk2955n-nodejs-20.19.0/bin/node /nix/store/fprgfkwna33crhc86jqbf5878piivvgw-firebase-tools-14.7.0/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-02T17:23:01.871Z] CLI Version:   14.7.0
[debug] [2025-07-02T17:23:01.871Z] Platform:      linux
[debug] [2025-07-02T17:23:01.872Z] Node Version:  v20.19.0
[debug] [2025-07-02T17:23:01.873Z] Time:          Wed Jul 02 2025 17:23:01 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-02T17:23:01.873Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-02T17:23:03.496Z] openjdk version "21.0.5" 2024-10-15
OpenJDK Runtime Environment (build 21.0.5+1-nixos)
OpenJDK 64-Bit Server VM (build 21.0.5+1-nixos, mixed mode, sharing)

[debug] [2025-07-02T17:23:03.550Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-02T17:23:03.574Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-02T17:23:03.585Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-02T17:23:03.611Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-02T17:23:03.611Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-02T17:23:03.612Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/w60wgw0k95kiq4yl5f561xhydyg07gf7-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-02T17:23:08.541Z] Jul 02, 2025 5:23:08 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:23:08 PM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-02T17:23:08.669Z] API endpoint: http:// {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://"}}
[debug] [2025-07-02T17:23:08.673Z] 127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-02T17:23:08.825Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T17:23:24.184Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T17:23:24.185Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n    \n    // Allow logged-in users to read/write their own user profile\n    match /users/{userId} {\n      allow read, update, write: if request.auth.uid == userId;\n    }\n\n    // Projects Rules - Granular permissions\n    match /projects/{projectId} {\n      // Allow any logged-in user to LIST projects (for Project Hub and Join Dialog)\n      allow list: if request.auth != null;\n\n      // Allow a user to GET (read a single document) a project only if they are a member\n      allow get: if request.auth.uid in resource.data.memberUids;\n\n      // Allow a user to CREATE a project if they are logged in\n      allow create: if request.auth != null;\n\n      // Allow a user to UPDATE a project only if they are the owner (e.g., for adding members)\n      allow update: if request.auth.uid == resource.data.ownerUid;\n\n      // Allow a user to DELETE a project only if they are the owner\n      allow delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Allow any authenticated user to create/read/update/delete items.\n    // This keeps the item logic simple while projects are secured.\n    match /observations/{docId} {\n      allow read, write: if request.auth != null;\n    }\n    match /inspections/{docId} {\n      allow read, write: if request.auth != null;\n    }\n    match /ptws/{docId} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T17:23:24.216Z] Jul 02, 2025 5:23:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:23:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T17:23:28.907Z] Jul 02, 2025 5:23:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:23:28 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-02T17:23:42.807Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T17:23:42.815Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-02T17:38:43.436Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-02T17:38:43.437Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users collection\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n    \n    // Projects collection\n    match /projects/{projectId} {\n      // A user can read a project document if their UID is in the memberUids array.\n      // This single rule secures both single-document gets and collection queries.\n      allow read: if request.auth.uid in resource.data.memberUids;\n\n      // Any authenticated user can create a project. The client-side logic should \n      // ensure the creator's UID is set as owner and member.\n      allow create: if request.auth != null;\n\n      // Only the project owner can update (e.g., add members) or delete the project.\n      allow update, delete: if request.auth.uid == resource.data.ownerUid;\n    }\n\n    // Observations collection\n    match /observations/{observationId} {\n      // Read is allowed if:\n      // 1. The observation is public.\n      // 2. The observation is private and belongs to the user.\n      // 3. The observation is for a project, and the user is a member of that project.\n      allow get, list: if (resource.data.scope == 'public') ||\n                         (request.auth != null && resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n                         (request.auth != null && resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);\n\n      // Authenticated users can create observations.\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      \n      // Update is allowed if the user owns the observation OR is a member of the project it belongs to.\n      allow update: if request.auth != null && (\n                      (resource.data.userId == request.auth.uid) ||\n                      (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids)\n                    );\n    }\n    \n    // Inspections collection\n    match /inspections/{inspectionId} {\n      allow get, list, update, delete: if request.auth != null && (\n                                         (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n                                         (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids)\n                                     );\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n    }\n\n    // PTWs collection\n    match /ptws/{ptwId} {\n      allow get, list, update, delete: if request.auth != null && (\n                                         (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||\n                                         (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids)\n                                     );\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-02T17:38:43.474Z] Jul 02, 2025 5:38:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 02, 2025 5:38:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-02T17:38:43.931Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-02T17:38:43.932Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
