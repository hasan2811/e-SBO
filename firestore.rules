
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow logged-in users to read their own profile and others' public profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Rules for the 'projects' collection
    match /projects/{projectId} {
      // READ: Allow if the user's UID is in the memberUids array.
      // This is the query that requires a composite index.
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;
      
      // CREATE: Allow if the user is logged in, and they are setting themselves as the owner and a member.
      // This prevents a user from creating a project for someone else.
      allow create: if request.auth != null
                    && request.resource.data.ownerUid == request.auth.uid
                    && request.auth.uid in request.resource.data.memberUids;
                    
      // UPDATE: Allow if the user is the project owner.
      // Used for adding/removing members.
      allow update: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      
      // DELETE: Allow only if the user is the project owner.
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;

      // Rules for subcollections (observations, inspections, ptws)
      match /{collection}/{docId} {
        // Allow full access if the user is a member of the parent project.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }
    }
    
    // Rules for root collections (for private/public items)
    match /observations/{docId} {
        // READ: Allow if the item is public, or if the user is the owner (for private items).
        allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);

        // CREATE: Allow if the user is creating it for themselves.
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        
        // UPDATE: Allow if the user is the owner. Used for status changes, likes, etc.
        allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /inspections/{docId} {
        allow read, create, update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /ptws/{docId} {
       allow read, create, update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
