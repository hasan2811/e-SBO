
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Super Admin
    function isSuperAdmin() {
      return request.auth.uid == 'GzR8FeByeKhJ0vZoeo5Zj4M0Ftl2';
    }

    // Rules for User Profiles
    match /users/{userId} {
      // Super admin can read any profile. Users can only read/update their own.
      allow read, update: if isSuperAdmin() || request.auth.uid == userId;
      // Any authenticated user can create their own profile.
      allow create: if request.auth != null;
    }

    // Rules for Projects
    match /projects/{projectId} {
      // To read a project document (get or list), user must be a member or super admin.
      // This is the key rule that fixes the "Failed to load projects" error.
      allow read: if isSuperAdmin() || (resource.data.memberUids.size() > 0 && resource.data.memberUids.hasAny([request.auth.uid]));
      
      // Let any authenticated user create a project (manual flow).
      allow create: if request.auth != null;
      
      // Only the project owner or super admin can update/delete it.
      allow update, delete: if isSuperAdmin() || resource.data.ownerUid == request.auth.uid;
    }

    // Generic Rules for ALL other collections (observations, inspections, ptws)
    match /{collection}/{docId} {
      
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }
      
      function isProjectItem() {
        return 'projectId' in resource.data && resource.data.projectId != null;
      }

      function isProjectMember() {
        // This function checks if the user is a member of the project linked to the document.
        let projectId = resource.data.projectId;
        return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }

      // READ access is granted if:
      // 1. It's a public item.
      // 2. The user is the owner (for private items).
      // 3. It's a project item AND the user is a member of that project.
      // 4. The user is a super admin.
      allow read: if resource.data.scope == 'public' 
                  || isOwner() 
                  || (isProjectItem() && isProjectMember()) 
                  || isSuperAdmin();

      // WRITE access is granted if:
      // 1. User is the owner (for creating/updating their private items).
      // 2. It's a project item AND the user is a member of that project.
      // 3. User is super admin.
      allow write: if isOwner() 
                   || (isProjectItem() && isProjectMember()) 
                   || isSuperAdmin();
    }
  }
}
