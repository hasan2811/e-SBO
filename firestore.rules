
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Profiles ---
    // Users can be read by any authenticated user (to find emails for invites).
    // Users can only be updated by themselves.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }

    // --- Projects ---
    // Any signed-in user can create a project.
    // Only members can read or update a project's details.
    // Only the owner can delete a project.
    match /projects/{projectId} {
      function isMember() {
        return request.auth.uid in resource.data.memberUids;
      }

      allow create: if isSignedIn();
      allow read, update: if isMember();
      allow delete: if request.auth.uid == resource.data.ownerUid;

      // --- Project Subcollections ---
      // This is the "folder" logic. Access is granted if the user is a member of the parent project.
      match /{collectionName}/{docId}
        where collectionName in ['observations', 'inspections', 'ptws'] {
        function isProjectMemberFromPath() {
          return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
        }
        allow read, write: if isProjectMemberFromPath();
      }
    }

    // --- Root Collections (for Public and Private items) ---
    // This rule now applies only to the root collections for items not in a project.
    match /{collectionName}/{docId}
      where collectionName in ['observations', 'inspections', 'ptws'] {

      // Allow anyone to read documents marked as 'public'.
      // Allow authenticated users to read their own 'private' documents.
      allow read: if resource.data.scope == 'public' || 
                   (resource.data.scope == 'private' && isOwner(resource.data.userId));

      // An authenticated user can create a document, but they must set themselves as the owner.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);

      // Only the original owner can update or delete their documents.
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}
