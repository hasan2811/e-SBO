
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read and update their own profile.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }

    // Rules for project documents
    match /projects/{projectId} {
      // Only members can read the project document itself.
      allow get: if request.auth != null && request.auth.uid in resource.data.memberUids;
      // Nobody can list all projects for security.
      allow list: if false;
      // Only the project owner can update the project doc (e.g., for adding members via a Cloud Function).
      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      // Any authenticated user can create a project.
      allow create: if request.auth != null;
    }

    // Rules for subcollections within a project (e.g., /projects/{id}/observations)
    match /projects/{projectId}/{collectionId}/{docId} {
      // Members can perform all actions on documents within a project they belong to.
      allow read, list, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // Rules for top-level collections (observations, inspections, ptws) for public/private items
    match /{collectionId}/{docId} {
      // Anyone can read a public document.
      // A logged-in user can read their own private documents.
      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);

      // A logged-in user can query for their own private items.
      // Anyone can query for public items.
      allow list: if (request.auth != null && request.query.get('userId') == request.auth.uid) || request.query.get('scope') == 'public';
      
      // A logged-in user can create/update/delete their own items.
      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
