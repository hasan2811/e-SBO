rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Helper Functions
    // =====================================================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks if a user is a member of a specific project.
    // This is used for GET requests on single documents.
    function isProjectMember(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) 
             && request.auth.uid in projectDoc.data.memberUids;
    }

    // =====================================================================
    // User Profiles
    // =====================================================================
    match /users/{userId} {
      // Anyone signed in can view a user's profile (needed to get emails for invites)
      allow get: if isSignedIn();
      // Only the user themselves can create or update their own profile
      allow write: if isOwner(userId);
      // Allow authenticated users to list users (e.g., for invites)
      allow list: if isSignedIn();
    }

    // =====================================================================
    // Projects
    // =====================================================================
    match /projects/{projectId} {
      // Only project members can read project details.
      allow get: if isProjectMember(projectId);
      // Anyone can create a project, as long as they list themselves as owner and member.
      allow create: if isSignedIn() 
                    && isOwner(request.resource.data.ownerUid)
                    && request.auth.uid in request.resource.data.memberUids;
      // Future-proofing: Only owner can update/delete
      allow update, delete: if isOwner(resource.data.ownerUid);
      // Allow project members to list projects they are a part of.
      allow list: if isSignedIn() && request.auth.uid in resource.data.memberUids;
    }

    // =====================================================================
    // Data Collections (Observations, Inspections, PTWs)
    // =====================================================================
    function canReadItem(item) {
        let isPublic = item.scope == 'public';
        let isPrivateAndOwner = item.scope == 'private' && isOwner(item.userId);
        let isProjectItemAndMember = item.scope == 'project' && isProjectMember(item.projectId);
        
        return isPublic || isPrivateAndOwner || isProjectItemAndMember;
    }
    
    function canWriteItem() {
        // User must be the owner of the document they are creating/updating.
        return isSignedIn() && isOwner(request.resource.data.userId);
    }

    match /observations/{docId} {
      allow get: if canReadItem(resource.data);
      allow list: if isSignedIn(); // Broad list access, security enforced by queries + rules on 'get'
      allow write: if canWriteItem();
    }
    
    match /inspections/{docId} {
      allow get: if canReadItem(resource.data);
      allow list: if isSignedIn();
      allow write: if canWriteItem();
    }

    match /ptws/{docId} {
      allow get: if canReadItem(resource.data);
      allow list: if isSignedIn();
      allow write: if canWriteItem();
    }
  }
}
