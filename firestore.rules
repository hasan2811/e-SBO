
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User profile can be read by anyone, but only the user can write to their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Function to check if the requesting user is a member of a specific project.
    function isProjectMember(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }

    // Rules for the top-level 'projects' collection.
    match /projects/{projectId} {
      // Members can read project details.
      allow read: if request.auth != null && isProjectMember(projectId);
      
      // Only authenticated users can create a project, and they must be the owner.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;
      
      // Project updates are not allowed for simplicity, but can be added here later.
      allow update: if false; 
      
      // Project deletion is not allowed.
      allow delete: if false;

      // Rules for all subcollections within a project (observations, inspections, ptws).
      match /{subcollection}/{docId} {
          // Any project member can create, read, update, or delete items in the project.
          allow read, write: if request.auth != null && isProjectMember(projectId);
      }
    }
    
    // Rules for top-level collections (non-project items).
    function isOwner(resource) {
        return request.auth.uid == resource.data.userId;
    }

    match /observations/{observationId} {
      // Allow read if the item is public, OR if the user is the owner (for private items).
      allow read: if resource.data.scope == 'public' || (request.auth != null && isOwner(resource));
      // Allow write only for the owner.
      allow write: if request.auth != null && isOwner(resource);
    }
    
    match /inspections/{inspectionId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && isOwner(resource));
      allow write: if request.auth != null && isOwner(resource);
    }
    
    match /ptws/{ptwId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && isOwner(resource));
      allow write: if request.auth != null && isOwner(resource);
    }
  }
}
