rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isProjectMember(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    match /projects/{projectId} {
      allow read: if request.auth != null && isProjectMember(projectId);
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    match /{collection}/{itemId} 
      where collection in ['observations', 'inspections', 'ptws'] {

      allow read: if request.auth != null && (
                    resource.data.scope == 'public' ||
                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId))
                  );

      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && (
                      request.resource.data.scope == 'private' || 
                      (request.resource.data.scope == 'project' && isProjectMember(request.resource.data.projectId)) ||
                      (request.resource.data.scope == 'public' && request.resource.data.originalId != null)
                    );
                    
      // Owner can update. Project members can update project items (e.g. status or likes).
      allow update: if request.auth != null && (
                      resource.data.userId == request.auth.uid ||
                      (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)) ||
                      (resource.data.scope == 'public') // Any authenticated user can like a public post
                    );
      
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
