
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is a member of a given project.
    // This is used to secure reads for observations, inspections, and PTWs.
    function isProjectMember(projectId) {
      // Use `exists` for a lightweight check on the project document.
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // A user can read or update their own profile.
      allow read, update: if request.auth.uid == userId;
      // Any authenticated user can list users, which is necessary for the
      // project invitation feature to find users by email.
      // The actual user data is still protected by the 'read' rule above.
      allow list: if request.auth.uid != null;
    }
    
    // Rules for the 'projects' collection.
    match /projects/{projectId} {
      // A user can create a project. The owner is set via server-side action.
      allow create: if request.auth.uid != null;
      // A user can read a project document only if their UID is in the memberUids list.
      allow read: if request.auth.uid in resource.data.memberUids;
      // Only the project owner can update project details (e.g., name, members).
      allow update: if request.auth.uid == resource.data.ownerUid;
      // Deleting projects is disabled for safety.
      allow delete: if false;
    }

    // Rules for the 'observations' collection.
    match /observations/{observationId} {
      // Allow creating an observation if the user is authenticated.
      allow create: if request.auth.uid != null;

      // Allow reading an observation if:
      // 1. It's public.
      // 2. The user is the author.
      // 3. The user is a member of the linked project.
      allow read: if resource.data.scope == 'public' ||
                   request.auth.uid == resource.data.userId ||
                   (resource.data.projectId != null && isProjectMember(resource.data.projectId));
                   
      // Allow updating an observation (e.g., taking action) if the user is a member of the project
      // or if it's a personal/public observation that they own.
      allow update: if (resource.data.projectId != null && isProjectMember(resource.data.projectId)) ||
                     (resource.data.projectId == null && request.auth.uid == resource.data.userId);

      // Deleting observations is disabled for safety.
      allow delete: if false;
    }
    
    // Rules for the 'inspections' collection.
    match /inspections/{inspectionId} {
      allow create: if request.auth.uid != null;
      allow read: if resource.data.scope == 'public' ||
                   request.auth.uid == resource.data.userId ||
                   (resource.data.projectId != null && isProjectMember(resource.data.projectId));
      allow update: if false; // Updates for inspections are not a feature yet.
      allow delete: if false;
    }

    // Rules for the 'ptws' (Permit to Work) collection.
    match /ptws/{ptwId} {
      allow create: if request.auth.uid != null;
      
      // Allow reading a PTW if it's public, the user submitted it, or they are a member of the project.
      allow read: if resource.data.scope == 'public' ||
                   request.auth.uid == resource.data.userId ||
                   (resource.data.projectId != null && isProjectMember(resource.data.projectId));

      // Only allow updating a PTW (e.g., approving it) if the user is a member of the associated project.
      allow update: if resource.data.projectId != null && isProjectMember(resource.data.projectId);
                   
      allow delete: if false;
    }
  }
}
