rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Allow authenticated reads for profiles, but only self-updates.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow update: if request.auth.uid == userId;
      // Disallow listing all users for security.
      allow list, create, delete: if false;
    }

    // Projects: Secure access based on membership.
    match /projects/{projectId} {
      // Any authenticated user can create a project.
      allow create: if request.auth != null;
      
      // Allow reads (get/list) and updates only if the user is a member.
      // This is the key rule that allows queries like `where('memberUids', 'array-contains', ...)`
      allow read, update: if request.auth.uid in resource.data.memberUids;
      
      // Allow deletion only by the project owner.
      allow delete: if request.auth.uid == resource.data.ownerUid;

      // Subcollections within a project (observations, inspections, ptws).
      // Access is granted if the user is a member of the parent project.
      match /{collection}/{docId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }
    }

    // Root "observations" collection for public and private scopes.
    match /observations/{obsId} {
      // READ: Allow if the observation is public, OR if it's private and owned by the user.
      // This single rule covers both `get` and `list` operations correctly.
      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);

      // CREATE: Allow if the new observation is correctly owned by the user.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // UPDATE: Allow owner to update their private/public observation.
      // Also allow any authenticated user to update like/view counts on public posts.
      allow update: if request.auth != null && (
        (request.auth.uid == resource.data.userId) ||
        (resource.data.scope == 'public' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'viewCount', 'commentCount']))
      );

      // DELETE: Disallow for data integrity.
      allow delete: if false;
    }

    // Root "inspections" and "ptws" collections (always private).
    match /{itemType in ['inspections', 'ptws']}/{docId} {
      // Simple ownership check for all operations.
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      // Disallow listing for security.
      allow list, delete: if false;
    }
  }
}
