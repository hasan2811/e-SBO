
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a member of a specific project.
    // This function performs a read to another document, which is billed.
    function isProjectMember(projectId) {
      return request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }
    
    // Helper function to check if a user is the owner of a specific project.
    function isProjectOwner(projectId) {
      return request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid == request.auth.uid;
    }

    // USER PROFILES
    // Users can only update their own profile.
    // Any authenticated user can read profiles (needed for displaying names like project owners).
    // Anyone can create a user document during sign-up.
    match /users/{userId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth.uid == userId;
      allow delete: if false; // Users cannot delete their own profiles.
    }

    // PROJECTS
    // Any authenticated user can read the project list (to populate the "Join Project" dialog).
    // A user can create a project if they are the owner specified in the new project data.
    // Only the project owner can update or delete the project.
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }

    // OBSERVATIONS, INSPECTIONS, PTWS
    // This single rule matches any top-level collection like 'observations', 'inspections', 'ptws'.
    match /{itemCollection}/{itemId} {
      
      // READ access:
      // Allow if the item is public.
      // OR if the item is private and the user is the owner.
      // OR if the item is part of a project and the user is a member of that project.
      allow read: if request.auth != null &&
                   (resource.data.scope == 'public' ||
                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)));

      // CREATE access:
      // Allow if the user is authenticated and is the author of the new item.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // UPDATE access:
      // Allow if the item is private and the user is the owner.
      // OR if the item is part of a project and the user is a member of that project.
      // This rule covers all updates: taking action, approving PTWs, liking, sharing, etc.
      allow update: if request.auth != null &&
                     ((resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                      (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)));

      // DELETE access:
      // Deleting core data is generally disallowed from the client for data integrity.
      allow delete: if false;
    }
  }
}
