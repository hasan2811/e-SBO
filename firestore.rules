
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
  
    // Allow users to read and update their own profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    // Rules for top-level collections (public & private non-project data)
    function canReadTopLevelDoc(doc) {
      return (doc.scope == 'public' && request.auth != null) || (request.auth.uid == doc.userId);
    }
    
    match /observations/{obsId} {
      allow read: if canReadTopLevelDoc(resource.data);
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
    }
    match /inspections/{inspId} {
      allow read: if canReadTopLevelDoc(resource.data);
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
    }
    match /ptws/{ptwId} {
      allow read: if canReadTopLevelDoc(resource.data);
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
    }

    // Rules for Projects and their sub-collections
    match /projects/{projectId} {
      // Allow read if the user's UID is in the memberUids array.
      allow read: if request.auth.uid in resource.data.memberUids;
      
      // Allow project creation if the user is the owner of the new document.
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      
      // Allow updates/deletes if the user is the owner of the existing document.
      allow update, delete: if request.auth.uid == resource.data.ownerUid;

      // Rules for sub-collections within a project
      match /{subCollection}/{docId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
      }
    }
  }
}

    