rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check project membership
    function isProjectMember(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);
    }

    // Rules for User Profiles
    match /users/{userId} {
      // Anyone can view a user's profile (to display names, etc.)
      allow get: if request.auth != null;
      // A user can only create and update their own profile
      allow write: if request.auth.uid == userId;
    }

    // Rules for Projects
    match /projects/{projectId} {
      // Allow reading project details only if the user is a member
      allow get: if request.auth != null && isProjectMember(projectId);
      // Allow any authenticated user to list projects (for searching)
      // This is safe as long as the project document itself doesn't contain sensitive data.
      allow list: if request.auth != null;
      // Allow creating a project if the user is authenticated and is listed as the first member
      allow create: if request.auth != null && request.auth.uid == request.resource.data.memberUids[0];
      // Allow updating a project (e.g., adding/removing members) only if the user is the owner
      allow update: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      // Allow deleting a project only if the user is the owner
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;

      // Rules for project-specific sub-collections
      match /{collection}/{docId} {
        // Allow full access to project documents if the user is a project member
        allow read, write: if request.auth != null && isProjectMember(projectId);
      }
    }
    
    // Rules for root collections (Private and Public items)
    match /{collection}/{docId} {
      // Allow read access if the item is public, OR if it's private and belongs to the user
      allow get: if (resource.data.scope == 'public') || (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);
      // Allow listing public documents for the public feed
      allow list: if request.query.limit <= 10 && request.query.offset == null && request.resource.data.scope == 'public';

      // Allow creating a document if it's for the logged-in user
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow updating/deleting if the document belongs to the user
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
