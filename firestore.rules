
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check project membership
    function isProjectMember(projectId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.has(request.auth.uid);
    }
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can only read their own profile
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    
    // Rules for top-level collections (observations, inspections, ptws)
    match /{collectionName}/{docId} {
      // Allow anyone to read public documents
      allow read: if resource.data.scope == 'public';
      
      // Allow authenticated users to read their own private documents
      allow read: if request.auth != null && resource.data.scope == 'private' && request.auth.uid == resource.data.userId;

      // Allow authenticated users to create documents in these collections
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update their own documents
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for projects and their subcollections
    match /projects/{projectId} {
      // Allow project members to read project details
      allow read: if request.auth != null && isProjectMember(projectId);
      
      // Only the owner can update project details (e.g., add members - future functionality)
      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid;

      // Allow any authenticated user to create a project
      allow create: if request.auth != null;
      
      // Allow project members to access items within project subcollections
      match /{subCollection}/{itemId} {
        allow read, write: if request.auth != null && isProjectMember(projectId);
      }
    }
  }
}
