rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    // Users: Can read any profile (for inviting), but only write to their own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Projects: 
    // - To read/update a project, you must be a member. This rule works for both
    //   single-document gets and collection queries using "array-contains".
    // - To create a project, you must be the owner specified in the new document.
    match /projects/{projectId} {
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.memberUids;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }
    
    // Generic rule for data collections (observations, inspections, ptw)
    function canAccess(item) {
      let isOwner = isSignedIn() && item.userId == request.auth.uid;
      let isPublic = item.scope == 'public';
      // projectId can be null, so check for it before trying to access it.
      let isProjectScope = item.projectId != null && (request.auth.uid in get(/databases/$(database)/documents/projects/$(item.projectId)).data.memberUids);
      
      return isOwner || isPublic || isProjectScope;
    }
    
    match /observations/{observationId} {
      allow create: if canAccess(request.resource.data);
      allow read, write: if canAccess(resource.data);
    }
    
    match /inspections/{inspectionId} {
      allow create: if canAccess(request.resource.data);
      allow read, write: if canAccess(resource.data);
    }
    
    match /ptws/{ptwId} {
      allow create: if canAccess(request.resource.data);
      allow read, write: if canAccess(resource.data);
    }
  }
}
