
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Any authenticated user can look up other users to invite them to projects.
      // This is a security tradeoff for collaboration features without a complex backend.
      allow list: if isSignedIn();

      // A user can get their own profile.
      allow get: if isSignedIn();
      
      // A user can update their own profile.
      allow update: if isOwner(userId);
      
      // A new user profile is created during sign-up.
      allow create: if isSignedIn();
    }

    // =================================
    // Projects Collection
    // =================================
    match /projects/{projectId} {
      // Anyone can create a project. The owner is set by the server action.
      allow create: if isSignedIn();

      // Users can read a project's data ONLY if their UID is in the memberUids list.
      // This rule secures both direct gets and queries.
      allow read: if isSignedIn() && request.auth.uid in resource.data.memberUids;

      // Only the project owner can update a project (e.g., add members via a future function).
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }
    
    // =================================
    // Shared Rules for Data Collections (Observations, Inspections, PTWs)
    // =================================
    function canReadItem(item) {
      let isPublic = item.scope == 'public';
      let isPrivateOwner = item.scope == 'private' && isOwner(item.userId);
      let isProjectMember = item.scope == 'project' && get(/databases/$(database)/documents/projects/$(item.projectId)).data.memberUids.hasAny([request.auth.uid]);
      
      return isPublic || isPrivateOwner || isProjectMember;
    }
    
    function canWriteItem() {
       // Check if the projectId in the new data exists, if one is provided.
      let projectExists = !request.resource.data.keys().hasAny(['projectId']) || request.resource.data.projectId == null || exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId));
      
      // The user creating the resource must be the owner.
      return isOwner(request.resource.data.userId) && projectExists;
    }

    // =================================
    // Observations Collection
    // =================================
    match /observations/{obsId} {
      allow read: if canReadItem(resource.data);
      allow create: if canWriteItem();
      // Only the owner of the observation can update it (e.g., take action).
      allow update: if isOwner(resource.data.userId);
    }
    
    // =================================
    // Inspections Collection
    // =================================
    match /inspections/{inspId} {
      allow read: if canReadItem(resource.data);
      allow create: if canWriteItem();
      allow update: if isOwner(resource.data.userId);
    }

    // =================================
    // PTWs Collection
    // =================================
    match /ptws/{ptwId} {
       allow read: if canReadItem(resource.data);
       allow create: if canWriteItem();
       // The PTW can be updated by the owner (e.g., submitting it) or by a project member (e.g., approving it).
       allow update: if isOwner(resource.data.userId) || canReadItem(resource.data);
    }
  }
}
