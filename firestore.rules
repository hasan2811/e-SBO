rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks if the requesting user is a member of a specific project.
    function isProjectMember(projectId) {
      // Use exists() for security and efficiency instead of get()
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }
    
    // User Profiles
    match /users/{userId} {
      // Anyone signed in can read user profiles. Needed for inviting members to projects.
      allow read: if isSignedIn();
      // A user can only create or update their own profile.
      allow create, update: if isOwner(userId);
    }
    
    // Projects Collection
    match /projects/{projectId} {
      // A user can read a project's details only if they are a member.
      allow get: if isProjectMember(projectId);
      
      // A user can list only the projects they are a member of.
      allow list: if isSignedIn() && request.query.where.get('memberUids').get('array-contains').get(0) == request.auth.uid;
      
      // A user can create a project if they are signed in, listed as the owner, and included in the member list.
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid && request.auth.uid in request.resource.data.memberUids;
      
      // Only the project owner can update a project (e.g., add members).
      allow update: if isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid);
    }
    
    // Generic Data Rule for Observations, Inspections, PTWs
    match /{collection}/{itemId} {
    
      // READ access control
      // A user can read a document if:
      // 1. It's public.
      // 2. It's their own private document.
      // 3. They are a member of the project it belongs to.
      allow get: if (resource.data.scope == 'public') || 
                    (resource.data.scope == 'private' && isOwner(resource.data.userId)) || 
                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));
                    
      // LIST (Query) access control
      // A user can query a collection if the query targets:
      // 1. Public documents.
      // 2. Their own private documents (by userId and scope).
      // 3. Documents from a specific project they are a member of.
      allow list: if (request.query.where.get('scope') != null && request.query.where.get('scope').get('==') == 'public') ||
                     (request.query.where.get('userId') != null && request.query.where.get('userId').get('==') == request.auth.uid) ||
                     (request.query.where.get('projectId') != null && isProjectMember(request.query.where.get('projectId').get('==')));

      // WRITE access control
      // A user can create a document if they are signed in and are the owner of the new document.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // A user can update a document only if they are its owner, or a member of the project for project-scoped items.
      allow update: if isSignedIn() && (isOwner(resource.data.userId) || (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)));
      // A user can delete a document only if they are its owner.
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}
