
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isProjectMember(projectId) {
      // Use exists() for robustness against missing documents or fields
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow users to read other users' profiles (for project member lists)
    // but only update their own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isUser(userId);
    }
    
    // Project-related rules
    match /projects/{projectId} {
      // Allow members to read project details.
      allow get: if isProjectMember(projectId);
      
      // Allow authenticated users to query the project list
      // This is crucial for creating, finding, and joining projects.
      allow list: if isSignedIn();

      // Allow authenticated users to create a project
      allow create: if isSignedIn();
      
      // Allow owners to update (e.g., add members) or delete the project.
      allow update, delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      
      // Rules for sub-collections within a project
      match /{collection}/{docId} {
        allow read, write: if isProjectMember(projectId);
      }
    }
    
    // Rules for root-level "private" and "public" items
    match /observations/{docId} {
      // Public observations can be read by anyone
      allow get: if resource.data.scope == 'public';
      
      // We need list for the public feed query
      allow list: if isSignedIn();
      
      // Users can read/write their own private observations
      allow read, write: if resource.data.scope == 'private' && isUser(resource.data.userId);
      
      // Allow any signed-in user to update specific fields for public posts
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'isSharedPublicly', 'viewCount']);
      
      // Allow creation of private or public observations
      allow create: if isSignedIn();
    }
    
    // Generic rules for other private collections (Inspections, PTWs)
    match /{collection}/{docId} {
      allow read, write: if (collection == 'inspections' || collection == 'ptws') && resource.data.scope == 'private' && isUser(resource.data.userId);
      allow create: if (collection == 'inspections' || collection == 'ptws') && isSignedIn();
    }
  }
}
