
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for project membership.
    // This is used for reading items within a project.
    function isProjectMember(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // Rules for User Profiles
    match /users/{userId} {
      // Any authenticated user can read any profile (for inviting members).
      allow read: if request.auth != null;
      // Users can only create their own profile document.
      allow create: if request.auth.uid == userId;
      // Users can only update their own profile.
      allow update: if request.auth.uid == userId;
    }
    
    // This is critical for allowing the project creation server action
    // to search for users by email.
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Rules for Projects
    match /projects/{projectId} {
      // A user can read a project document if their UID is in the memberUids array.
      // This is efficient and works directly with the `array-contains` query from the client.
      allow read: if request.auth.uid in resource.data.memberUids;

      // A user can create a project if they are the owner and their UID is in the initial member list.
      allow create: if request.auth.uid == request.resource.data.ownerUid && request.auth.uid in request.resource.data.memberUids;
      
      // Only the owner can update a project (e.g., add members - NOT YET IMPLEMENTED).
      allow update: if request.auth.uid == resource.data.ownerUid;
      
      // Only the owner can delete a project.
      allow delete: if request.auth.uid == resource.data.ownerUid;
    }

    // Rules for Observations
    match /observations/{obsId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      // Allow read if: 
      // 1. It's a public observation.
      // 2. The user is the owner of the observation.
      // 3. The observation belongs to a project the user is a member of (checks for non-null projectId).
      allow read: if resource.data.scope == 'public' || 
                     resource.data.userId == request.auth.uid || 
                     (resource.data.projectId != null && isProjectMember(resource.data.projectId));
      allow update: if request.auth.uid == resource.data.userId || isProjectMember(resource.data.projectId);
      allow delete: if request.auth.uid == resource.data.userId;
    }

    // Rules for Inspections
    match /inspections/{inspId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if resource.data.scope == 'public' || 
                     resource.data.userId == request.auth.uid || 
                     (resource.data.projectId != null && isProjectMember(resource.data.projectId));
      allow update: if request.auth.uid == resource.data.userId || isProjectMember(resource.data.projectId);
      allow delete: if request.auth.uid == resource.data.userId;
    }

    // Rules for Permit to Work (PTW)
    match /ptws/{ptwId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if resource.data.scope == 'public' || 
                     resource.data.userId == request.auth.uid || 
                     (resource.data.projectId != null && isProjectMember(resource.data.projectId));
      // Any project member can approve/update a PTW.
      allow update: if isProjectMember(resource.data.projectId);
      allow delete: if request.auth.uid == resource.data.userId;
    }
  }
}
