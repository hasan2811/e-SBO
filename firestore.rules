
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read/write their own user profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Rules for projects collection
    match /projects/{projectId} {
      // Any authenticated user can create a project
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid && request.auth.uid in request.resource.data.memberUids;

      // Only members of a project can read or update it
      allow read, update: if request.auth != null && resource.data.memberUids.hasAny([request.auth.uid]);
      
      // Only the owner can delete a project
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      
      // Nested Collections (Observations, Inspections, PTWs)
      match /{collection}/{docId} {
         // Members can create/read/update documents within their project
         allow create, read, update, delete: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }
    }
    
    // Allow any authenticated user to list projects for joining/searching
    match /projects/{projectId} {
        allow list: if request.auth != null;
    }

    // Rules for top-level private collections (not in projects)
    match /observations/{docId} {
      allow create, read, update, delete: if request.auth != null && (request.resource == null || request.resource.data.userId == request.auth.uid);
      allow list: if request.auth != null;
    }
    match /inspections/{docId} {
      allow create, read, update, delete: if request.auth != null && (request.resource == null || request.resource.data.userId == request.auth.uid);
    }
    match /ptws/{docId} {
      allow create, read, update, delete: if request.auth != null && (request.resource == null || request.resource.data.userId == request.auth.uid);
    }
  }
}
