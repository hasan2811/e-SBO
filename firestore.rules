rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Anyone authenticated can read profiles. You can only write your own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    // Projects Collection
    match /projects/{projectId} {
      // READ (get, list): Allowed ONLY if the authenticated user's ID is in the project's member list.
      // This is the key fix. Firestore ensures that any `list` query from the client MUST be
      // constructed in a way that it only requests documents that would pass this rule.
      // The client query `where('memberUids', 'array-contains', user.uid)` is compatible with this.
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUids;
      
      // CREATE: Allowed if the user is logged in. The server action handles adding the creator as owner/member.
      allow create: if request.auth != null;
      
      // UPDATE: Allowed for members (e.g., adding another member).
      allow update: if request.auth != null && request.auth.uid in resource.data.memberUids;
      
      // DELETE: Allowed only for the project owner.
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;

      // Project Subcollections (observations, inspections, ptws)
      match /{itemCollection}/{itemId} {
        // Any member of the project can read/write items within it.
        // This is efficient and secure.
        allow read, write: if exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.includes(request.auth.uid);
      }
    }
    
    // Root-level items (public or private, but not project-scoped)
    // We handle collections individually for clarity.
    
    match /observations/{observationId} {
        // Read if public, or if you are the owner.
        allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);

        // Create your own observation.
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

        // Update your own observation OR if you are liking/viewing it.
        allow update: if (request.auth != null && request.auth.uid == resource.data.userId) || 
                       (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'viewCount', 'isSharedPublicly']));
        
        allow delete: if false; // No client-side deletion
    }

    match /inspections/{inspectionId} {
      // Inspections are always private
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /ptws/{ptwId} {
      // PTWs are always private
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
