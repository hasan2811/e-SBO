rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only update their own profile, but can read others.
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid == userId;
    }
    
    // Project metadata can be read by members, but only written by the owner.
    match /projects/{projectId} {
      allow read: if request.auth.uid in resource.data.memberUids;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }
    
    // Unified rule for Observations
    match /observations/{observationId} {
      // READ: Public is open. Private is self-only. Project is for members.
      allow read: if resource.data.scope == 'public'
                  || (resource.data.scope == 'private' && resource.data.userId == request.auth.uid)
                  || (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);
                  
      // WRITE: Any authenticated user can create. Only the author can update/delete.
      allow create: if request.auth.uid != null;
      allow update, delete: if resource.data.userId == request.auth.uid;
    }

    // Unified rule for Inspections
    match /inspections/{inspectionId} {
      // READ: Private is self-only. Project is for members.
      allow read: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid)
                  || (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);
                  
      // WRITE: Any authenticated user can create. Only the author can update/delete.
      allow create: if request.auth.uid != null;
      allow update, delete: if resource.data.userId == request.auth.uid;
    }
    
    // Unified rule for PTWs
    match /ptws/{ptwId} {
       // READ: Private is self-only. Project is for members.
       allow read: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid)
                  || (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);
                  
      // WRITE: Creator can write. For updates (approvals), any project member can write.
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid != null && (get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids.hasAny([request.auth.uid]) || resource.data.userId == request.auth.uid);
    }
  }
}
