rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can read any profile (to see member names) but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // --- Project-related Rules ---
    match /projects/{projectId} {
      // Allow any authenticated user to LIST projects. 
      // This is CRITICAL for the "is user in another project?" check before creation.
      // We secure individual project access with the 'get' rule below.
      allow list: if request.auth != null;
      
      // Only project members can GET a specific project document.
      allow get: if request.auth != null && resource.data.memberUids.hasAny([request.auth.uid]);

      // Any authenticated user can attempt to create a project.
      // The server-side action is responsible for blocking creation if they are already in a project.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUid;

      // Only the project owner can update (e.g., add/remove members) or delete the project.
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;

      // --- Project Sub-collection Rules ---
      // These rules apply to observations, inspections, and ptws within a project.
      function isProjectMember() {
        return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }
      
      match /observations/{obsId} {
        allow read, write: if request.auth != null && isProjectMember();
      }
      
      match /inspections/{inspId} {
        allow read, write: if request.auth != null && isProjectMember();
      }
      
      match /ptws/{ptwId} {
        allow read, write: if request.auth != null && isProjectMember();
      }
    }

    // --- Root Collections (Private and Public items) ---
    // These rules are separate from projects.
    
    match /observations/{obsId} {
        // Anyone can read a public observation.
        // A user can read/write their own private observations.
        allow read: if resource.data.scope == 'public' || 
                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);
        allow write: if request.auth.uid == request.resource.data.userId;
    }
    
    match /inspections/{inspId} {
        // Inspections are always private (not shared to public feed)
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /ptws/{ptwId} {
        // PTWs are always private (not shared to public feed)
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
