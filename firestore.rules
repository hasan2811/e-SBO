
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read any profile, but only update their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    // Rules for the projects collection
    match /projects/{projectId} {
      // Allow a user to read a project document if their UID is in the memberUids array.
      // This rule correctly allows both single 'get' requests and 'list' queries
      // as long as the query includes `where('memberUids', 'array-contains', request.auth.uid)`.
      allow read: if request.auth.uid in resource.data.memberUids;

      // Allow a user to create a project if they are authenticated and are setting themselves as the owner.
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      
      // Allow the project owner to update (e.g., add/remove members) or delete the project.
      allow update, delete: if request.auth.uid == resource.data.ownerUid;

      // Rules for subcollections within a project (observations, inspections, ptws)
      match /{itemCollection}/{itemId} {
        // Any member of the project can read, create, or update items within it.
        allow read, write: if get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }
    }

    // Rules for top-level (private or public) items
    match /{itemCollection}/{itemId}
      where itemCollection in ['observations', 'inspections', 'ptws'] {
      
      // Anyone can read a public item. Only the owner can read a private item.
      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);
      
      // An authenticated user can create an item if they are the owner of the new item.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // The owner of an item can update it. For public items, anyone can update like/view counts.
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        (resource.data.scope == 'public' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'viewCount']))
      );
    }
  }
}
