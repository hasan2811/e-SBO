rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Helper Functions
    // =================================================================
    
    // Is the user authenticated?
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Does the incoming data belong to the user making the request?
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Is the user a member of a specific project?
    function isProjectMember(projectId) {
      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // Is the user the owner of a specific project?
    function isProjectOwner(projectId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerUid;
    }
    
    // =================================================================
    // User Profiles
    // =================================================================
    match /users/{userId} {
      // Users can only read their own profile.
      // Users can create their own profile upon signup.
      // Users can only update their own profile (displayName, position).
      allow read, update: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
    }
    
    // =================================================================
    // Projects
    // =================================================================
    match /projects/{projectId} {
      // Allow reading project data ONLY if the user is a member of that project.
      allow read: if isProjectMember(projectId);
      
      // Allow creating a project if the user is signed in and they are the owner.
      allow create: if isSignedIn() && isOwner(resource.data.ownerUid);

      // Only the project OWNER can update project details (e.g., add/remove members later).
      allow update: if isProjectOwner(projectId);
      
      // Deny deletion of projects for safety.
      allow delete: if false;

      // =================================================================
      // Items within Project Sub-collections
      // =================================================================
      
      // Generic rule for all item types within a project.
      // This covers observations, inspections, and ptws.
      match /{itemCollection}/{itemId} {
        // Allow members of the project to read, create, and update any item within it.
        allow read, create, update: if isProjectMember(projectId);
        allow delete: if false; // Deletion is generally disabled for record-keeping.
      }
    }
    
    // =================================================================
    // Root Collections for Public/Private Items
    // =================================================================

    // --- Observations ---
    match /observations/{observationId} {
      // Read: Allow if scope is public, or if scope is private and user is the owner.
      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));
      
      // Create: Allow if user is signed in and is the owner of the new document.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);

      // Update: Allow only if user is the owner.
      allow update: if isSignedIn() && isOwner(resource.data.userId);

      allow delete: if false;
    }

    // --- Inspections ---
    match /inspections/{inspectionId} {
      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if false;
    }

    // --- PTWs ---
    match /ptws/{ptwId} {
      allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && isOwner(resource.data.userId));
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if false;
    }
  }
}
