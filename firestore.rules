
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================================================
    // Helper Functions
    // =================================================================
    function isSuperAdmin() {
      return request.auth.uid == 'GzR8FeByeKhJ0vZoeo5Zj4M0Ftl2';
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isProjectMember(projectId) {
      // Check if a project document exists and if the user is in its memberUids list.
      // This is a safe way to check membership.
      return isSignedIn() && exists(/databases/$(database)/documents/projects/$(projectId)) &&
             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // =================================================================
    // Collection: users
    // =================================================================
    match /users/{userId} {
      // Users can read/write their own profile. Admin can manage any user.
      allow read, write: if isSignedIn() && (request.auth.uid == userId || isSuperAdmin());
    }

    // =================================================================
    // Collection: projects
    // =================================================================
    match /projects/{projectId} {
      // ANY signed-in user can QUERY the projects collection.
      // The client-side code is responsible for filtering (e.g., `where('memberUids', 'array-contains', ...)`).
      // This is the key fix that solves the `permission-denied` for the project list.
      allow list: if isSignedIn();

      // Users can GET a specific project's details only if they are a member or super admin.
      allow get, write: if isProjectMember(projectId) || isSuperAdmin();
    }

    // =================================================================
    // Collections: observations, inspections, ptws
    // =================================================================
    match /{itemCollection}/{itemId} {
      // This single rule applies to observations, inspections, and ptws.
      allow read, write: if 
        // Allow if user is super admin
        isSuperAdmin() ||
        // Allow if it's a public item and user is signed in
        (isSignedIn() && resource.data.scope == 'public') ||
        // Allow if it's a private item belonging to the user
        (isSignedIn() && resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
        // Allow if it's a project item and the user is a member of that project
        (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));
    }
  }
}
