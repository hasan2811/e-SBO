rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user is a member of a specific project.
    // Used for GET requests on single documents.
    function isProjectMember(projectId) {
      return isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }

    // =================================
    // User Profiles
    // =================================
    match /users/{userId} {
      // Any authenticated user can read user profiles (needed for inviting members).
      allow read: if isSignedIn();
      // A user can only create their own profile document.
      allow create: if request.auth.uid == userId;
      // A user can only update their own profile.
      allow update: if request.auth.uid == userId;
      allow delete: if false;
    }
    
    // =================================
    // Projects
    // =================================
    match /projects/{projectId} {
      // Allow reading a project's details only if you are a member.
      allow get: if isProjectMember(projectId);
      
      // Allow LISTING projects only if the query explicitly asks for projects
      // where the current user is a member. This forces secure client queries.
      allow list: if isSignedIn() && request.query.where.get('memberUids') != null && request.query.where.get('memberUids')[2][0] == request.auth.uid;
      
      // Allow creating a project if the requester is the owner and is in the members list.
      allow create: if isSignedIn() &&
                       request.auth.uid == request.resource.data.ownerUid &&
                       request.auth.uid in request.resource.data.memberUids;
                       
      // Allow updating a project only if you are the owner (for future use).
      allow update: if resource.data.ownerUid == request.auth.uid;
      allow delete: if false;
    }
    
    // =================================
    // Generic Item Collections (Observations, Inspections, PTWs)
    // =================================
    match /{itemCollection}/{itemId} where itemCollection in ['observations', 'inspections', 'ptws'] {
    
      // Allow creating an item if you are the author.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      
      // Allow reading a single item if it's public, you are the author, or you are a member of its project.
      allow get: if (resource.data.scope == 'public') ||
                    (resource.data.userId == request.auth.uid) ||
                    (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));
                    
      // Allow LISTING items only for specific, secure queries from the client.
      allow list: if 
          // 1. Allow querying the public feed.
          (request.query.where.get('scope') == 'public') ||
          // 2. Allow a user to query for items they authored.
          (isSignedIn() && request.query.where.get('userId') == request.auth.uid) ||
          // 3. Allow a user to query for items within a specific project they are a member of.
          (isSignedIn() && request.query.where.get('projectId') != null && isProjectMember(request.query.where.get('projectId')[2][0]));
          
      // Allow updates if you are the author or a member of the item's project.
      allow update: if isSignedIn() && (request.auth.uid == resource.data.userId || (resource.data.scope == 'project' && isProjectMember(resource.data.projectId)));
      allow delete: if false;
    }
  }
}
