
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is a member of a project
    function isProjectMember(projectId) {
      // Use get() for checking single documents, typically in `allow get` rules.
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isAuthenticated() && ('memberUids' in projectData) && request.auth.uid in projectData.memberUids;
    }

    // Profiles: Users can read any profile but only update their own.
    match /users/{userId} {
      allow read, create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Projects: Users can create projects. They can read projects they are a member of.
    match /projects/{projectId} {
      allow create: if isAuthenticated();
      // This rule is now more robust. It checks for the existence of 'memberUids'.
      // This supports the 'array-contains' query used in the app.
      allow read: if isAuthenticated() && 'memberUids' in resource.data && request.auth.uid in resource.data.memberUids;
    }

    // Generic rule for collections (observations, inspections, ptws)
    match /{collection}/{docId}
      where collection in ['observations', 'inspections', 'ptws'] {

      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;

      // Allow reading documents under these conditions:
      // 1. The document is public.
      // 2. The user is the owner of the document.
      // 3. The document belongs to a project the user is a member of.
      // This rule works for both single `get` requests and collection `list` queries
      // as long as the queries are structured correctly (which we will ensure in the app).
      allow read: if resource.data.scope == 'public'
                   || (isAuthenticated() && request.auth.uid == resource.data.userId)
                   || (isAuthenticated() && resource.data.scope == 'project' && isProjectMember(resource.data.projectId));
    }
  }
}
