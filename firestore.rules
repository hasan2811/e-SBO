rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a member of a project
    function isProjectMember(projectId) {
      return isAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }
    
    // USER PROFILES
    match /users/{userId} {
      // Anyone can create their own user profile document upon sign-up.
      allow create: if isOwner(userId);
      // Only the owner can read or update their own profile.
      allow read, update: if isOwner(userId);
      // Users cannot delete their profiles.
      allow delete: if false;
    }
    
    // PROJECTS
    match /projects/{projectId} {
      // Any authenticated user can create a new project.
      allow create: if isAuthenticated();
      // Only project members can read the project details.
      allow read: if isProjectMember(projectId);
      // Only the owner of the project can update it (e.g., change name, add/remove members).
      allow update: if isOwner(resource.data.ownerUid);
      // Only the owner can delete the project.
      allow delete: if isOwner(resource.data.ownerUid);
    }
    
    // OBSERVATIONS, INSPECTIONS, PTWS
    match /{collection}/{itemId} {
      // Any authenticated user can create a new item.
      allow create: if isAuthenticated();
      
      // Read access depends on the item's scope.
      allow read: if resource.data.scope == 'public'
                   || (resource.data.scope == 'private' && isOwner(resource.data.userId))
                   // This now correctly checks if the user is a member of the item's project
                   || (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));
                   
      // Update/Delete access is more restricted.
      allow update, delete: if (resource.data.scope == 'private' && isOwner(resource.data.userId))
                             || (resource.data.scope == 'project' && isProjectMember(resource.data.projectId));
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        // AI Flow (server) can create notifications
        allow create: if true;
        // Only the recipient can read/update their notification.
        allow read, update: if isOwner(resource.data.userId);
        allow delete: if false;
    }
  }
}
