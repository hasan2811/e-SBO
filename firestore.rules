
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth.uid == 'GzR8FeByeKhJ0vZoeo5Zj4M0Ftl2';
    }

    match /projects/{projectId} {
      // To read (get or list), a user must be an admin, OR the document must have a `memberUids` array that contains the user's ID.
      // This check (`'memberUids' in resource.data`) is crucial to prevent the rule from failing on incomplete documents.
      allow read: if isSuperAdmin() || 
                   ('memberUids' in resource.data && request.auth.uid in resource.data.memberUids);

      // Any authenticated user can create a project.
      allow create: if request.auth != null;
      
      // To update or delete, a user must be an admin, OR the document must have an `ownerUid` that matches the user's ID.
      allow update, delete: if isSuperAdmin() || 
                             ('ownerUid' in resource.data && request.auth.uid == resource.data.ownerUid);
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isSuperAdmin();
    }
    
    match /{collection}/{docId} {
       // This generic rule applies to observations, inspections, and ptws.
       // It's intentionally placed last.
       if collection != 'projects' && collection != 'users' {
         allow read: if isSuperAdmin() || 
                        ('scope' in resource.data && resource.data.scope == 'public') ||
                        ('scope' in resource.data && resource.data.scope == 'private' && 'userId' in resource.data && resource.data.userId == request.auth.uid) ||
                        ('scope' in resource.data && resource.data.scope == 'project' && 'projectId' in resource.data && 
                          request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);
                        
         allow create: if request.auth != null;
         allow update, delete: if isSuperAdmin() || ('userId' in resource.data && request.auth.uid == resource.data.userId);
       }
    }
  }
}
