rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isProjectMember(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /projects/{projectId} {
      allow read: if request.auth.uid in resource.data.memberUids;
      allow create: if request.auth.uid == request.resource.data.ownerUid;
      allow update: if request.auth.uid in resource.data.memberUids;
    }

    match /observations/{obsId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));
    }

    match /inspections/{inspId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));
    }

    match /ptws/{ptwId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId)));
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectMember(resource.data.projectId));
    }
  }
}
