rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can read their own profile and anyone can create a user profile (on signup)
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Public items can be read by anyone
    // Private items can only be handled by the owner
    match /observations/{observationId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if false;
    }

    match /inspections/{inspectionId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if false;
    }

    match /ptws/{ptwId} {
      allow read: if resource.data.scope == 'public' || (request.auth != null && request.auth.uid == resource.data.userId);
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if false;
    }

    // Projects and their subcollections
    match /projects/{projectId} {
      // Allow reading project info if the user is a member
      allow read: if request.auth.uid in resource.data.memberUids;
      
      // Allow creating a project if the user is authenticated and is the owner/sole member
      allow create: if request.auth.uid == request.resource.data.ownerUid 
                    && request.auth.uid in request.resource.data.memberUids
                    && request.resource.data.memberUids.size() == 1;

      // Allow updates only by the owner (e.g., to add members in the future)
      allow update: if request.auth.uid == resource.data.ownerUid;
      allow delete: if false; // Deleting projects is disabled

      // Rules for items within a project's subcollection
      function isProjectMember() {
        return get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
      }
      
      match /observations/{observationId} {
        allow read, write: if isProjectMember();
      }
      match /inspections/{inspectionId} {
        allow read, write: if isProjectMember();
      }
      match /ptws/{ptwId} {
        allow read, write: if isProjectMember();
      }
    }
  }
}
