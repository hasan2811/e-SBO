rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read other user profiles to find members for projects.
    // They can only create and modify their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
      allow delete: if false;
    }

    // Projects can be created by an authenticated user, but the owner must be the creator.
    // Only members can read the project, and only the owner can update/delete it.
    match /projects/{projectId} {
      allow read: if request.auth.uid in resource.data.memberUids;
      allow create: if request.auth.uid == request.resource.data.ownerUid && request.auth.uid in request.resource.data.memberUids;
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }

    // Observations, Inspections, and PTWs
    match /{collectionName}/{docId} where collectionName in ['observations', 'inspections', 'ptws'] {
      
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }
      
      function isPublic() {
        return resource.data.scope == 'public';
      }
      
      function isProjectMember() {
        // Check if the document belongs to a project
        let projectId = resource.data.get('projectId', null);
        
        // If there's no project ID, this rule doesn't apply
        if (projectId == null) {
          return false;
        }

        // Check if the user is a member of that project by checking if their UID is in the memberUids array.
        return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
      }

      // Allow read if the doc is public, or if the user is authenticated and is the owner OR a project member
      allow read: if isPublic() || (request.auth != null && (isOwner() || isProjectMember()));
      
      // Allow create only if the userId on the new document matches the creator's ID
      allow create: if request.auth.uid == request.resource.data.userId;

      // Allow update only by the original creator
      allow update: if isOwner();

      allow delete: if false;
    }
  }
}
