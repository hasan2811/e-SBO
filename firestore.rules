
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read other user profiles (for names, photos) but can only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Project rules
    match /projects/{projectId} {
      // CREATE: Anyone logged in can create a project, but they must be the owner.
      // The new document's data is in request.resource.data
      allow create: if request.auth != null
                    && request.resource.data.ownerUid == request.auth.uid
                    && request.auth.uid in request.resource.data.memberUids
                    && request.resource.data.memberUids.size() == 1;

      // READ, UPDATE: Only members of the project can read or update it.
      // The existing document's data is in resource.data
      allow read, update: if request.auth.uid in resource.data.memberUids;
      
      // DELETE: Only the owner can delete a project.
      allow delete: if request.auth.uid == resource.data.ownerUid;

      // Nested Collections (Observations, Inspections, PTWs)
      // Allow members to perform all actions on items within their project.
      match /{collection}/{docId} {
         allow read, write, create, delete: if request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
      }
    }
    
    // Rules for top-level collections (private/public items)
    match /observations/{obsId} {
        // Private observations: only the owner can manage them.
        allow read, write, delete: if resource.data.scope == 'private' && request.auth.uid == resource.data.userId;

        // Public observations: anyone can read.
        allow read: if resource.data.scope == 'public';

        // Creation: allow creating public or private observations if you're the owner.
        allow create: if request.auth.uid == request.resource.data.userId;

        // Liking/updating a public post is allowed if logged in.
        allow update: if request.auth != null && resource.data.scope == 'public';
    }
    
    match /inspections/{inspId} {
        // Private inspections: only the owner can manage.
        allow read, write, create, delete: if request.auth.uid == request.resource.data.userId;
    }
    
    match /ptws/{ptwId} {
        // Private PTWs: only the owner can manage.
        allow read, write, create, delete: if request.auth.uid == request.resource.data.userId;
    }
  }
}
