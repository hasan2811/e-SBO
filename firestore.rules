rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is a member of a specific project
    function isProjectMember(projectId) {
      return isAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids.hasAny([request.auth.uid]);
    }

    // =====================================================================
    // Users Collection
    // =====================================================================
    match /users/{userId} {
      // Anyone authenticated can read any user's profile (needed for inviting to projects by email)
      allow read: if isAuthenticated();
      // A user can only create or update their own profile
      allow write: if isOwner(userId);
    }

    // =====================================================================
    // Projects Collection
    // =====================================================================
    match /projects/{projectId} {
      // Only project members can read project details
      allow read: if isProjectMember(projectId);

      // An authenticated user can create a project if their UID is in the initial member list
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.memberUids;

      // Only the project owner can update a project (e.g., change name, add/remove members)
      allow update: if isOwner(resource.data.ownerUid);

      // Deleting projects is disabled for safety
      allow delete: if false;
    }

    // =====================================================================
    // Data Collections (Observations, Inspections, PTWs)
    // =====================================================================
    function canReadItem(item) {
      return item.scope == 'public' || isOwner(item.userId) || (item.projectId != null && isProjectMember(item.projectId));
    }
    
    function canWriteItem(item) {
        return isOwner(item.userId);
    }

    function canUpdateItem(item) {
        return isOwner(item.userId) || (item.projectId != null && isProjectMember(item.projectId));
    }

    match /observations/{obsId} {
      allow read: if canReadItem(resource.data);
      allow create: if canWriteItem(request.resource.data);
      allow update: if canUpdateItem(resource.data);
      allow delete: if isOwner(resource.data.userId);
    }

    match /inspections/{inspId} {
      allow read: if canReadItem(resource.data);
      allow create: if canWriteItem(request.resource.data);
      allow update: if canUpdateItem(resource.data);
      allow delete: if isOwner(resource.data.userId);
    }

    match /ptws/{ptwId} {
      allow read: if canReadItem(resource.data);
      allow create: if canWriteItem(request.resource.data);
      allow update: if canUpdateItem(resource.data);
      allow delete: if isOwner(resource.data.userId);
    }
  }
}
