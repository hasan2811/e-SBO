
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // A user can read a project document if their UID is in the memberUids array.
      // This single rule secures both single-document gets and collection queries.
      allow read: if request.auth.uid in resource.data.memberUids;

      // Any authenticated user can create a project. The client-side logic should 
      // ensure the creator's UID is set as owner and member.
      allow create: if request.auth != null;

      // Only the project owner can update (e.g., add members) or delete the project.
      allow update, delete: if request.auth.uid == resource.data.ownerUid;
    }

    // Observations collection
    match /observations/{observationId} {
      // Read is allowed if:
      // 1. The observation is public.
      // 2. The observation is private and belongs to the user.
      // 3. The observation is for a project, and the user is a member of that project.
      allow get, list: if (resource.data.scope == 'public') ||
                         (request.auth != null && resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                         (request.auth != null && resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids);

      // Authenticated users can create observations.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Update is allowed if the user owns the observation OR is a member of the project it belongs to.
      allow update: if request.auth != null && (
                      (resource.data.userId == request.auth.uid) ||
                      (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids)
                    );
    }
    
    // Inspections collection
    match /inspections/{inspectionId} {
      allow get, list, update, delete: if request.auth != null && (
                                         (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                                         (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids)
                                     );
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // PTWs collection
    match /ptws/{ptwId} {
      allow get, list, update, delete: if request.auth != null && (
                                         (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                                         (resource.data.scope == 'project' && request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids)
                                     );
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
