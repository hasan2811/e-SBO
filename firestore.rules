rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // User profiles are readable by any authenticated user, but only writable by the owner
    match /users/{userId} {
      allow get: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    // Helper function to check project membership
    function isProjectMember(projectId) {
      // Use exists() for robustness, then check membership.
      // This prevents errors if a project document is malformed.
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
    }

    // Rules for the 'projects' collection itself
    match /projects/{projectId} {
      // Allow a user to query the projects collection.
      // The query in the app MUST be constrained (e.g., using 'array-contains')
      // to ensure it only returns documents the user is allowed to 'get'.
      allow list: if request.auth != null;

      // Allow a user to read a specific project document IF they are a member.
      allow get: if isProjectMember(projectId);

      // Only the owner can create or delete the project document.
      allow create: if request.resource.data.ownerUid == request.auth.uid;
      allow delete: if resource.data.ownerUid == request.auth.uid;

      // Only the owner can update the project (e.g., add/remove members).
      allow update: if resource.data.ownerUid == request.auth.uid;
    }

    // Rules for sub-collections within a project
    match /projects/{projectId}/{collection}/{itemId} {
      // Any member of the project can read or write items within that project.
      allow read, write: if isProjectMember(projectId);
    }
    
    // Rules for root collections (private and public items)
    match /observations/{obsId} {
      allow get: if resource.data.scope == 'public' || 
                    (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);
      allow create: if request.resource.data.userId == request.auth.uid;
      // Allow the owner of a private doc to update it, 
      // or allow anyone to update social/sharing fields on any observation.
      allow update: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) ||
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount', 'isSharedPublicly', 'viewCount']));
    }

    match /inspections/{inspId} {
      // Allow if private and owner
      allow read, write: if resource.data.scope == 'private' && resource.data.userId == request.auth.uid;
    }

    match /ptws/{ptwId} {
      // Allow if private and owner
      allow read, write: if resource.data.scope == 'private' && resource.data.userId == request.auth.uid;
    }
  }
}
