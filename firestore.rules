
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow any authenticated user to get another user's profile.
    // This is necessary to display member names/photos in a project.
    // Writing is still restricted to the user themselves.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    // Rules for the 'projects' collection itself
    match /projects/{projectId} {
      // Allow a user to GET a specific project document if they are a member.
      allow get: if request.auth != null && request.auth.uid in resource.data.memberUids;

      // Allow authenticated users to LIST projects. The client-side query MUST
      // enforce security by using `where('memberUids', 'array-contains', request.auth.uid)`.
      // Firestore's rules will then verify that each document returned also passes the `get` rule.
      allow list: if request.auth != null;

      // Allow any authenticated user to create a project.
      allow create: if request.auth != null;

      // Only the project owner can update or delete the project document itself.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;

      // Rules for sub-collections within a project (observations, inspections, ptws)
      match /{subCollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUids;
      }
    }

    // Rules for root-level collections (private and public items)

    match /observations/{obsId} {
       allow read: if resource.data.scope == 'public' || (resource.data.scope == 'private' && resource.data.userId == request.auth.uid);
       allow create: if request.auth.uid == request.resource.data.userId;
       // Allow updates on private docs by owner, and on public docs (for likes/views) by any authenticated user.
       allow update: if (resource.data.scope == 'private' && resource.data.userId == request.auth.uid) || 
                      (resource.data.scope == 'public' && request.auth != null);
       allow delete: if resource.data.userId == request.auth.uid;
    }
    
    match /inspections/{inspId} {
       // Inspections are always private, only owner can access
       allow read, write, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';
       allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /ptws/{ptwId} {
       // PTWs are always private, only owner can access
       allow read, write, delete: if request.auth.uid == resource.data.userId && resource.data.scope == 'private';
       allow create: if request.auth.uid == request.resource.data.userId;
    }
  }
}
