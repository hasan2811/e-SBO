
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if the user is the designated super admin
    function isSuperAdmin() {
      return request.auth.uid == 'GzR8FeByeKhJ0vZoeo5Zj4M0Ftl2';
    }

    // Function to check if a required field exists in a document
    function hasFields(fields) {
      return resource.data.keys().hasAll(fields);
    }

    // Projects Collection
    match /projects/{projectId} {
      // Allow list/read access if the user is a super admin OR if they are a member of the project.
      // The `list` rule is crucial for queries, while `get` is for direct document access.
      allow read: if isSuperAdmin() || 
                    (hasFields(['memberUids']) && request.auth.uid in resource.data.memberUids);
      
      // Only the project owner (or super admin) can create, update, or delete the project document.
      allow write: if isSuperAdmin() || request.auth.uid == resource.data.ownerUid;
    }

    // User Profiles
    match /users/{userId} {
      // Users can only read or write their own profile. Super admin has full access.
      allow read, write: if request.auth.uid == userId || isSuperAdmin();
    }
    
    // Generic rule for data collections (observations, inspections, ptws)
    match /{itemCollection}/{itemId} {
      // Allow read access if:
      // 1. User is a super admin.
      // 2. The item is marked as 'public'.
      // 3. The user is a member of the project this item belongs to.
      allow read: if isSuperAdmin() || 
                     (hasFields(['scope']) && resource.data.scope == 'public') ||
                     (
                       hasFields(['projectId', 'scope']) &&
                       resource.data.scope == 'project' &&
                       exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.memberUids
                     ) ||
                     (
                       hasFields(['userId', 'scope']) &&
                       resource.data.scope == 'private' &&
                       request.auth.uid == resource.data.userId
                     );
      
      // Allow creating a new item if the user is authenticated.
      allow create: if request.auth != null;
      
      // Allow updating or deleting an item if the user is the original creator or a super admin.
      allow update, delete: if isSuperAdmin() || 
                              (hasFields(['userId']) && request.auth.uid == resource.data.userId);
    }
  }
}
