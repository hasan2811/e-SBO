rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a data document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rule for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read profile data (for names, etc.)
      allow read: if isAuthenticated();
      // Only the owner can update their own profile
      allow write: if request.auth.uid == userId;
    }

    // Generic rule for data collections (observations, inspections, ptws)
    match /{dataCollection}/{docId}
      where dataCollection in ['observations', 'inspections', 'ptws'] {
      
      // READ:
      // A user can read a document if:
      // 1. It is marked as 'public'
      // 2. OR they are the owner of the document.
      allow read: if resource.data.scope == 'public' || isOwner(resource.data.userId);

      // CREATE:
      // A user can create a document if:
      // 1. They are authenticated.
      // 2. They are the owner specified in the new document.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);

      // UPDATE:
      // A user can update a document if:
      // 1. They are authenticated.
      // 2. They are the owner of the document being updated.
      allow update: if isAuthenticated() && isOwner(resource.data.userId);

      // DELETE:
      // Deletes are disallowed to preserve data integrity.
      allow delete: if false;
    }
  }
}
